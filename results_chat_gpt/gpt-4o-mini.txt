SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT name, country, age FROM singer ORDER BY age DESC;
SELECT name, country, age  FROM singer  ORDER BY age DESC;
SELECT AVG(age) AS average_age, MIN(age) AS minimum_age, MAX(age) AS maximum_age FROM singer WHERE country = 'France';
SELECT AVG(age) AS average_age, MIN(age) AS minimum_age, MAX(age) AS maximum_age FROM singer WHERE country = 'France';
SELECT song_name, song_release_year  FROM singer  WHERE age = (SELECT MIN(age) FROM singer);
SELECT song_name, song_release_year  FROM singer  WHERE age = (SELECT MAX(age) FROM singer);
SELECT DISTINCT country  FROM singer  WHERE age > 20;
SELECT DISTINCT country  FROM singer  WHERE age > 20;
SELECT country, COUNT(singer_id) AS number_of_singers FROM singer GROUP BY country;
SELECT country, COUNT(*) AS singer_count FROM singer GROUP BY country;
SELECT DISTINCT s.song_name  FROM singer s  WHERE s.age > (SELECT AVG(age) FROM singer);
SELECT DISTINCT s.song_name  FROM singer s  WHERE s.age > (SELECT AVG(age) FROM singer);
SELECT location, name  FROM stadium  WHERE capacity BETWEEN 5000 AND 10000;
SELECT location, name  FROM stadium  WHERE capacity BETWEEN 5000 AND 10000;
SELECT MAX(capacity) AS max_capacity, AVG(capacity) AS average_capacity FROM stadium;
SELECT AVG(capacity) AS average_capacity, MAX(capacity) AS maximum_capacity FROM stadium;
SELECT name, capacity  FROM stadium  ORDER BY average DESC  LIMIT 1;
SELECT name, capacity  FROM stadium  ORDER BY average DESC  LIMIT 1;
SELECT COUNT(*) FROM concert WHERE year IN ('2014', '2015');
SELECT COUNT(*)  FROM concert  WHERE year IN ('2014', '2015');
SELECT s.name, COUNT(c.concert_id) AS number_of_concerts FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.name;
SELECT s.name, COUNT(c.concert_id) AS concert_count FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.name;
SELECT s.name, s.capacity FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year >= '2014' GROUP BY s.stadium_id, s.name, s.capacity ORDER BY COUNT(c.concert_id) DESC LIMIT 1;
SELECT s.name, s.capacity FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year > '2013' GROUP BY s.stadium_id, s.name, s.capacity ORDER BY COUNT(c.concert_id) DESC LIMIT 1;
SELECT year, COUNT(*) AS concert_count FROM concert GROUP BY year ORDER BY concert_count DESC LIMIT 1;
SELECT year FROM concert GROUP BY year ORDER BY COUNT(concert_id) DESC LIMIT 1;
SELECT name  FROM stadium  WHERE stadium_id NOT IN (SELECT DISTINCT stadium_id FROM concert);
SELECT name  FROM stadium  WHERE stadium_id NOT IN (SELECT DISTINCT stadium_id FROM concert);
SELECT DISTINCT s1.country FROM singer s1, singer s2 WHERE s1.age > 40 AND s2.age < 30 AND s1.country = s2.country;
SELECT name  FROM stadium  WHERE stadium_id NOT IN (     SELECT stadium_id      FROM concert      WHERE year = '2014' );
SELECT name  FROM stadium  WHERE stadium_id NOT IN (     SELECT DISTINCT stadium_id      FROM concert      WHERE year = '2014' );
```sql SELECT c.concert_name, c.theme, COUNT(sic.singer_id) AS number_of_singers FROM concert c LEFT JOIN singer_in_concert sic ON c.concert_id = sic.concert_id GROUP BY c.concert_name, c.theme; ```
SELECT c.concert_name, c.theme, COUNT(sic.singer_id) AS number_of_singers FROM concert c LEFT JOIN singer_in_concert sic ON c.concert_id = sic.concert_id GROUP BY c.concert_id, c.concert_name, c.theme;
SELECT s.name, COUNT(sic.concert_id) AS number_of_concerts FROM singer s LEFT JOIN singer_in_concert sic ON s.singer_id = sic.singer_id GROUP BY s.name;
SELECT s.name, COUNT(sic.concert_id) AS number_of_concerts FROM singer s LEFT JOIN singer_in_concert sic ON s.singer_id = sic.singer_id GROUP BY s.name;
SELECT DISTINCT s.name  FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id JOIN concert c ON sic.concert_id = c.concert_id WHERE c.year = '2014';
SELECT DISTINCT s.name  FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id JOIN concert c ON sic.concert_id = c.concert_id WHERE c.year = '2014';
SELECT name, country  FROM singer  WHERE song_name LIKE '%Hey%';
SELECT DISTINCT s.name, s.country FROM singer s WHERE s.song_name LIKE '%Hey%';
SELECT DISTINCT s.name, s.location FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year IN ('2014', '2015') GROUP BY s.stadium_id HAVING COUNT(DISTINCT c.year) = 2;
SELECT DISTINCT s.name, s.location FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year IN ('2014', '2015') GROUP BY s.stadium_id HAVING COUNT(DISTINCT c.year) = 2;
SELECT COUNT(c.concert_id)  FROM concert c  JOIN stadium s ON c.stadium_id = s.stadium_id  WHERE s.capacity = (SELECT MAX(capacity) FROM stadium);
SELECT COUNT(c.concert_id)  FROM concert c  JOIN stadium s ON c.stadium_id = s.stadium_id  WHERE s.capacity = (SELECT MAX(capacity) FROM stadium);
SELECT COUNT(*)  FROM pets  WHERE weight > 10;
SELECT COUNT(*) FROM pets WHERE weight > 10;
SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets);
SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets);
SELECT MAX(weight) AS max_weight, pettype  FROM pets  GROUP BY pettype;
SELECT MAX(weight) AS max_weight, pettype  FROM pets  GROUP BY pettype;
SELECT COUNT(*)  FROM has_pet hp  JOIN student s ON hp.stuid = s.stuid  WHERE s.age > 20;
SELECT COUNT(*)  FROM has_pet hp  JOIN student s ON hp.stuid = s.stuid  WHERE s.age > 20;
SELECT COUNT(*)  FROM student s  JOIN has_pet hp ON s.stuid = hp.stuid  JOIN pets p ON hp.petid = p.petid  WHERE s.sex = 'F' AND p.pettype = 'dog';
SELECT COUNT(*)  FROM student s  JOIN has_pet hp ON s.stuid = hp.stuid  JOIN pets p ON hp.petid = p.petid  WHERE s.sex = 'female' AND p.pettype = 'dog';
SELECT COUNT(DISTINCT pettype) FROM pets;
SELECT COUNT(DISTINCT pettype) FROM pets;
SELECT DISTINCT s.fname  FROM student s  JOIN has_pet hp ON s.stuid = hp.stuid  JOIN pets p ON hp.petid = p.petid  WHERE p.pettype IN ('cat', 'dog');
SELECT DISTINCT s.fname  FROM student s  JOIN has_pet hp ON s.stuid = hp.stuid  JOIN pets p ON hp.petid = p.petid  WHERE p.pettype IN ('cat', 'dog');
SELECT s.fname  FROM student s  JOIN has_pet hp ON s.stuid = hp.stuid  JOIN pets p ON hp.petid = p.petid  WHERE p.pettype IN ('cat', 'dog')  GROUP BY s.stuid, s.fname  HAVING COUNT(DISTINCT p.pettype) = 2;
SELECT s.fname  FROM student s  JOIN has_pet hp ON s.stuid = hp.stuid  JOIN pets p ON hp.petid = p.petid  WHERE p.pettype IN ('cat', 'dog')  GROUP BY s.fname  HAVING COUNT(DISTINCT p.pettype) = 2;
SELECT s.major, s.age  FROM student s  LEFT JOIN has_pet hp ON s.stuid = hp.stuid  LEFT JOIN pets p ON hp.petid = p.petid  WHERE p.pettype IS NULL OR p.pettype <> 'cat';
SELECT s.major, s.age  FROM student s  LEFT JOIN has_pet hp ON s.stuid = hp.stuid  LEFT JOIN pets p ON hp.petid = p.petid  WHERE p.pettype IS NULL OR p.pettype <> 'cat';
SELECT s.stuid  FROM student s  LEFT JOIN has_pet hp ON s.stuid = hp.stuid  LEFT JOIN pets p ON hp.petid = p.petid  WHERE p.pettype IS NULL OR p.pettype <> 'cat';
SELECT s.stuid  FROM student s  LEFT JOIN has_pet hp ON s.stuid = hp.stuid  LEFT JOIN pets p ON hp.petid = p.petid  WHERE p.pettype IS NULL OR p.pettype <> 'cat';
SELECT s.fname, s.age  FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'dog'  AND s.stuid NOT IN (     SELECT hp2.stuid      FROM has_pet hp2      JOIN pets p2 ON hp2.petid = p2.petid      WHERE p2.pettype = 'cat' );
SELECT s.fname  FROM student s  JOIN has_pet hp ON s.stuid = hp.stuid  JOIN pets p ON hp.petid = p.petid  WHERE p.pettype = 'dog'  AND s.stuid NOT IN (     SELECT hp2.stuid      FROM has_pet hp2      JOIN pets p2 ON hp2.petid = p2.petid      WHERE p2.pettype = 'cat' );
SELECT pettype, weight  FROM pets  WHERE petid IN (SELECT petid                   FROM has_pet                   WHERE stuid IN (SELECT stuid                                   FROM student                                   ORDER BY age ASC                                   LIMIT 1))  ORDER BY pet_age ASC  LIMIT 1;
SELECT pettype, weight  FROM pets  WHERE pet_age = (SELECT MIN(pet_age) FROM pets);
SELECT p.petid, p.weight  FROM pets p  WHERE p.pet_age > 1;
SELECT p.petid, p.weight  FROM pets p  WHERE p.pet_age > 1;
SELECT AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age, pettype FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid GROUP BY pettype;
```sql SELECT AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age, pettype FROM pets GROUP BY pettype; ```
SELECT AVG(weight) AS average_weight, pettype  FROM pets  GROUP BY pettype;
SELECT AVG(weight) AS average_weight, pettype  FROM pets  GROUP BY pettype;
SELECT s.fname, s.age  FROM student s  JOIN has_pet hp ON s.stuid = hp.stuid  JOIN pets p ON hp.petid = p.petid;
SELECT DISTINCT s.fname, s.age FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid;
SELECT hp.petid  FROM has_pet hp  JOIN student s ON hp.stuid = s.stuid  WHERE s.lname = 'Smith';
SELECT hp.petid  FROM student s  JOIN has_pet hp ON s.stuid = hp.stuid  WHERE s.lname = 'Smith';
SELECT h.stuid, COUNT(h.petid) AS pet_count FROM has_pet h JOIN pets p ON h.petid = p.petid GROUP BY h.stuid;
SELECT h.stuid, COUNT(h.petid) AS pet_count FROM has_pet h GROUP BY h.stuid;
SELECT s.fname, s.sex  FROM student s  JOIN has_pet hp ON s.stuid = hp.stuid  GROUP BY s.stuid, s.fname, s.sex  HAVING COUNT(hp.petid) > 1;
SELECT s.fname, s.sex  FROM student s  JOIN has_pet hp ON s.stuid = hp.stuid  GROUP BY s.stuid, s.fname, s.sex  HAVING COUNT(hp.petid) > 1;
SELECT s.lname  FROM student s  JOIN has_pet hp ON s.stuid = hp.stuid  JOIN pets p ON hp.petid = p.petid  WHERE p.pettype = 'cat' AND p.pet_age = 3;
SELECT s.lname  FROM student s  JOIN has_pet hp ON s.stuid = hp.stuid  JOIN pets p ON hp.petid = p.petid  WHERE p.pet_age = 3;
SELECT AVG(age)  FROM student  WHERE stuid NOT IN (SELECT stuid FROM has_pet);
SELECT AVG(age)  FROM student  WHERE stuid NOT IN (SELECT stuid FROM has_pet);
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT c.contid, c.continent, COUNT(co.countryid) AS country_count FROM continents c LEFT JOIN countries co ON c.contid = co.continent GROUP BY c.contid, c.continent;
SELECT c.contid, c.continent, COUNT(co.countryid) AS country_count FROM continents c LEFT JOIN countries co ON c.contid = co.continent GROUP BY c.contid, c.continent;
SELECT COUNT(*) FROM countries;
SELECT COUNT(DISTINCT countryname) FROM countries;
SELECT cm.fullname, cm.id, COUNT(ml.modelid) AS model_count FROM car_makers cm LEFT JOIN model_list ml ON cm.id = ml.maker GROUP BY cm.fullname, cm.id;
SELECT cm.fullname, cm.id, COUNT(ml.modelid) AS model_count FROM car_makers cm LEFT JOIN model_list ml ON cm.id = ml.maker GROUP BY cm.fullname, cm.id;
SELECT model  FROM cars_data  WHERE horsepower = (SELECT MIN(horsepower) FROM cars_data);
SELECT model  FROM cars_data  ORDER BY CAST(horsepower AS INTEGER)  LIMIT 1;
SELECT DISTINCT cl.model  FROM cars_data cd  JOIN car_names cl ON cd.id = cl.makeid  WHERE cd.weight < (SELECT AVG(weight) FROM cars_data);
SELECT model  FROM cars_data  WHERE weight < (SELECT AVG(weight) FROM cars_data);
SELECT DISTINCT cm.maker  FROM car_makers cm  JOIN model_list ml ON cm.id = ml.maker  JOIN car_names cn ON ml.modelid = cn.makeid  JOIN cars_data cd ON cn.model = cd.model  WHERE cd.year = 1970;
SELECT DISTINCT cm.maker  FROM car_makers cm  JOIN model_list ml ON cm.id = ml.maker  JOIN car_names cn ON ml.modelid = cn.makeid  JOIN cars_data cd ON cn.model = cd.model  WHERE cd.year = 1970;
SELECT make, year  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE year = (SELECT MIN(year) FROM cars_data);
SELECT cm.maker, MIN(cd.year) AS earliest_year FROM cars_data cd JOIN car_names cn ON cd.id = cn.makeid JOIN car_makers cm ON cn.make = cm.fullname GROUP BY cm.maker ORDER BY earliest_year LIMIT 1;
SELECT DISTINCT model  FROM cars_data  WHERE year > 1980;
SELECT DISTINCT cl.model  FROM model_list ml  JOIN car_names cn ON ml.modelid = cn.makeid  JOIN cars_data cd ON ml.modelid = cd.id  WHERE cd.year > 1980;
SELECT c.continent, COUNT(DISTINCT cm.maker) AS maker_count FROM continents c JOIN countries co ON c.contid = co.continent JOIN car_makers cm ON co.countryid = cm.country GROUP BY c.continent;
SELECT c.continent, COUNT(DISTINCT cm.id) AS car_maker_count FROM continents c JOIN countries co ON c.contid = co.continent JOIN car_makers cm ON co.countryid = cm.country GROUP BY c.continent;
SELECT countryname  FROM countries  JOIN car_makers ON countries.countryname = car_makers.country  GROUP BY countries.countryname  ORDER BY COUNT(car_makers.id) DESC  LIMIT 1;
SELECT countryname  FROM countries  WHERE countryid = (     SELECT country      FROM car_makers      GROUP BY country      ORDER BY COUNT(*) DESC      LIMIT 1 );
SELECT COUNT(modelid) AS count, cm.fullname  FROM model_list ml  JOIN car_makers cm ON ml.maker = cm.id  GROUP BY cm.fullname;
```sql SELECT cm.id, cm.fullname, COUNT(ml.modelid) AS model_count FROM car_makers cm LEFT JOIN model_list ml ON cm.id = ml.maker GROUP BY cm.id, cm.fullname; ```
SELECT accelerate  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.makeid = model_list.maker  JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.maker = 'amc' AND car_names.model = 'hornet sportabout';
SELECT accelerate FROM cars_data WHERE id = (SELECT id FROM car_names WHERE make = 'amc' AND model = 'hornet sportabout');
SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country = 'France';
SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country = 'France';
SELECT COUNT(DISTINCT ml.modelid)  FROM model_list ml  JOIN car_makers cm ON ml.maker = cm.id  JOIN countries c ON cm.country = c.countryid  WHERE c.countryname = 'USA';
SELECT COUNT(DISTINCT ml.model)  FROM model_list ml  JOIN car_makers cm ON ml.maker = cm.id  JOIN countries c ON cm.country = c.countryid  WHERE c.countryname = 'United States';
SELECT AVG(mpg)  FROM cars_data  WHERE cylinders = 4;
SELECT AVG(CAST(mpg AS FLOAT))  FROM cars_data  WHERE cylinders = 4;
SELECT MIN(weight)  FROM cars_data  WHERE cylinders = 8 AND year = 1974;
SELECT MIN(weight)  FROM cars_data  WHERE cylinders = 8 AND year = 1974;
SELECT DISTINCT cm.maker, ml.model  FROM car_makers cm  JOIN model_list ml ON cm.id = ml.maker;
SELECT DISTINCT cm.maker, ml.model  FROM car_makers cm  JOIN model_list ml ON cm.id = ml.maker;
SELECT DISTINCT c.countryname, c.countryid  FROM countries c  JOIN car_makers cm ON c.countryname = cm.country;
SELECT DISTINCT c.countryname, c.countryid  FROM countries c  JOIN car_makers cm ON c.countryname = cm.country;
SELECT COUNT(*) FROM cars_data WHERE CAST(horsepower AS INTEGER) > 150;
SELECT COUNT(*) FROM cars_data WHERE CAST(horsepower AS INTEGER) > 150;
SELECT AVG(weight) AS average_weight, year  FROM cars_data  GROUP BY year;
SELECT AVG(weight) AS average_weight, year FROM cars_data GROUP BY year;
SELECT c.countryname  FROM countries c JOIN car_makers cm ON c.countryname = cm.country WHERE c.continent = (SELECT contid FROM continents WHERE continent = 'Europe') GROUP BY c.countryname HAVING COUNT(cm.id) >= 3;
SELECT c.countryname  FROM countries c JOIN car_makers cm ON c.countryid = cm.country JOIN continents con ON c.continent = con.contid WHERE con.continent = 'Europe' GROUP BY c.countryname HAVING COUNT(cm.id) >= 3;
SELECT MAX(horsepower) AS max_horsepower, make  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE cylinders = 3  GROUP BY make;
SELECT MAX(horsepower) AS max_horsepower, make  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE cylinders = 3  GROUP BY make  ORDER BY max_horsepower DESC  LIMIT 1;
SELECT make, MAX(CAST(mpg AS FLOAT)) AS max_mpg FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid GROUP BY make ORDER BY max_mpg DESC LIMIT 1;
SELECT model, MAX(mpg) AS highest_mpg FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid GROUP BY model ORDER BY highest_mpg DESC LIMIT 1;
SELECT AVG(CAST(horsepower AS FLOAT))  FROM cars_data  WHERE year < 1980;
SELECT AVG(CAST(horsepower AS FLOAT))  FROM cars_data  WHERE year < 1980;
SELECT AVG(edispl)  FROM cars_data  JOIN model_list ON cars_data.id = model_list.modelid  JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.maker = 'volvo';
SELECT AVG(edispl) FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.maker = 'Volvo';
SELECT MAX(accelerate), cylinders  FROM cars_data  GROUP BY cylinders;
SELECT MAX(accelerate), cylinders FROM cars_data GROUP BY cylinders;
SELECT make  FROM car_names  GROUP BY make  ORDER BY COUNT(DISTINCT model) DESC  LIMIT 1;
SELECT ml.maker, COUNT(DISTINCT ml.model) AS version_count FROM model_list ml GROUP BY ml.maker ORDER BY version_count DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE year = 1980;
SELECT COUNT(*) FROM cars_data WHERE year = 1980;
SELECT COUNT(*)  FROM model_list  WHERE maker = (SELECT id FROM car_makers WHERE fullname = 'American Motor Company');
SELECT COUNT(*)  FROM model_list  JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.maker = 'American Motor Company';
SELECT cm.fullname, cm.id FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker GROUP BY cm.fullname, cm.id HAVING COUNT(ml.modelid) > 3;
```sql SELECT cm.maker, cm.id FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker GROUP BY cm.id, cm.maker HAVING COUNT(ml.modelid) > 3; ```
SELECT DISTINCT ml.model  FROM model_list ml  JOIN car_makers cm ON ml.maker = cm.id  WHERE cm.fullname = 'General Motors' OR ml.model IN (     SELECT cd.model      FROM cars_data cd      WHERE cd.weight > 3500 );
SELECT DISTINCT ml.model FROM model_list ml JOIN car_makers cm ON ml.maker = cm.id JOIN cars_data cd ON ml.modelid = cd.id WHERE cm.maker = 'General Motors' OR cd.weight > 3500;
SELECT DISTINCT year  FROM cars_data  WHERE weight >= 3000 AND weight <= 4000;
SELECT DISTINCT year  FROM cars_data  WHERE year IN (     SELECT year      FROM cars_data      WHERE weight < 4000 ) AND year IN (     SELECT year      FROM cars_data      WHERE weight > 3000 );
SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1;
SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1;
SELECT cylinders  FROM cars_data  WHERE id = (SELECT id               FROM cars_data               WHERE id IN (SELECT modelid                             FROM model_list                             WHERE model = 'volvo')               ORDER BY accelerate ASC               LIMIT 1);
SELECT cylinders  FROM cars_data  WHERE id IN (     SELECT id      FROM cars_data      WHERE id IN (         SELECT modelid          FROM model_list          WHERE maker IN (             SELECT id              FROM car_makers              WHERE maker = 'Volvo'         )     )      ORDER BY accelerate      LIMIT 1 );
SELECT COUNT(*)  FROM cars_data  WHERE accelerate > (SELECT MAX(accelerate)                      FROM cars_data                      WHERE horsepower = (SELECT MAX(horsepower)                                          FROM cars_data));
SELECT COUNT(*)  FROM cars_data  WHERE accelerate > (SELECT MAX(accelerate)                      FROM cars_data                      WHERE horsepower = (SELECT MAX(horsepower)                                          FROM cars_data));
SELECT COUNT(DISTINCT country)  FROM car_makers  GROUP BY country  HAVING COUNT(*) > 2;
SELECT COUNT(DISTINCT country) AS number_of_countries FROM car_makers GROUP BY country HAVING COUNT(*) > 2;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;
SELECT make, model, horsepower  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE cylinders = 4  ORDER BY CAST(horsepower AS INTEGER) DESC  LIMIT 1;
SELECT model, MAX(horsepower)  FROM cars_data  WHERE cylinders = 4  GROUP BY model  ORDER BY MAX(horsepower) DESC  LIMIT 1;
SELECT DISTINCT c.makeid, c.make FROM cars_data cd JOIN car_names c ON cd.id = c.makeid WHERE cd.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cd.cylinders <= 3;
```sql SELECT cn.makeid, cn.make FROM cars_data cd JOIN car_names cn ON cd.id = cn.modelid WHERE cd.cylinders < 4 AND cd.horsepower <> (SELECT MIN(horsepower) FROM cars_data); ```
SELECT MAX(mpg)  FROM cars_data  WHERE cylinders = 8 OR year < 1980;
SELECT MAX(mpg)  FROM cars_data  WHERE cylinders = 8 OR year < 1980;
SELECT DISTINCT cl.make  FROM car_names cl  JOIN model_list ml ON cl.makeid = ml.maker  JOIN car_makers cm ON ml.maker = cm.id  JOIN cars_data cd ON ml.modelid = cd.id  WHERE cd.weight < 3500 AND cm.fullname != 'Ford Motor Company';
SELECT DISTINCT cl.make  FROM car_names cl  JOIN model_list ml ON cl.makeid = ml.modelid  JOIN car_makers cm ON ml.maker = cm.id  JOIN cars_data cd ON ml.modelid = cd.id  WHERE cd.weight < 3500 AND cm.maker <> 'Ford';
SELECT countryname  FROM countries  WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers);
SELECT countryname  FROM countries  WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers);
```sql SELECT cm.id, cm.maker FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker GROUP BY cm.id, cm.maker HAVING COUNT(ml.modelid) >= 2 AND COUNT(DISTINCT cm.id) > 3; ```
```sql SELECT cm.id, cm.maker FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker JOIN cars_data cd ON ml.modelid = cd.id GROUP BY cm.id, cm.maker HAVING COUNT(DISTINCT ml.modelid) >= 2 AND COUNT(cd.id) > 3; ```
```sql SELECT c.countryid, c.countryname FROM countries c LEFT JOIN car_makers cm ON c.countryname = cm.country LEFT JOIN model_list ml ON cm.id = ml.maker WHERE (SELECT COUNT(*) FROM car_makers WHERE country = c.countryname) > 3    OR ml.model = 'fiat' GROUP BY c.countryid, c.countryname; ```
SELECT c.countryid, c.countryname  FROM countries c  LEFT JOIN car_makers cm ON c.countryname = cm.country  GROUP BY c.countryid, c.countryname  HAVING COUNT(cm.id) > 3 OR c.countryname IN (SELECT DISTINCT cm.country FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker WHERE ml.model = 'fiat');
SELECT country FROM airlines WHERE airline = 'JetBlue Airways';
SELECT country FROM airlines WHERE airline = 'Jetblue Airways';
SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';
SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';
SELECT airline, abbreviation  FROM airlines  WHERE country = 'USA';
SELECT airline, abbreviation  FROM airlines  WHERE country = 'USA';
SELECT airportcode, airportname  FROM airports  WHERE city = 'Anthony';
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';
SELECT COUNT(DISTINCT uid) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT airline FROM airlines WHERE abbreviation = 'UAL';
SELECT airline FROM airlines WHERE abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE country = 'USA';
SELECT COUNT(DISTINCT airline) FROM airlines WHERE country = 'USA';
SELECT city, country FROM airports WHERE airportname = 'Alton';
SELECT city, country FROM airports WHERE airportname = 'Alton';
SELECT airportname FROM airports WHERE airportcode = 'AKO';
SELECT airportname FROM airports WHERE airportcode = 'AKO';
SELECT airportname FROM airports WHERE city = 'Aberdeen';
SELECT airportname FROM airports WHERE city = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';
SELECT COUNT(*)  FROM flights  WHERE sourceairport = 'APG';
SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';
SELECT COUNT(*)  FROM flights  WHERE destairport = 'ATO';
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.sourceairport = airports.airportcode  WHERE airports.city = 'Aberdeen';
SELECT COUNT(*)  FROM flights  WHERE sourceairport = 'Aberdeen';
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city = 'Aberdeen';
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city = 'Aberdeen';
SELECT COUNT(*)  FROM flights  JOIN airports AS source ON flights.sourceairport = source.airportcode  JOIN airports AS destination ON flights.destairport = destination.airportcode  WHERE source.city = 'Aberdeen' AND destination.city = 'Ashley';
SELECT COUNT(*)  FROM flights  JOIN airports AS source ON flights.sourceairport = source.airportcode  JOIN airports AS destination ON flights.destairport = destination.airportcode  WHERE source.city = 'Aberdeen' AND destination.city = 'Ashley';
SELECT COUNT(*) FROM flights WHERE airline = (SELECT uid FROM airlines WHERE airline = 'JetBlue Airways');
SELECT COUNT(*) FROM flights WHERE airline = (SELECT uid FROM airlines WHERE airline = 'Jetblue Airways');
SELECT COUNT(*)  FROM flights f  JOIN airlines a ON f.airline = a.uid  WHERE a.airline = 'United Airlines' AND f.destairport = 'ASY';
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.airline = airlines.uid  JOIN airports ON flights.destairport = airports.airportcode  WHERE airlines.abbreviation = 'UA' AND airports.airportcode = 'ASY';
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE airlines.airline = 'United Airlines' AND flights.sourceairport = 'AHD';
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE airlines.abbreviation = 'UA' AND flights.sourceairport = 'AHD';
SELECT COUNT(*)  FROM flights f  JOIN airlines a ON f.airline = a.uid  JOIN airports ap ON f.destairport = ap.airportcode  WHERE a.abbreviation = 'UA' AND ap.city = 'Aberdeen';
SELECT COUNT(*)  FROM flights f  JOIN airlines a ON f.airline = a.uid  JOIN airports ap ON f.destairport = ap.airportcode  WHERE a.abbreviation = 'UA' AND ap.city = 'Aberdeen';
SELECT a.city, COUNT(f.destairport) AS arriving_flights FROM flights f JOIN airports a ON f.destairport = a.airportcode GROUP BY a.city ORDER BY arriving_flights DESC LIMIT 1;
SELECT a.city, COUNT(f.destairport) AS frequency FROM flights f JOIN airports a ON f.destairport = a.airportcode GROUP BY a.city ORDER BY frequency DESC LIMIT 1;
SELECT a.city, COUNT(f.flightno) AS departing_flights FROM flights f JOIN airports a ON f.sourceairport = a.airportcode GROUP BY a.city ORDER BY departing_flights DESC LIMIT 1;
SELECT a.city, COUNT(f.sourceairport) AS frequency FROM flights f JOIN airports a ON f.sourceairport = a.airportcode GROUP BY a.city ORDER BY frequency DESC LIMIT 1;
SELECT sourceairport AS airportcode FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT sourceairport AS airportcode FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT sourceairport AS airportcode FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT sourceairport AS airportcode FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT a.airline, COUNT(f.flightno) AS flight_count FROM airlines a JOIN flights f ON a.uid = f.airline GROUP BY a.airline ORDER BY flight_count DESC LIMIT 1;
SELECT a.airline FROM airlines a JOIN flights f ON a.uid = f.airline GROUP BY a.airline ORDER BY COUNT(f.flightno) DESC LIMIT 1;
SELECT abbreviation, country  FROM airlines  WHERE uid = (     SELECT airline      FROM flights      GROUP BY airline      ORDER BY COUNT(*) ASC      LIMIT 1 );
SELECT abbreviation, country  FROM airlines  WHERE uid = (     SELECT airline      FROM flights      GROUP BY airline      ORDER BY COUNT(*) ASC      LIMIT 1 );
SELECT DISTINCT a.airline  FROM airlines a  JOIN flights f ON a.uid = f.airline  WHERE f.sourceairport = 'AHD';
SELECT DISTINCT a.airline  FROM airlines a  JOIN flights f ON a.uid = f.airline  WHERE f.sourceairport = 'AHD';
SELECT DISTINCT a.airline  FROM airlines a  JOIN flights f ON a.uid = f.airline  WHERE f.destairport = 'AHD';
SELECT DISTINCT a.airline  FROM airlines a  JOIN flights f ON a.uid = f.airline  WHERE f.destairport = 'AHD';
SELECT DISTINCT a.airline FROM airlines a JOIN flights f1 ON a.uid = f1.airline JOIN flights f2 ON a.uid = f2.airline WHERE f1.sourceairport = 'APG' OR f1.destairport = 'APG' AND (f2.sourceairport = 'CVO' OR f2.destairport = 'CVO');
SELECT DISTINCT a.airline FROM airlines a JOIN flights f ON a.uid = f.airline WHERE f.sourceairport IN ('APG', 'CVO') GROUP BY a.airline HAVING COUNT(DISTINCT f.sourceairport) = 2;
SELECT DISTINCT a.airline FROM airlines a JOIN flights f ON a.uid = f.airline WHERE f.sourceairport = 'CVO' AND a.uid NOT IN (     SELECT DISTINCT f2.airline     FROM flights f2     WHERE f2.sourceairport = 'APG' );
SELECT DISTINCT a.airline FROM airlines a JOIN flights f ON a.uid = f.airline WHERE f.sourceairport = 'CVO' AND a.uid NOT IN (     SELECT DISTINCT f2.airline     FROM flights f2     WHERE f2.sourceairport = 'APG' );
SELECT a.airline FROM airlines a JOIN flights f ON a.uid = f.airline GROUP BY a.airline HAVING COUNT(f.flightno) >= 10;
SELECT a.airline FROM airlines a JOIN flights f ON a.uid = f.airline GROUP BY a.airline HAVING COUNT(f.flightno) >= 10;
SELECT a.airline  FROM airlines a  JOIN flights f ON a.uid = f.airline  GROUP BY a.airline  HAVING COUNT(f.flightno) < 200;
SELECT a.airline  FROM airlines a  JOIN flights f ON a.uid = f.airline  GROUP BY a.airline  HAVING COUNT(f.flightno) < 200;
SELECT flightno FROM flights WHERE airline = (SELECT uid FROM airlines WHERE airline = 'United Airlines');
SELECT flightno FROM flights WHERE airline = (SELECT uid FROM airlines WHERE airline = 'United Airlines');
SELECT flightno FROM flights WHERE sourceairport = 'APG';
SELECT flightno  FROM flights  WHERE sourceairport = 'APG';
SELECT flightno  FROM flights  WHERE destairport = 'APG';
SELECT flightno  FROM flights  WHERE destairport = 'APG';
SELECT flightno  FROM flights  JOIN airports ON flights.sourceairport = airports.airportcode  WHERE airports.city = 'Aberdeen';
SELECT flightno  FROM flights  WHERE sourceairport = 'Aberdeen';
SELECT flightno  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city = 'Aberdeen';
SELECT flightno  FROM flights  WHERE destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen');
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city IN ('Aberdeen', 'Abilene');
SELECT COUNT(*)  FROM flights  WHERE destairport IN (SELECT airportcode FROM airports WHERE city IN ('Aberdeen', 'Abilene'));
SELECT airportname  FROM airports  WHERE airportcode NOT IN (SELECT DISTINCT sourceairport FROM flights                             UNION                             SELECT DISTINCT destairport FROM flights);
SELECT airportcode, airportname  FROM airports  WHERE airportcode NOT IN (SELECT sourceairport FROM flights)  AND airportcode NOT IN (SELECT destairport FROM flights);
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT name FROM employee ORDER BY age ASC;
SELECT name FROM employee ORDER BY age ASC;
SELECT COUNT(employee_id) AS employee_count, city  FROM employee  GROUP BY city;
SELECT COUNT(employee_id) AS employee_count, city  FROM employee  GROUP BY city;
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(employee_id) > 1;
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(employee_id) > 1;
SELECT COUNT(shop_id) AS number_of_shops, location  FROM shop  GROUP BY location;
SELECT COUNT(shop_id) AS shop_count, location  FROM shop  GROUP BY location;
SELECT manager_name, district  FROM shop  WHERE number_products = (SELECT MAX(number_products) FROM shop);
SELECT manager_name, district  FROM shop  WHERE number_products = (SELECT MAX(number_products) FROM shop);
SELECT MIN(number_products) AS min_products, MAX(number_products) AS max_products FROM shop;
SELECT MIN(number_products) AS min_products, MAX(number_products) AS max_products FROM shop;
SELECT name, location, district  FROM shop  ORDER BY number_products DESC;
SELECT name, location, district  FROM shop  ORDER BY number_products DESC;
SELECT name  FROM shop  WHERE number_products > (SELECT AVG(number_products) FROM shop);
SELECT name  FROM shop  WHERE number_products > (SELECT AVG(number_products) FROM shop);
SELECT e.name FROM employee e JOIN evaluation ev ON e.employee_id = ev.employee_id GROUP BY e.employee_id, e.name ORDER BY COUNT(ev.year_awarded) DESC LIMIT 1;
SELECT e.name FROM employee e JOIN evaluation ev ON e.employee_id = ev.employee_id GROUP BY e.name ORDER BY COUNT(ev.year_awarded) DESC LIMIT 1;
SELECT e.name  FROM employee e  JOIN evaluation ev ON e.employee_id = ev.employee_id  ORDER BY ev.bonus DESC  LIMIT 1;
SELECT e.name  FROM employee e  JOIN evaluation ev ON e.employee_id = ev.employee_id  ORDER BY ev.bonus DESC  LIMIT 1;
SELECT e.name  FROM employee e  LEFT JOIN evaluation ev ON e.employee_id = ev.employee_id  WHERE ev.employee_id IS NULL;
SELECT e.name  FROM employee e  LEFT JOIN evaluation ev ON e.employee_id = ev.employee_id  WHERE ev.employee_id IS NULL;
SELECT s.name  FROM shop s  JOIN hiring h ON s.shop_id = h.shop_id  GROUP BY s.shop_id, s.name  ORDER BY COUNT(h.employee_id) DESC  LIMIT 1;
SELECT s.name  FROM shop s  JOIN hiring h ON s.shop_id = h.shop_id  GROUP BY s.shop_id, s.name  ORDER BY COUNT(h.employee_id) DESC  LIMIT 1;
SELECT s.name  FROM shop s  LEFT JOIN hiring h ON s.shop_id = h.shop_id  WHERE h.employee_id IS NULL;
SELECT s.name  FROM shop s  LEFT JOIN hiring h ON s.shop_id = h.shop_id  WHERE h.employee_id IS NULL;
SELECT COUNT(e.employee_id) AS employee_count, s.name AS shop_name FROM hiring h JOIN employee e ON h.employee_id = e.employee_id JOIN shop s ON h.shop_id = s.shop_id GROUP BY s.name;
SELECT COUNT(e.employee_id) AS employee_count, s.name AS shop_name FROM shop s LEFT JOIN hiring h ON s.shop_id = h.shop_id LEFT JOIN employee e ON h.employee_id = e.employee_id GROUP BY s.shop_id, s.name;
SELECT SUM(bonus) AS total_bonus FROM evaluation;
SELECT SUM(bonus) AS total_bonus FROM evaluation;
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT DISTINCT s1.district FROM shop s1 JOIN shop s2 ON s1.district = s2.district WHERE s1.number_products < 3000 AND s2.number_products > 10000;
SELECT DISTINCT s1.district FROM shop s1 JOIN shop s2 ON s1.district = s2.district WHERE s1.number_products < 3000 AND s2.number_products > 10000;
SELECT COUNT(DISTINCT location) FROM shop;
SELECT COUNT(DISTINCT location) FROM shop;
SELECT COUNT(*) FROM documents;
SELECT COUNT(*) FROM documents;
SELECT document_id, document_name, document_description  FROM documents;
SELECT document_id, document_name, document_description FROM documents;
SELECT document_name, template_id  FROM documents  WHERE document_description LIKE '%w%';
SELECT document_name, template_id  FROM documents  WHERE document_description LIKE '%w%';
SELECT d.document_id, d.template_id, d.document_description  FROM documents d  WHERE d.document_name = 'Robbin CV';
SELECT d.document_id, d.template_id, d.document_description  FROM documents d  WHERE d.document_name = 'Robbin CV';
SELECT COUNT(DISTINCT t.template_type_code)  FROM templates t  JOIN documents d ON t.template_id = d.template_id;
SELECT COUNT(DISTINCT template_type_code)  FROM templates;
SELECT COUNT(d.document_id)  FROM documents d  JOIN templates t ON d.template_id = t.template_id  WHERE t.template_type_code = 'PPT';
SELECT COUNT(d.document_id)  FROM documents d  JOIN templates t ON d.template_id = t.template_id  JOIN ref_template_types r ON t.template_type_code = r.template_type_code  WHERE r.template_type_code = 'PPT';
SELECT t.template_id, COUNT(d.document_id) AS document_count FROM templates t LEFT JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id;
SELECT d.template_id, COUNT(d.document_id) AS usage_count FROM documents d GROUP BY d.template_id;
SELECT t.template_id, t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id, t.template_type_code ORDER BY COUNT(d.document_id) DESC LIMIT 1;
```sql SELECT t.template_id, t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id, t.template_type_code ORDER BY COUNT(d.document_id) DESC LIMIT 1; ```
SELECT t.template_id FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id HAVING COUNT(d.document_id) > 1;
SELECT template_id  FROM documents  GROUP BY template_id  HAVING COUNT(document_id) > 1;
SELECT t.template_id  FROM templates t  LEFT JOIN documents d ON t.template_id = d.template_id  WHERE d.document_id IS NULL;
SELECT t.template_id  FROM templates t  LEFT JOIN documents d ON t.template_id = d.template_id  WHERE d.document_id IS NULL;
SELECT COUNT(*) FROM templates;
SELECT COUNT(*) FROM templates;
SELECT template_id, version_number, template_type_code  FROM templates;
SELECT template_id, version_number, template_type_code  FROM templates;
SELECT DISTINCT template_type_code FROM ref_template_types;
SELECT DISTINCT template_type_code FROM ref_template_types;
SELECT t.template_id  FROM templates t  JOIN ref_template_types r ON t.template_type_code = r.template_type_code  WHERE r.template_type_code IN ('PP', 'PPT');
SELECT template_id  FROM templates  WHERE template_type_code IN ('PP', 'PPT');
SELECT COUNT(*)  FROM templates  WHERE template_type_code = 'CV';
SELECT COUNT(*)  FROM templates  WHERE template_type_code = 'CV';
SELECT version_number, template_type_code  FROM templates  WHERE version_number > 5;
SELECT version_number, template_type_code  FROM templates  WHERE version_number > 5;
SELECT r.template_type_code, COUNT(t.template_id) AS number_of_templates FROM ref_template_types r LEFT JOIN templates t ON r.template_type_code = t.template_type_code GROUP BY r.template_type_code;
SELECT rt.template_type_code, COUNT(t.template_id) AS template_count FROM ref_template_types rt LEFT JOIN templates t ON rt.template_type_code = t.template_type_code GROUP BY rt.template_type_code;
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(template_id) DESC LIMIT 1;
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT r.template_type_code FROM ref_template_types r LEFT JOIN templates t ON r.template_type_code = t.template_type_code GROUP BY r.template_type_code HAVING COUNT(t.template_id) < 3;
SELECT template_type_code  FROM templates  GROUP BY template_type_code  HAVING COUNT(template_id) < 3;
SELECT MIN(version_number) AS smallest_version, template_type_code FROM templates GROUP BY template_type_code ORDER BY smallest_version LIMIT 1;
SELECT MIN(t.version_number) AS lowest_version, t.template_type_code FROM templates t JOIN ref_template_types r ON t.template_type_code = r.template_type_code GROUP BY t.template_type_code;
SELECT t.template_type_code  FROM documents d  JOIN templates t ON d.template_id = t.template_id  WHERE d.document_name = 'Data base';
SELECT t.template_type_code  FROM documents d  JOIN templates t ON d.template_id = t.template_id  WHERE d.document_name = 'Data base';
SELECT d.document_name  FROM documents d  JOIN templates t ON d.template_id = t.template_id  WHERE t.template_type_code = 'BK';
SELECT d.document_name  FROM documents d  JOIN templates t ON d.template_id = t.template_id  WHERE t.template_type_code = 'BK';
SELECT r.template_type_code, COUNT(d.document_id) AS document_count FROM ref_template_types r LEFT JOIN templates t ON r.template_type_code = t.template_type_code LEFT JOIN documents d ON t.template_id = d.template_id GROUP BY r.template_type_code;
SELECT rt.template_type_code, COUNT(d.document_id) AS document_count FROM ref_template_types rt LEFT JOIN templates t ON rt.template_type_code = t.template_type_code LEFT JOIN documents d ON t.template_id = d.template_id GROUP BY rt.template_type_code;
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(document_id) DESC LIMIT 1;
SELECT template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT r.template_type_code  FROM ref_template_types r  LEFT JOIN templates t ON r.template_type_code = t.template_type_code  LEFT JOIN documents d ON t.template_id = d.template_id  WHERE d.document_id IS NULL;
SELECT r.template_type_code  FROM ref_template_types r  LEFT JOIN templates t ON r.template_type_code = t.template_type_code  LEFT JOIN documents d ON t.template_id = d.template_id  WHERE d.document_id IS NULL;
SELECT template_type_code, template_type_description  FROM ref_template_types;
SELECT template_type_code, template_type_description  FROM ref_template_types;
SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = 'AD';
SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = 'AD';
SELECT template_type_code  FROM ref_template_types  WHERE template_type_description = 'Book';
SELECT template_type_code  FROM ref_template_types  WHERE template_type_description = 'Book';
SELECT DISTINCT r.template_type_description FROM ref_template_types r JOIN templates t ON r.template_type_code = t.template_type_code JOIN documents d ON t.template_id = d.template_id;
SELECT DISTINCT r.template_type_description FROM ref_template_types r JOIN templates t ON r.template_type_code = t.template_type_code JOIN documents d ON t.template_id = d.template_id;
SELECT t.template_id  FROM templates t  JOIN ref_template_types r ON t.template_type_code = r.template_type_code  WHERE r.template_type_description = 'Presentation';
SELECT t.template_id  FROM templates t  JOIN ref_template_types r ON t.template_type_code = r.template_type_code  WHERE r.template_type_description = 'Presentation';
SELECT COUNT(*) FROM paragraphs;
SELECT COUNT(*) FROM paragraphs;
SELECT COUNT(*)  FROM paragraphs  WHERE document_id = (SELECT document_id                       FROM documents                       WHERE document_name = 'Summer Show');
SELECT COUNT(*)  FROM paragraphs p  JOIN documents d ON p.document_id = d.document_id  WHERE d.document_name = 'Summer Show';
SELECT * FROM paragraphs WHERE paragraph_text = 'Korea ';
SELECT *  FROM paragraphs  WHERE paragraph_text LIKE '%Korea %';
SELECT p.paragraph_id, p.paragraph_text  FROM paragraphs p  JOIN documents d ON p.document_id = d.document_id  WHERE d.document_name = 'Welcome to NY';
SELECT p.paragraph_id, p.paragraph_text  FROM documents d  JOIN paragraphs p ON d.document_id = p.document_id  WHERE d.document_name = 'Welcome to NY';
SELECT p.paragraph_text  FROM paragraphs p  JOIN documents d ON p.document_id = d.document_id  WHERE d.document_name = 'Customer reviews';
SELECT p.paragraph_text  FROM documents d  JOIN paragraphs p ON d.document_id = p.document_id  WHERE d.document_name = 'Customer reviews';
SELECT d.document_id, COUNT(p.paragraph_id) AS paragraph_count FROM documents d LEFT JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id ORDER BY d.document_id;
SELECT d.document_id, COUNT(p.paragraph_id) AS paragraph_count FROM documents d LEFT JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id ORDER BY d.document_id;
SELECT d.document_id, d.document_name, COUNT(p.paragraph_id) AS number_of_paragraphs FROM documents d LEFT JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name;
SELECT d.document_id, d.document_name, COUNT(p.paragraph_id) AS paragraph_count FROM documents d LEFT JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name;
SELECT document_id  FROM paragraphs  GROUP BY document_id  HAVING COUNT(paragraph_id) >= 2;
SELECT document_id  FROM paragraphs  GROUP BY document_id  HAVING COUNT(paragraph_id) >= 2;
SELECT d.document_id, d.document_name FROM documents d JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name ORDER BY COUNT(p.paragraph_id) DESC LIMIT 1;
SELECT d.document_id, d.document_name FROM documents d JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name ORDER BY COUNT(p.paragraph_id) DESC LIMIT 1;
SELECT document_id  FROM documents  WHERE document_id IN (     SELECT document_id      FROM paragraphs      GROUP BY document_id      ORDER BY COUNT(paragraph_id) ASC      LIMIT 1 );
SELECT document_id  FROM documents  WHERE document_id IN (     SELECT document_id      FROM paragraphs      GROUP BY document_id      ORDER BY COUNT(paragraph_id) ASC      LIMIT 1 );
SELECT d.document_id  FROM documents d  JOIN paragraphs p ON d.document_id = p.document_id  GROUP BY d.document_id  HAVING COUNT(p.paragraph_id) BETWEEN 1 AND 2;
SELECT document_id  FROM paragraphs  GROUP BY document_id  HAVING COUNT(paragraph_id) BETWEEN 1 AND 2;
SELECT d.document_id  FROM documents d  JOIN paragraphs p ON d.document_id = p.document_id  WHERE p.paragraph_text IN ('Brazil', 'Ireland')  GROUP BY d.document_id  HAVING COUNT(DISTINCT p.paragraph_text) = 2;
SELECT d.document_id  FROM documents d  JOIN paragraphs p ON d.document_id = p.document_id  WHERE p.paragraph_text IN ('Brazil', 'Ireland')  GROUP BY d.document_id  HAVING COUNT(DISTINCT p.paragraph_text) = 2;
SELECT COUNT(*) FROM teacher;
SELECT COUNT(*) FROM teacher;
SELECT name FROM teacher ORDER BY age ASC;
SELECT name FROM teacher ORDER BY age ASC;
SELECT age, hometown FROM teacher;
SELECT age, hometown FROM teacher;
SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District';
SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District';
SELECT name FROM teacher WHERE age IN ('32', '33');
SELECT name FROM teacher WHERE age IN ('32', '33');
SELECT hometown  FROM teacher  WHERE age = (SELECT MIN(age) FROM teacher);
SELECT hometown  FROM teacher  WHERE age = (SELECT MIN(age) FROM teacher);
SELECT hometown, COUNT(*) AS number_of_teachers FROM teacher GROUP BY hometown;
SELECT hometown, COUNT(*) AS teacher_count FROM teacher GROUP BY hometown;
SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT hometown, COUNT(*) as hometown_count FROM teacher GROUP BY hometown ORDER BY hometown_count DESC LIMIT 1;
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(teacher_id) >= 2;
SELECT hometown  FROM teacher  GROUP BY hometown  HAVING COUNT(teacher_id) >= 2;
SELECT t.name, c.course  FROM teacher t  JOIN course_arrange ca ON t.teacher_id = ca.teacher_id  JOIN course c ON ca.course_id = c.course_id;
SELECT teacher.name, course.course  FROM teacher  JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id  JOIN course ON course_arrange.course_id = course.course_id;
SELECT t.name, c.course  FROM teacher t  JOIN course_arrange ca ON t.teacher_id = ca.teacher_id  JOIN course c ON ca.course_id = c.course_id  ORDER BY t.name ASC;
SELECT t.name, c.course  FROM teacher t  JOIN course_arrange ca ON t.teacher_id = ca.teacher_id  JOIN course c ON ca.course_id = c.course_id  ORDER BY t.name ASC;
SELECT t.name  FROM teacher t  JOIN course_arrange ca ON t.teacher_id = ca.teacher_id  JOIN course c ON ca.course_id = c.course_id  WHERE c.course = 'math';
SELECT DISTINCT t.name  FROM teacher t  JOIN course_arrange ca ON t.teacher_id = ca.teacher_id  JOIN course c ON ca.course_id = c.course_id  WHERE c.course LIKE '%math%';
SELECT t.name, COUNT(ca.course_id) AS number_of_courses FROM teacher t LEFT JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.name;
SELECT t.name, COUNT(ca.course_id) AS course_count FROM teacher t LEFT JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.name;
SELECT t.name  FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.teacher_id, t.name HAVING COUNT(ca.course_id) >= 2;
SELECT t.name  FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.teacher_id, t.name HAVING COUNT(ca.course_id) >= 2;
SELECT name  FROM teacher  WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange);
SELECT t.name  FROM teacher t  LEFT JOIN course_arrange ca ON t.teacher_id = ca.teacher_id  WHERE ca.course_id IS NULL;
SELECT COUNT(*) FROM visitor WHERE age < 30;
SELECT name  FROM visitor  WHERE level_of_membership > 4  ORDER BY level_of_membership DESC;
SELECT AVG(age)  FROM visitor  WHERE level_of_membership <= 4;
SELECT name, level_of_membership  FROM visitor  WHERE level_of_membership > 4  ORDER BY age DESC;
SELECT museum_id, name  FROM museum  WHERE num_of_staff = (SELECT MAX(num_of_staff) FROM museum);
SELECT AVG(num_of_staff)  FROM museum  WHERE open_year < '2009';
SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum';
SELECT name  FROM museum  WHERE num_of_staff > (SELECT MIN(num_of_staff)                         FROM museum                         WHERE open_year > '2010');
SELECT v.id, v.name, v.age FROM visitor v JOIN visit vi ON v.id = vi.visitor_id GROUP BY v.id, v.name, v.age HAVING COUNT(vi.museum_id) > 1;
SELECT v.id, v.name, v.level_of_membership FROM visitor v JOIN visit vi ON v.id = vi.visitor_id GROUP BY v.id, v.name, v.level_of_membership ORDER BY SUM(vi.total_spent) DESC LIMIT 1;
SELECT m.museum_id, m.name FROM museum m JOIN visit v ON m.museum_id = v.museum_id GROUP BY m.museum_id, m.name ORDER BY COUNT(v.visitor_id) DESC LIMIT 1;
SELECT name  FROM museum  WHERE museum_id NOT IN (SELECT DISTINCT museum_id FROM visit);
SELECT v.name, v.age FROM visitor v JOIN visit vi ON v.id = vi.visitor_id ORDER BY vi.num_of_ticket DESC LIMIT 1;
SELECT AVG(num_of_ticket) AS average_tickets, MAX(num_of_ticket) AS max_tickets FROM visit;
SELECT SUM(v.total_spent)  FROM visit v  JOIN visitor vi ON v.visitor_id = vi.id  WHERE vi.level_of_membership = 1;
SELECT v.name FROM visitor v JOIN visit vi ON v.id = vi.visitor_id JOIN museum m ON vi.museum_id = m.museum_id WHERE m.open_year < '2009' OR m.open_year > '2011' GROUP BY v.id, v.name HAVING COUNT(DISTINCT CASE WHEN m.open_year < '2009' THEN m.museum_id END) > 0    AND COUNT(DISTINCT CASE WHEN m.open_year > '2011' THEN m.museum_id END) > 0;
SELECT COUNT(DISTINCT v.id)  FROM visitor v  WHERE v.id NOT IN (     SELECT DISTINCT vi.visitor_id      FROM visit vi      JOIN museum m ON vi.museum_id = m.museum_id      WHERE m.open_year > '2010' );
SELECT COUNT(*)  FROM museum  WHERE open_year > '2013' OR open_year < '2008';
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT first_name, birth_date  FROM players  WHERE country_code = 'USA';
SELECT first_name, birth_date  FROM players  WHERE country_code = 'USA';
```sql SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches; ```
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;
SELECT AVG(winner_rank) AS average_rank FROM matches;
SELECT AVG(winner_rank)  FROM matches;
SELECT MAX(loser_rank) AS highest_rank_of_losers FROM matches;
SELECT MIN(loser_rank) AS best_rank_of_losers FROM matches;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT tourney_name  FROM matches  GROUP BY tourney_name  HAVING COUNT(match_num) > 10;
SELECT tourney_name  FROM matches  GROUP BY tourney_name  HAVING COUNT(*) > 10;
```sql SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013 JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016; ```
SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013 JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016;
SELECT COUNT(*)  FROM matches  WHERE year IN (2013, 2016);
SELECT COUNT(*)  FROM matches  WHERE year IN (2013, 2016);
```sql SELECT DISTINCT p.country_code, p.first_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open'; ```
```sql SELECT DISTINCT p.first_name, p.country_code FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY p.player_id HAVING COUNT(DISTINCT m.tourney_name) = 2; ```
SELECT first_name, country_code  FROM players  ORDER BY birth_date  LIMIT 1;
SELECT first_name, country_code  FROM players  ORDER BY birth_date  LIMIT 1;
SELECT first_name, last_name  FROM players  ORDER BY birth_date;
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date;
SELECT first_name, last_name  FROM players  WHERE hand = 'L'  ORDER BY birth_date;
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players WHERE hand = 'left' ORDER BY birth_date;
```sql SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id ORDER BY r.tours DESC LIMIT 1; ```
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.tours = (SELECT MAX(tours) FROM rankings) LIMIT 1;
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1;
SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_name, winner_rank_points ORDER BY COUNT(*) DESC LIMIT 1;
```sql SELECT CONCAT(p.first_name, ' ', p.last_name) AS winner_name,         m.winner_rank_points FROM matches m JOIN players p ON m.winner_id = p.player_id GROUP BY m.winner_id, p.first_name, p.last_name, m.winner_rank_points ORDER BY COUNT(m.match_num) DESC LIMIT 1; ```
SELECT winner_name  FROM matches  WHERE tourney_name = 'Australian Open'  ORDER BY winner_rank_points DESC  LIMIT 1;
SELECT winner_name  FROM matches  WHERE tourney_name = 'Australian Open'  ORDER BY winner_rank_points DESC  LIMIT 1;
SELECT winner_name, loser_name  FROM matches  WHERE minutes = (SELECT MAX(minutes) FROM matches);
SELECT winner_name, loser_name  FROM matches  ORDER BY minutes DESC  LIMIT 1;
SELECT AVG(ranking) AS average_ranking, p.first_name FROM rankings r JOIN players p ON r.player_id = p.player_id GROUP BY p.first_name;
```sql SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name; ```
SELECT SUM(r.ranking_points) AS total_ranking_points, p.first_name FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT COUNT(player_id) AS player_count, country_code  FROM players  GROUP BY country_code;
SELECT COUNT(*) AS player_count, country_code  FROM players  GROUP BY country_code;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;
SELECT country_code  FROM players  GROUP BY country_code  HAVING COUNT(player_id) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT COUNT(*) AS number_of_matches, year FROM matches GROUP BY year;
SELECT COUNT(*) AS match_count, year FROM matches GROUP BY year;
```sql SELECT p.first_name || ' ' || p.last_name AS name, m.winner_rank FROM matches m JOIN players p ON m.winner_id = p.player_id ORDER BY p.birth_date DESC LIMIT 3; ```
```sql SELECT winner_name, winner_rank FROM matches ORDER BY winner_age DESC LIMIT 3; ```
```sql SELECT COUNT(DISTINCT winner_id)  FROM matches  WHERE winner_id IN (SELECT player_id FROM players WHERE hand = 'left')  AND tourney_name = 'WTA Championships'; ```
SELECT COUNT(DISTINCT m.winner_id) AS left_handed_winners FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE p.hand = 'left' AND m.tourney_name = 'WTA Championships';
```sql SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id ORDER BY m.winner_rank_points DESC LIMIT 1; ```
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN (     SELECT winner_id, SUM(winner_rank_points) AS total_rank_points     FROM matches     GROUP BY winner_id     ORDER BY total_rank_points DESC     LIMIT 1 ) AS top_winner ON p.player_id = top_winner.winner_id;
SELECT hand, COUNT(player_id) AS player_count FROM players GROUP BY hand;
SELECT hand, COUNT(player_id) AS player_count FROM players GROUP BY hand;
SELECT COUNT(*)  FROM ship  WHERE disposition_of_ship = 'Captured';
SELECT name, tonnage  FROM ship  ORDER BY name DESC;
SELECT name, date, result FROM battle;
SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death;
SELECT AVG(injured) FROM death;
SELECT SUM(d.killed) AS total_killed, SUM(d.injured) AS total_injured FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't';
SELECT name, result  FROM battle  WHERE bulgarian_commander <> 'Boril';
SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig';
SELECT b.id, b.name  FROM battle b  JOIN death d ON b.id = d.id  GROUP BY b.id, b.name  HAVING SUM(d.killed) > 10;
```sql SELECT d.caused_by_ship_id, s.name FROM death d JOIN ship s ON d.caused_by_ship_id = s.id GROUP BY d.caused_by_ship_id, s.name ORDER BY SUM(d.injured) DESC LIMIT 1; ```
SELECT DISTINCT name  FROM battle  WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(DISTINCT b.id)  FROM battle b  LEFT JOIN ship s ON b.id = s.lost_in_battle  WHERE s.tonnage != '225' OR s.lost_in_battle IS NULL;
SELECT b.name, b.date FROM battle b JOIN ship s1 ON b.id = s1.lost_in_battle AND s1.name = 'Lettice' JOIN ship s2 ON b.id = s2.lost_in_battle AND s2.name = 'HMS Atalanta';
```sql SELECT b.name, b.result, b.bulgarian_commander FROM battle b LEFT JOIN ship s ON b.id = s.id WHERE s.lost_in_battle IS NULL AND s.location = 'English Channel'; ```
SELECT note FROM death WHERE note LIKE '%East%';
SELECT line_1, line_2 FROM addresses;
SELECT line_1, line_2 FROM addresses;
SELECT COUNT(*) AS total_courses FROM courses;
SELECT COUNT(*) AS total_courses FROM courses;
SELECT course_description  FROM courses  WHERE course_name = 'Math';
SELECT course_description  FROM courses  WHERE course_name LIKE '%math%';
SELECT zip_postcode  FROM addresses  WHERE city = 'Port Chelsea';
SELECT zip_postcode  FROM addresses  WHERE city = 'Port Chelsea';
SELECT d.department_id, d.department_name, COUNT(dp.degree_program_id) AS degree_count FROM departments d JOIN degree_programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name ORDER BY degree_count DESC LIMIT 1;
SELECT d.department_id, d.department_name FROM departments d JOIN degree_programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT department_id) AS department_count FROM degree_programs;
SELECT COUNT(DISTINCT department_id) AS different_departments FROM degree_programs;
SELECT COUNT(DISTINCT degree_summary_name) AS different_degree_names FROM degree_programs;
SELECT COUNT(DISTINCT degree_summary_name) AS different_degrees FROM degree_programs;
SELECT COUNT(*) AS degree_count FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering');
SELECT COUNT(*)  FROM degree_programs  WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering');
SELECT section_name, section_description FROM sections;
SELECT section_name, section_description FROM sections;
```sql SELECT c.course_id, c.course_name FROM courses c JOIN sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.section_id) <= 2; ```
SELECT c.course_id, c.course_name FROM courses c LEFT JOIN sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.section_id) < 2;
SELECT section_name FROM sections ORDER BY section_name DESC;
SELECT section_name FROM sections ORDER BY section_name DESC;
SELECT s.semester_id, s.semester_name FROM semesters s JOIN student_enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id, s.semester_name ORDER BY COUNT(se.student_enrolment_id) DESC LIMIT 1;
SELECT s.semester_id, s.semester_name, COUNT(se.student_id) AS student_count FROM semesters s JOIN student_enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id, s.semester_name HAVING COUNT(se.student_id) = (     SELECT MAX(student_count)     FROM (         SELECT COUNT(se2.student_id) AS student_count         FROM semesters s2         JOIN student_enrolment se2 ON s2.semester_id = se2.semester_id         GROUP BY s2.semester_id     ) AS counts     WHERE counts.semester_id = s.semester_id );
SELECT department_description  FROM departments  WHERE department_name LIKE '%the computer%';
SELECT department_description  FROM departments  WHERE department_name LIKE '%computer%';
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT se.degree_program_id) = 2;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT se.degree_program_id) = 2;
SELECT s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelor%';
SELECT s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelors%';
SELECT dp.degree_summary_name, COUNT(se.student_enrolment_id) AS student_count FROM student_enrolment se JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY dp.degree_summary_name ORDER BY student_count DESC LIMIT 1;
SELECT dp.degree_summary_name, COUNT(se.student_enrolment_id) AS student_count FROM degree_programs dp JOIN student_enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY student_count DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_name FROM degree_programs dp JOIN student_enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_enrolment_id) DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_description FROM degree_programs dp JOIN student_enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_description ORDER BY COUNT(se.student_enrolment_id) DESC LIMIT 1;
SELECT      s.student_id,      s.first_name,      s.middle_name,      s.last_name,      COUNT(se.student_enrolment_id) AS number_of_enrollments FROM      students s JOIN      student_enrolment se ON s.student_id = se.student_id GROUP BY      s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY      number_of_enrollments DESC LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(se.student_enrolment_id) AS number_of_enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY number_of_enrollments DESC LIMIT 1;
SELECT semester_name  FROM semesters  WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM student_enrolment);
SELECT semester_name  FROM semesters  WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM student_enrolment);
SELECT DISTINCT c.course_name FROM courses c JOIN student_enrolment_courses sec ON c.course_id = sec.course_id;
SELECT DISTINCT c.course_name FROM courses c JOIN student_enrolment_courses sec ON c.course_id = sec.course_id;
SELECT c.course_name FROM courses c JOIN student_enrolment_courses sec ON c.course_id = sec.course_id GROUP BY c.course_id, c.course_name ORDER BY COUNT(sec.student_course_id) DESC LIMIT 1;
SELECT c.course_name FROM courses c JOIN student_enrolment_courses sec ON c.course_id = sec.course_id GROUP BY c.course_id, c.course_name ORDER BY COUNT(sec.student_course_id) DESC LIMIT 1;
SELECT s.last_name  FROM students s  JOIN addresses a ON s.current_address_id = a.address_id  LEFT JOIN student_enrolment se ON s.student_id = se.student_id  WHERE a.state_province_county = 'North Carolina'  AND se.degree_program_id IS NULL;
SELECT DISTINCT s.last_name FROM students s JOIN addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.student_id NOT IN (SELECT se.student_id FROM student_enrolment se);
SELECT t.transcript_date, t.transcript_id FROM transcripts t JOIN transcript_contents tc ON t.transcript_id = tc.student_course_id GROUP BY t.transcript_date, t.transcript_id HAVING COUNT(tc.student_course_id) >= 2;
SELECT t.transcript_date, t.transcript_id FROM transcripts t JOIN transcript_contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2;
SELECT cell_mobile_number  FROM students  WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number  FROM students  WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT first_name, middle_name, last_name  FROM students  ORDER BY date_first_registered  LIMIT 1;
SELECT first_name, middle_name, last_name  FROM students  ORDER BY date_first_registered  LIMIT 1;
SELECT first_name, middle_name, last_name FROM students WHERE date_first_registered = (     SELECT MIN(date_first_registered)     FROM students );
SELECT first_name, middle_name, last_name  FROM students  WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM students);
SELECT first_name  FROM students  WHERE current_address_id <> permanent_address_id;
SELECT s.first_name  FROM students s  WHERE s.permanent_address_id <> s.current_address_id;
SELECT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details FROM addresses a JOIN students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details ORDER BY COUNT(s.student_id) DESC LIMIT 1;
SELECT a.address_id, a.line_1, a.line_2 FROM addresses a JOIN students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2 ORDER BY COUNT(s.student_id) DESC LIMIT 1;
SELECT AVG(transcript_date) AS average_transcript_printed_date FROM transcripts;
SELECT AVG(transcript_date) AS average_transcript_date FROM transcripts;
SELECT transcript_date, other_details  FROM transcripts  ORDER BY transcript_date  LIMIT 1;
SELECT MIN(transcript_date) AS earliest_transcript_date,         transcripts.transcript_id,         transcripts.other_details  FROM transcripts  GROUP BY transcripts.transcript_id  ORDER BY earliest_transcript_date ASC  LIMIT 1;
SELECT COUNT(*) AS total_transcripts FROM transcripts;
SELECT COUNT(*) AS total_transcripts FROM transcripts;
SELECT MAX(transcript_date) AS last_transcript_release_date FROM transcripts;
SELECT MAX(transcript_date) AS last_transcript_date FROM transcripts;
SELECT sec.student_course_id, COUNT(DISTINCT t.transcript_id) AS enrollment_count FROM student_enrolment_courses sec JOIN student_enrolment se ON sec.student_enrolment_id = se.student_enrolment_id JOIN transcripts t ON se.student_enrolment_id = t.transcript_id GROUP BY sec.student_course_id ORDER BY enrollment_count DESC LIMIT 1;
SELECT sec.course_id, COUNT(DISTINCT te.transcript_id) AS course_count FROM student_enrolment_courses sec JOIN student_enrolment se ON sec.student_enrolment_id = se.student_enrolment_id JOIN transcripts te ON se.student_id = te.transcript_id GROUP BY sec.course_id ORDER BY course_count DESC LIMIT 1;
SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN (     SELECT transcript_id     FROM transcript_contents     GROUP BY transcript_id     ORDER BY COUNT(*) ASC     LIMIT 1 );
SELECT t.transcript_date, t.transcript_id FROM transcripts t JOIN transcript_contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date ORDER BY COUNT(tc.student_course_id) ASC LIMIT 1;
SELECT s.semester_name FROM semesters s JOIN student_enrolment se ON s.semester_id = se.semester_id JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name IN ('Master', 'Bachelor') GROUP BY s.semester_name HAVING COUNT(DISTINCT dp.degree_summary_name) = 2;
SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (     SELECT degree_program_id     FROM degree_programs     WHERE degree_summary_name IN ('Masters', 'Bachelors') ) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2;
SELECT COUNT(DISTINCT current_address_id) AS different_addresses FROM students;
SELECT DISTINCT a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country FROM addresses a JOIN students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id;
SELECT * FROM students ORDER BY last_name DESC, first_name DESC, middle_name DESC;
SELECT * FROM students ORDER BY last_name DESC, first_name DESC;
SELECT * FROM sections WHERE section_id = 'h';
SELECT section_description  FROM sections  WHERE section_name = 'h';
SELECT first_name  FROM students  WHERE permanent_address_id IN (     SELECT address_id      FROM addresses      WHERE country = 'Haiti' ) OR cell_mobile_number = '09700166582';
SELECT first_name  FROM students  WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti')     OR cell_mobile_number = '09700166582';
SELECT title FROM cartoon ORDER BY title;
SELECT title FROM cartoon ORDER BY title;
SELECT title FROM cartoon WHERE directed_by = 'Ben Jones';
SELECT title FROM cartoon WHERE directed_by = 'Ben Jones';
SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr';
SELECT c.title, c.directed_by  FROM cartoon c  JOIN tv_series ts ON c.original_air_date = ts.air_date  ORDER BY ts.air_date;
SELECT c.title, c.directed_by  FROM cartoon c  ORDER BY c.original_air_date;
SELECT title FROM cartoon WHERE directed_by IN ('Ben Jones', 'Brandon Vietti');
SELECT title FROM cartoon WHERE directed_by IN ('Ben Jones', 'Brandon Vietti');
SELECT country, COUNT(*) AS number_of_tv_channels FROM tv_channel GROUP BY country ORDER BY number_of_tv_channels DESC LIMIT 1;
SELECT country, COUNT(*) AS channel_count FROM tv_channel GROUP BY country ORDER BY channel_count DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name) AS different_series_names, COUNT(DISTINCT content) AS different_contents FROM tv_channel;
SELECT COUNT(DISTINCT series_name) AS series_count, COUNT(DISTINCT content) AS content_count FROM tv_channel;
SELECT content FROM tv_channel WHERE series_name = 'Sky Radio';
SELECT content FROM tv_channel WHERE series_name = 'Sky Radio';
SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio';
SELECT package_option  FROM tv_channel  WHERE series_name = 'Sky Radio';
SELECT COUNT(*) FROM tv_channel WHERE language = 'English';
SELECT COUNT(DISTINCT id) FROM tv_channel WHERE language = 'English';
SELECT language, COUNT(DISTINCT id) AS channel_count FROM tv_channel GROUP BY language ORDER BY channel_count ASC LIMIT 1;
SELECT language, COUNT(DISTINCT id) AS channel_count FROM tv_channel GROUP BY language ORDER BY channel_count ASC LIMIT 1;
SELECT language, COUNT(*) AS channel_count FROM tv_channel GROUP BY language;
SELECT language, COUNT(*) AS channel_count FROM tv_channel GROUP BY language;
SELECT tv_channel.series_name  FROM tv_channel  JOIN cartoon ON tv_channel.id = cartoon.channel  WHERE cartoon.title = 'The Rise of the Blue Beetle!';
SELECT tv_channel.series_name  FROM tv_channel  JOIN cartoon ON tv_channel.id = cartoon.channel  WHERE cartoon.title = 'The Rise of the Blue Beetle';
SELECT c.title  FROM cartoon c  JOIN tv_channel tc ON c.channel = tc.id  WHERE tc.series_name = 'Sky Radio';
SELECT c.title  FROM cartoon c  JOIN tv_channel tc ON c.channel = tc.id  WHERE tc.series_name = 'Sky Radio';
SELECT episode  FROM tv_series  ORDER BY rating;
SELECT episode, rating  FROM tv_series  ORDER BY rating DESC;
```sql SELECT ts.episode, ts.rating FROM tv_series ts JOIN tv_channel tc ON ts.channel = tc.id ORDER BY ts.rating DESC LIMIT 3; ```
SELECT episode, rating  FROM tv_series  ORDER BY rating DESC  LIMIT 3;
SELECT MIN(share), MAX(share) FROM tv_series;
SELECT MAX(share) AS max_share, MIN(share) AS min_share  FROM tv_series;
SELECT air_date  FROM tv_series  WHERE episode = 'A Love of a Lifetime';
SELECT air_date  FROM tv_series  WHERE episode = 'A Love of a Lifetime';
SELECT weekly_rank  FROM tv_series  WHERE episode = 'A Love of a Lifetime';
SELECT weekly_rank  FROM tv_series  WHERE episode = 'A Love of a Lifetime';
SELECT tv_channel.series_name  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE tv_series.episode = 'A Love of a Lifetime';
SELECT tv_channel.series_name  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE tv_series.episode = 'A Love of a Lifetime';
SELECT ts.episode  FROM tv_series ts  JOIN tv_channel tc ON ts.channel = tc.id  WHERE tc.series_name = 'Sky Radio';
SELECT ts.episode  FROM tv_series ts  JOIN tv_channel tc ON ts.channel = tc.id  WHERE tc.series_name = 'Sky Radio';
SELECT COUNT(*) AS number_of_cartoons, directed_by  FROM cartoon  GROUP BY directed_by;
SELECT COUNT(*) AS cartoon_count, directed_by  FROM cartoon  GROUP BY directed_by;
SELECT production_code, channel  FROM cartoon  WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon);
SELECT production_code, channel  FROM cartoon  ORDER BY original_air_date DESC  LIMIT 1;
SELECT package_option, series_name  FROM tv_channel  WHERE hight_definition_tv = 'Yes';
SELECT package_option, series_name  FROM tv_channel  WHERE hight_definition_tv = 'Yes';
SELECT DISTINCT tv_channel.country FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.written_by LIKE '%Todd Casey%';
SELECT DISTINCT tv_channel.country  FROM tv_channel  JOIN cartoon ON tv_channel.id = cartoon.channel  WHERE cartoon.written_by = 'Todd Casey';
SELECT DISTINCT country  FROM tv_channel  WHERE id NOT IN (     SELECT DISTINCT channel      FROM cartoon      WHERE written_by = 'Todd Casey' );
SELECT DISTINCT country  FROM tv_channel  WHERE country NOT IN (     SELECT DISTINCT country      FROM tv_channel      JOIN cartoon ON tv_channel.series_name = cartoon.title      WHERE cartoon.written_by = 'Todd Casey' );
SELECT DISTINCT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang');
SELECT DISTINCT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang');
SELECT pixel_aspect_ratio_par, country  FROM tv_channel  WHERE language != 'English';
SELECT pixel_aspect_ratio_par, country  FROM tv_channel  WHERE language <> 'English';
SELECT id  FROM tv_channel  WHERE country IN (     SELECT country      FROM tv_channel      GROUP BY country      HAVING COUNT(*) > 2 );
SELECT channel FROM tv_series GROUP BY channel HAVING COUNT(DISTINCT id) > 2;
SELECT DISTINCT tv_channel.id  FROM tv_channel  WHERE tv_channel.id NOT IN (     SELECT DISTINCT cartoon.channel      FROM cartoon      WHERE cartoon.directed_by = 'Ben Jones' );
SELECT DISTINCT tc.id  FROM tv_channel tc  WHERE tc.id NOT IN (     SELECT DISTINCT c.channel      FROM cartoon c      WHERE c.directed_by = 'Ben Jones' );
SELECT DISTINCT tv_channel.package_option  FROM tv_channel  WHERE tv_channel.id NOT IN (     SELECT DISTINCT cartoon.channel      FROM cartoon      WHERE cartoon.directed_by = 'Ben Jones' );
SELECT DISTINCT tv_channel.package_option  FROM tv_channel  WHERE tv_channel.id NOT IN (     SELECT DISTINCT cartoon.channel      FROM cartoon      WHERE cartoon.directed_by = 'Ben Jones' );
SELECT COUNT(*) FROM poker_player;
SELECT COUNT(*) FROM poker_player;
SELECT earnings FROM poker_player ORDER BY earnings DESC;
SELECT earnings FROM poker_player ORDER BY earnings DESC;
SELECT final_table_made, best_finish  FROM poker_player;
SELECT final_table_made, best_finish  FROM poker_player;
SELECT AVG(earnings) FROM poker_player;
SELECT AVG(earnings) FROM poker_player;
SELECT money_rank  FROM poker_player  WHERE earnings = (SELECT MAX(earnings) FROM poker_player);
SELECT money_rank  FROM poker_player  WHERE earnings = (SELECT MAX(earnings) FROM poker_player);
SELECT MAX(final_table_made)  FROM poker_player  WHERE earnings < 200000;
SELECT MAX(final_table_made)  FROM poker_player  WHERE earnings < 200000;
SELECT name FROM people;
SELECT p.name  FROM people p  JOIN poker_player pp ON p.people_id = pp.people_id;
SELECT p.name  FROM poker_player pp  JOIN people p ON pp.people_id = p.people_id  WHERE pp.earnings > 300000;
SELECT p.name  FROM poker_player pp  JOIN people p ON pp.people_id = p.people_id  WHERE pp.earnings > 300000;
SELECT p.name  FROM poker_player pp  JOIN people p ON pp.people_id = p.people_id  ORDER BY pp.final_table_made ASC;
SELECT p.name  FROM people p  JOIN poker_player pp ON p.people_id = pp.people_id  GROUP BY p.name  ORDER BY COUNT(pp.final_table_made) ASC;
SELECT p.birth_date  FROM poker_player pp  JOIN people p ON pp.people_id = p.people_id  ORDER BY pp.earnings ASC  LIMIT 1;
SELECT p.birth_date  FROM poker_player pp  JOIN people p ON pp.people_id = p.people_id  ORDER BY pp.earnings ASC  LIMIT 1;
SELECT money_rank  FROM poker_player  WHERE poker_player_id = (     SELECT poker_player_id      FROM people      ORDER BY height DESC      LIMIT 1 );
SELECT money_rank  FROM poker_player  WHERE people_id = (     SELECT people_id      FROM people      ORDER BY height DESC      LIMIT 1 );
SELECT AVG(pp.earnings)  FROM poker_player pp  JOIN people p ON pp.people_id = p.people_id  WHERE p.height > 200;
SELECT AVG(pp.earnings)  FROM poker_player pp  JOIN people p ON pp.people_id = p.people_id  WHERE p.height > 200;
SELECT p.name  FROM poker_player pp  JOIN people p ON pp.people_id = p.people_id  ORDER BY pp.earnings DESC;
SELECT p.name  FROM poker_player pp  JOIN people p ON pp.people_id = p.people_id  ORDER BY pp.earnings DESC;
SELECT nationality, COUNT(*) AS number_of_people FROM people GROUP BY nationality;
SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality;
SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT nationality FROM people WHERE people_id IN (     SELECT people_id     FROM poker_player ) GROUP BY nationality HAVING COUNT(*) >= 2;
SELECT nationality  FROM people  WHERE people_id IN (SELECT people_id                      FROM poker_player                      GROUP BY people_id                      HAVING COUNT(*) >= 2)  GROUP BY nationality;
SELECT name, birth_date FROM people ORDER BY name ASC;
SELECT name, birth_date FROM people ORDER BY name;
SELECT name FROM people WHERE nationality <> 'Russia';
SELECT name FROM people WHERE nationality <> 'Russia';
SELECT name  FROM people  WHERE people_id NOT IN (SELECT people_id FROM poker_player);
SELECT name  FROM people  WHERE people_id NOT IN (SELECT people_id FROM poker_player);
SELECT COUNT(DISTINCT nationality) FROM people;
SELECT COUNT(DISTINCT nationality) FROM people;
SELECT COUNT(DISTINCT state) FROM area_code_state;
SELECT contestant_number, contestant_name  FROM contestants  ORDER BY contestant_name DESC;
SELECT vote_id, phone_number, state FROM votes;
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code  FROM area_code_state;
SELECT MAX(created)  FROM votes  WHERE state = 'CA';
SELECT contestant_name FROM contestants WHERE contestant_name <> 'Jessie Alloway';
SELECT DISTINCT state, created_time FROM votes;
SELECT c.contestant_number, c.contestant_name FROM contestants c JOIN votes v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name HAVING COUNT(v.vote_id) >= 2;
SELECT c.contestant_number, c.contestant_name FROM contestants c JOIN votes v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name ORDER BY COUNT(v.vote_id) ASC LIMIT 1;
SELECT COUNT(*)  FROM votes  WHERE state IN ('NY', 'CA');
SELECT COUNT(DISTINCT c.contestant_number) AS unvoted_contestants FROM contestants c LEFT JOIN votes v ON c.contestant_number = v.contestant_number WHERE v.contestant_number IS NULL;
SELECT area_code FROM area_code_state JOIN votes ON area_code_state.state = votes.state GROUP BY area_code ORDER BY COUNT(vote_id) DESC LIMIT 1;
SELECT v.created, v.state, v.phone_number  FROM votes v  JOIN contestants c ON v.contestant_number = c.contestant_number  WHERE c.contestant_name = 'Tabatha Gehling';
```sql SELECT DISTINCT a.area_code_number FROM area_code_state a JOIN votes v1 ON a.state = v1.state JOIN contestants c1 ON v1.contestant_number = c1.contestant_number JOIN votes v2 ON v1.phone_number = v2.phone_number AND v1.state = v2.state JOIN contestants c2 ON v2.contestant_number = c2.contestant_number WHERE c1.contestant_name = 'Tabatha Gehling' AND c2.contestant_name = 'Kelly Clauss'; ```
SELECT contestant_name  FROM contestants  WHERE contestant_name LIKE '%Al%';
SELECT name FROM country WHERE indepyear > 1950;
SELECT name FROM country WHERE indepyear > 1950;
SELECT COUNT(*) FROM country WHERE governmentform LIKE '%Republic%';
SELECT COUNT(*) FROM country WHERE governmentform LIKE '%Republic%';
SELECT SUM(surfacearea)  FROM country  WHERE region = 'Caribbean';
SELECT SUM(surfacearea)  FROM country  WHERE region = 'Caribbean';
SELECT continent FROM country WHERE name = 'Anguilla';
SELECT continent FROM country WHERE name = 'Anguilla';
SELECT c.region  FROM country c  JOIN city ci ON c.code = ci.countrycode  WHERE ci.name = 'Kabul';
SELECT c.region  FROM city ci  JOIN country c ON ci.countrycode = c.code  WHERE ci.name = 'Kabul';
SELECT cl.language FROM city c JOIN country co ON c.countrycode = co.code JOIN countrylanguage cl ON co.code = cl.countrycode WHERE c.name = 'Oranjestad' OR c.name = 'San Nicolas' GROUP BY cl.language ORDER BY SUM(cl.percentage) DESC LIMIT 1;
SELECT language  FROM countrylanguage  WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba')  ORDER BY percentage DESC  LIMIT 1;
SELECT population, lifeexpectancy  FROM country  WHERE name = 'Brazil';
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';
SELECT region, population FROM country WHERE name = 'Angola';
SELECT population, region FROM country WHERE name = 'Angola';
SELECT AVG(lifeexpectancy)  FROM country  WHERE region = 'Central Africa';
SELECT AVG(lifeexpectancy)  FROM country  WHERE region = 'Central Africa';
SELECT name  FROM country  WHERE region = 'Asia'  ORDER BY lifeexpectancy  LIMIT 1;
SELECT name  FROM country  WHERE continent = 'Asia'  ORDER BY lifeexpectancy  LIMIT 1;
SELECT SUM(c.population) AS total_population, MAX(c.gnp) AS max_gnp FROM country c WHERE c.continent = 'Asia';
SELECT SUM(c.population) AS total_population, MAX(c.gnp) AS largest_gnp FROM country c WHERE c.continent = 'Asia';
SELECT AVG(lifeexpectancy)  FROM country  WHERE continent = 'Africa' AND governmentform LIKE '%Republic%';
SELECT AVG(lifeexpectancy)  FROM country  WHERE continent = 'Africa' AND governmentform LIKE '%Republic%';
SELECT SUM(surfacearea) AS total_surface_area FROM country WHERE continent IN ('Asia', 'Europe');
SELECT SUM(surfacearea)  FROM country  WHERE continent IN ('Asia', 'Europe');
SELECT SUM(population) FROM city WHERE district = 'Gelderland';
SELECT SUM(population) FROM city WHERE district = 'Gelderland';
SELECT AVG(gnp) AS average_gnp, SUM(population) AS total_population FROM country WHERE governmentform LIKE '%US territory%';
SELECT AVG(gnp) AS mean_gnp, SUM(population) AS total_population FROM country WHERE region = 'Americas' AND name IN ('Puerto Rico', 'Guam', 'American Samoa', 'U.S. Virgin Islands', 'Northern Mariana Islands');
SELECT COUNT(DISTINCT language) FROM countrylanguage;
SELECT COUNT(DISTINCT language) FROM countrylanguage;
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';
SELECT COUNT(DISTINCT cl.language)  FROM countrylanguage cl  JOIN country c ON cl.countrycode = c.code  WHERE c.name = 'Aruba';
SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba');
SELECT COUNT(*)  FROM countrylanguage  WHERE countrycode = 'AFG' AND isofficial = 'T';
SELECT COUNT(*)  FROM countrylanguage  WHERE countrycode = 'AF' AND isofficial = 'T';
SELECT c.name  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode  GROUP BY c.name  ORDER BY COUNT(cl.language) DESC  LIMIT 1;
SELECT c.name FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.name ORDER BY COUNT(cl.language) DESC LIMIT 1;
SELECT c.continent FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code GROUP BY c.continent ORDER BY COUNT(DISTINCT cl.language) DESC LIMIT 1;
SELECT continent FROM country WHERE code IN (     SELECT countrycode     FROM countrylanguage     GROUP BY countrycode     HAVING COUNT(language) = (         SELECT MAX(lang_count)         FROM (             SELECT COUNT(language) AS lang_count             FROM countrylanguage             GROUP BY countrycode         ) AS lang_counts     ) );
SELECT COUNT(DISTINCT cl1.countrycode)  FROM countrylanguage cl1  JOIN countrylanguage cl2 ON cl1.countrycode = cl2.countrycode  WHERE cl1.language = 'English' AND cl2.language = 'Dutch';
SELECT COUNT(DISTINCT cl.countrycode)  FROM countrylanguage cl  WHERE cl.language IN ('English', 'Dutch')  GROUP BY cl.countrycode  HAVING COUNT(DISTINCT cl.language) = 2;
SELECT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode  JOIN countrylanguage cl2 ON c.code = cl2.countrycode  WHERE cl1.language = 'English' AND cl2.language = 'French';
SELECT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode  JOIN countrylanguage cl2 ON c.code = cl2.countrycode  WHERE cl1.language = 'English' AND cl2.language = 'French';
SELECT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode  JOIN countrylanguage cl2 ON c.code = cl2.countrycode  WHERE cl1.language = 'English' AND cl1.isofficial = 'T'    AND cl2.language = 'French' AND cl2.isofficial = 'T';
SELECT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode  JOIN countrylanguage cl2 ON c.code = cl2.countrycode  WHERE cl1.language = 'English' AND cl1.isofficial = 'T'    AND cl2.language = 'French' AND cl2.isofficial = 'T';
SELECT COUNT(DISTINCT c.continent)  FROM countrylanguage cl  JOIN country c ON cl.countrycode = c.code  WHERE cl.language = 'Chinese';
SELECT COUNT(DISTINCT c.continent)  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE cl.language = 'Chinese';
SELECT DISTINCT c.region FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language IN ('English', 'Dutch');
SELECT DISTINCT c.region  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE cl.language IN ('Dutch', 'English');
SELECT DISTINCT c.name  FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language IN ('English', 'Dutch') AND cl.isofficial = 'T';
SELECT DISTINCT c.code, c.name, c.continent, c.region, c.surfacearea, c.indepyear, c.population, c.lifeexpectancy, c.gnp, c.gnpold, c.localname, c.governmentform, c.headofstate, c.capital, c.code2 FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language IN ('English', 'Dutch') AND cl.isofficial = 'T';
SELECT cl.language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.continent = 'Asia' GROUP BY cl.language ORDER BY SUM(cl.percentage) DESC LIMIT 1;
SELECT cl.language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.region = 'Asia' GROUP BY cl.language ORDER BY COUNT(DISTINCT c.code) DESC LIMIT 1;
SELECT cl.language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.governmentform LIKE '%Republic%' GROUP BY cl.language HAVING COUNT(DISTINCT c.code) = 1;
SELECT cl.language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.governmentform LIKE '%Republic%' GROUP BY cl.language HAVING COUNT(DISTINCT cl.countrycode) = 1;
SELECT city.name, city.population  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  ORDER BY city.population DESC  LIMIT 1;
SELECT city.name, city.population  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  ORDER BY city.population DESC  LIMIT 1;
SELECT name, population, lifeexpectancy  FROM country  WHERE continent = 'Asia'  ORDER BY surfacearea DESC  LIMIT 1;
SELECT name, population, lifeexpectancy  FROM country  WHERE continent = 'Asia'  ORDER BY surfacearea DESC  LIMIT 1;
SELECT AVG(c.lifeexpectancy)  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE cl.language != 'English' AND cl.isofficial = 'F';
SELECT AVG(c.lifeexpectancy)  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE cl.language != 'English' AND cl.isofficial = 'F';
SELECT SUM(c.population)  FROM city c  JOIN country co ON c.countrycode = co.code  WHERE co.code NOT IN (     SELECT cl.countrycode      FROM countrylanguage cl      WHERE cl.language = 'English' );
SELECT SUM(c.population)  FROM city c  JOIN country co ON c.countrycode = co.code  WHERE co.code NOT IN (     SELECT countrycode      FROM countrylanguage      WHERE language = 'English' AND isofficial = 'T' );
SELECT cl.language  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE c.headofstate = 'Beatrix' AND cl.isofficial = 'T';
SELECT cl.language  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE c.headofstate = 'Beatrix' AND cl.isofficial = 'T';
SELECT COUNT(DISTINCT cl.language)  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE c.indepyear < 1930 AND cl.isofficial = 'T';
SELECT COUNT(DISTINCT cl.language)  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE c.indepyear < 1930 AND cl.isofficial = 'T';
SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE region = 'Europe');
SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE region = 'Europe');
SELECT c.name  FROM country c  WHERE c.continent = 'Africa'  AND c.population < (SELECT MAX(population) FROM country WHERE continent = 'Asia');
SELECT name  FROM country  WHERE continent = 'Africa'  AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia');
SELECT c.name  FROM country c  WHERE c.continent = 'Asia'  AND c.population > (SELECT MAX(population) FROM country WHERE continent = 'Africa');
SELECT name  FROM country  WHERE continent = 'Asia'  AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa');
SELECT DISTINCT c.code  FROM country c  LEFT JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE cl.language != 'English' OR cl.language IS NULL;
SELECT DISTINCT c.code  FROM country c  LEFT JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE cl.language != 'English' OR cl.language IS NULL;
SELECT DISTINCT cl.countrycode  FROM countrylanguage cl  WHERE cl.language <> 'English';
SELECT DISTINCT cl.countrycode  FROM countrylanguage cl  WHERE cl.language <> 'English';
SELECT c.code  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE cl.language != 'English'  AND c.governmentform != 'Republic'  GROUP BY c.code;
SELECT c.code  FROM country c  WHERE c.code NOT IN (     SELECT cl.countrycode      FROM countrylanguage cl      WHERE cl.language = 'English' )  AND c.governmentform NOT LIKE '%Republic%';
SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND countrylanguage.language != 'English'  AND countrylanguage.isofficial = 'F'  ORDER BY city.name;
SELECT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND countrylanguage.language != 'English'  AND countrylanguage.isofficial = 'T';
SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 'T';
SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 'T';
SELECT name, indepyear, surfacearea  FROM country  WHERE population = (SELECT MIN(population) FROM country);
SELECT name, indepyear, surfacearea  FROM country  WHERE population = (SELECT MIN(population) FROM country);
SELECT population, name, headofstate  FROM country  WHERE surfacearea = (SELECT MAX(surfacearea) FROM country);
SELECT name, population, headofstate  FROM country  WHERE surfacearea = (SELECT MAX(surfacearea) FROM country);
SELECT c.name, COUNT(cl.language) AS language_count FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.name HAVING COUNT(cl.language) >= 3;
SELECT cl.countrycode, c.name, COUNT(cl.language) AS language_count FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code GROUP BY cl.countrycode, c.name HAVING COUNT(cl.language) > 2;
SELECT district, COUNT(*) AS city_count FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;
SELECT district, COUNT(*) AS city_count FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;
SELECT governmentform, SUM(population) AS total_population FROM country JOIN city ON country.code = city.countrycode GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72;
SELECT c.governmentform, SUM(ci.population) AS total_population FROM country c JOIN city ci ON c.code = ci.countrycode WHERE c.lifeexpectancy > 72 GROUP BY c.governmentform;
SELECT continent, AVG(lifeexpectancy) AS average_life_expectancy, SUM(population) AS total_population FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72;
SELECT continent, SUM(population) AS total_population, AVG(lifeexpectancy) AS average_life_expectancy FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72;
SELECT name, surfacearea  FROM country  ORDER BY surfacearea DESC  LIMIT 5;
SELECT name, surfacearea  FROM country  ORDER BY surfacearea DESC  LIMIT 5;
SELECT name FROM country ORDER BY population DESC LIMIT 3;
SELECT name FROM country ORDER BY population DESC LIMIT 3;
SELECT name FROM country ORDER BY population ASC LIMIT 3;
SELECT name FROM country ORDER BY population ASC LIMIT 3;
SELECT COUNT(*) FROM country WHERE continent = 'Asia';
SELECT COUNT(*) FROM country WHERE region = 'Asia';
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;
SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_area FROM country WHERE continent = 'North America' AND surfacearea > 3000;
SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_surface_area FROM country WHERE region = 'North America' AND surfacearea > 3000;
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1;
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1;
SELECT cl.language, cl.countrycode, MAX(cl.percentage)  FROM countrylanguage cl  JOIN country c ON cl.countrycode = c.code  GROUP BY cl.countrycode  HAVING cl.percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = cl.countrycode);
SELECT cl.language, cl.countrycode, MAX(cl.percentage)  FROM countrylanguage cl  GROUP BY cl.countrycode;
SELECT COUNT(DISTINCT cl.countrycode) AS total_countries FROM countrylanguage cl WHERE cl.language = 'Spanish' AND cl.percentage = (     SELECT MAX(percentage)     FROM countrylanguage     WHERE language = 'Spanish' );
SELECT COUNT(DISTINCT cl.countrycode)  FROM countrylanguage cl  WHERE cl.language = 'Spanish' AND cl.percentage > 50;
SELECT cl.countrycode, cl.percentage  FROM countrylanguage cl  WHERE cl.language = 'Spanish'  ORDER BY cl.percentage DESC;
SELECT cl.countrycode  FROM countrylanguage cl  WHERE cl.language = 'Spanish'  AND cl.percentage > 50;
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT name FROM conductor ORDER BY age ASC;
SELECT name FROM conductor ORDER BY age;
SELECT name FROM conductor WHERE nationality <> 'USA';
SELECT name FROM conductor WHERE nationality <> 'USA';
SELECT DISTINCT record_company  FROM orchestra  ORDER BY year_of_founded DESC;
SELECT DISTINCT record_company  FROM orchestra  ORDER BY year_of_founded DESC;
SELECT AVG(attendance) FROM show;
SELECT AVG(attendance) FROM show;
SELECT MAX(share) AS max_share, MIN(share) AS min_share FROM performance WHERE type <> 'Live final';
SELECT MAX(share) AS max_share, MIN(share) AS min_share  FROM performance  WHERE type <> 'Live final';
SELECT COUNT(DISTINCT nationality) FROM conductor;
SELECT COUNT(DISTINCT nationality) FROM conductor;
SELECT name FROM conductor ORDER BY year_of_work DESC;
SELECT name  FROM conductor  ORDER BY year_of_work DESC;
SELECT name  FROM conductor  ORDER BY year_of_work DESC  LIMIT 1;
SELECT name  FROM conductor  ORDER BY year_of_work DESC  LIMIT 1;
SELECT c.name, o.orchestra  FROM conductor c  JOIN orchestra o ON c.conductor_id = o.conductor_id;
SELECT c.name, o.orchestra  FROM conductor c  JOIN orchestra o ON c.conductor_id = o.conductor_id;
SELECT c.name  FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.conductor_id, c.name HAVING COUNT(DISTINCT o.orchestra_id) > 1;
SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.conductor_id, c.name HAVING COUNT(DISTINCT o.orchestra_id) > 1;
SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.conductor_id, c.name ORDER BY COUNT(o.orchestra_id) DESC LIMIT 1;
SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.conductor_id, c.name ORDER BY COUNT(o.orchestra_id) DESC LIMIT 1;
SELECT DISTINCT c.name  FROM conductor c  JOIN orchestra o ON c.conductor_id = o.conductor_id  WHERE o.year_of_founded > 2008;
SELECT DISTINCT c.name  FROM conductor c  JOIN orchestra o ON c.conductor_id = o.conductor_id  WHERE o.year_of_founded > 2008;
SELECT record_company, COUNT(DISTINCT orchestra_id) AS number_of_orchestras FROM orchestra GROUP BY record_company;
SELECT record_company, COUNT(*) AS orchestra_count FROM orchestra GROUP BY record_company;
SELECT major_record_format, COUNT(*) AS format_count FROM orchestra GROUP BY major_record_format ORDER BY format_count ASC;
SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC;
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(orchestra_id) DESC LIMIT 1;
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(DISTINCT orchestra_id) DESC LIMIT 1;
SELECT orchestra.orchestra  FROM orchestra  LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id  WHERE performance.orchestra_id IS NULL;
SELECT o.orchestra  FROM orchestra o  LEFT JOIN performance p ON o.orchestra_id = p.orchestra_id  WHERE p.performance_id IS NULL;
SELECT DISTINCT o1.record_company FROM orchestra o1 JOIN orchestra o2 ON o1.record_company = o2.record_company WHERE o1.year_of_founded < 2003 AND o2.year_of_founded >= 2003;
SELECT DISTINCT o1.record_company FROM orchestra o1 JOIN orchestra o2 ON o1.record_company = o2.record_company WHERE o1.year_of_founded < 2003 AND o2.year_of_founded >= 2003;
SELECT COUNT(*)  FROM orchestra  WHERE major_record_format IN ('CD', 'DVD');
SELECT COUNT(*)  FROM orchestra  WHERE major_record_format IN ('CD', 'DVD');
SELECT DISTINCT o.year_of_founded FROM orchestra o JOIN performance p ON o.orchestra_id = p.orchestra_id GROUP BY o.orchestra_id, o.year_of_founded HAVING COUNT(p.performance_id) > 1;
SELECT DISTINCT o.year_of_founded FROM orchestra o JOIN performance p ON o.orchestra_id = p.orchestra_id GROUP BY o.year_of_founded HAVING COUNT(p.performance_id) > 1;
SELECT COUNT(*) FROM highschooler;
SELECT COUNT(*) FROM highschooler;
SELECT name, grade FROM highschooler;
SELECT name, grade FROM highschooler;
SELECT grade FROM highschooler;
SELECT id, grade FROM highschooler;
SELECT grade FROM highschooler WHERE name = 'Kyle';
SELECT grade FROM highschooler WHERE name = 'Kyle';
SELECT name FROM highschooler WHERE grade = 10;
SELECT name FROM highschooler WHERE grade = 10;
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);
SELECT grade, COUNT(*) AS number_of_highschoolers FROM highschooler GROUP BY grade;
SELECT grade, COUNT(*) AS count FROM highschooler GROUP BY grade;
SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(id) >= 4;
SELECT grade  FROM highschooler  GROUP BY grade  HAVING COUNT(*) >= 4;
SELECT f.student_id, COUNT(f.friend_id) AS number_of_friends FROM friend f GROUP BY f.student_id;
SELECT f.student_id, COUNT(f.friend_id) AS friend_count FROM friend f GROUP BY f.student_id;
SELECT h.name, COUNT(f.friend_id) AS number_of_friends FROM highschooler h LEFT JOIN friend f ON h.id = f.student_id GROUP BY h.id, h.name;
SELECT h.name, COUNT(f.friend_id) AS friend_count FROM highschooler h LEFT JOIN friend f ON h.id = f.student_id GROUP BY h.id, h.name;
SELECT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY h.id, h.name ORDER BY COUNT(f.friend_id) DESC LIMIT 1;
SELECT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY h.id, h.name ORDER BY COUNT(f.friend_id) DESC LIMIT 1;
SELECT h.name  FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY h.id, h.name HAVING COUNT(f.friend_id) >= 3;
SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  GROUP BY h.id, h.name  HAVING COUNT(f.friend_id) >= 3;
SELECT h2.name  FROM highschooler h1  JOIN friend f ON h1.id = f.student_id  JOIN highschooler h2 ON f.friend_id = h2.id  WHERE h1.name = 'Kyle';
SELECT h2.name  FROM highschooler h1  JOIN friend f ON h1.id = f.student_id  JOIN highschooler h2 ON f.friend_id = h2.id  WHERE h1.name = 'Kyle';
SELECT COUNT(f.friend_id)  FROM friend f  JOIN highschooler h ON f.student_id = h.id  WHERE h.name = 'Kyle';
SELECT COUNT(friend_id)  FROM friend  WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);
SELECT h.id  FROM highschooler h  LEFT JOIN friend f ON h.id = f.student_id  WHERE f.friend_id IS NULL;
SELECT name  FROM highschooler  WHERE id NOT IN (SELECT student_id FROM friend);
SELECT name  FROM highschooler  WHERE id NOT IN (SELECT student_id FROM friend);
SELECT DISTINCT h.id FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.liked_id;
SELECT DISTINCT h.id  FROM highschooler h  JOIN friend f ON h.id = f.student_id  JOIN likes l ON h.id = l.student_id;
SELECT DISTINCT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  JOIN likes l ON h.id = l.liked_id;
SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  JOIN likes l ON h.id = l.student_id  WHERE h.grade = 12;
SELECT student_id, COUNT(liked_id) AS like_count FROM likes GROUP BY student_id;
SELECT student_id, COUNT(liked_id) AS likes_count FROM likes GROUP BY student_id;
SELECT h.name, COUNT(l.liked_id) AS number_of_likes FROM highschooler h JOIN likes l ON h.id = l.student_id WHERE h.grade = 12 GROUP BY h.name;
SELECT h.name, COUNT(l.liked_id) AS like_count FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.id, h.name HAVING COUNT(l.liked_id) > 0;
SELECT h.name FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.id, h.name ORDER BY COUNT(l.liked_id) DESC LIMIT 1;
SELECT h.name FROM highschooler h JOIN likes l ON h.id = l.liked_id GROUP BY h.id, h.name ORDER BY COUNT(l.student_id) DESC LIMIT 1;
SELECT h.name  FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.id, h.name HAVING COUNT(l.liked_id) >= 2;
SELECT h.name  FROM highschooler h  JOIN likes l ON h.id = l.student_id  GROUP BY h.id, h.name  HAVING COUNT(l.liked_id) >= 2;
SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  WHERE h.grade > 5  GROUP BY h.id  HAVING COUNT(f.friend_id) >= 2;
SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  WHERE h.grade > 5  GROUP BY h.id  HAVING COUNT(f.friend_id) >= 2;
SELECT COUNT(*) FROM likes WHERE liked_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT COUNT(*)  FROM likes  WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT AVG(h.grade)  FROM highschooler h  WHERE h.id IN (SELECT DISTINCT f.student_id FROM friend f);
SELECT AVG(h.grade)  FROM highschooler h  JOIN friend f ON h.id = f.student_id;
SELECT MIN(h.grade)  FROM highschooler h  WHERE h.id NOT IN (SELECT DISTINCT f.student_id FROM friend f);
SELECT MIN(h.grade)  FROM highschooler h  WHERE h.id NOT IN (SELECT DISTINCT f.student_id FROM friend f);
SELECT DISTINCT o.state FROM owners o JOIN professionals p ON o.state = p.state;
SELECT DISTINCT o.state FROM owners o JOIN professionals p ON o.state = p.state;
SELECT AVG(CAST(age AS FLOAT)) AS average_age FROM dogs WHERE dog_id IN (SELECT DISTINCT dog_id FROM treatments);
SELECT AVG(CAST(age AS FLOAT)) AS average_age FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments);
SELECT p.professional_id, p.last_name, p.cell_number FROM professionals p LEFT JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.last_name, p.cell_number HAVING p.state = 'Indiana' OR COUNT(t.treatment_id) > 2;
```sql SELECT p.professional_id, p.last_name, p.cell_number FROM professionals p LEFT JOIN treatments t ON p.professional_id = t.professional_id WHERE p.state = 'Indiana' OR (SELECT COUNT(*) FROM treatments WHERE professional_id = p.professional_id) > 2; ```
SELECT d.name  FROM dogs d LEFT JOIN treatments t ON d.dog_id = t.dog_id GROUP BY d.dog_id, d.name HAVING SUM(t.cost_of_treatment) <= 1000;
SELECT d.name  FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id GROUP BY d.dog_id, d.name HAVING SUM(t.cost_of_treatment) <= 1000;
SELECT DISTINCT p.first_name FROM professionals p WHERE p.first_name NOT IN (SELECT d.name FROM dogs d);
SELECT DISTINCT p.first_name FROM professionals p WHERE p.first_name NOT IN (SELECT d.name FROM dogs d);
SELECT p.professional_id, p.role_code, p.email_address FROM professionals p LEFT JOIN treatments t ON p.professional_id = t.professional_id LEFT JOIN dogs d ON t.dog_id = d.dog_id WHERE d.dog_id IS NULL;
SELECT p.professional_id, p.role_code, p.email_address  FROM professionals p  WHERE p.professional_id NOT IN (     SELECT DISTINCT t.professional_id      FROM treatments t      JOIN dogs d ON t.dog_id = d.dog_id      WHERE d.breed_code IN (SELECT breed_code FROM breeds WHERE breed_name = 'Dog') );
SELECT o.owner_id, o.first_name, o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT o.owner_id, o.first_name, o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT p.professional_id, p.role_code, p.first_name FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2;
SELECT p.professional_id, p.role_code, p.first_name FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2;
SELECT b.breed_name FROM breeds b JOIN dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT b.breed_name FROM dogs d JOIN breeds b ON d.breed_code = b.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT o.owner_id, o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
```sql SELECT o.owner_id, o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1; ```
SELECT t.treatment_type_description FROM treatment_types t JOIN treatments tr ON t.treatment_type_code = tr.treatment_type_code GROUP BY t.treatment_type_description ORDER BY SUM(tr.cost_of_treatment) ASC LIMIT 1;
SELECT t.treatment_type_description FROM treatment_types t JOIN treatments tr ON t.treatment_type_code = tr.treatment_type_code GROUP BY t.treatment_type_description ORDER BY SUM(tr.cost_of_treatment) ASC LIMIT 1;
SELECT o.owner_id, o.zip_code FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
```sql SELECT o.owner_id, o.zip_code FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1; ```
SELECT p.professional_id, p.cell_number FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;
```sql SELECT p.professional_id, p.cell_number FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2; ```
SELECT p.first_name, p.last_name FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);
SELECT p.first_name, p.last_name FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);
SELECT t.date_of_treatment, p.first_name FROM treatments t JOIN professionals p ON t.professional_id = p.professional_id;
SELECT t.date_of_treatment, p.first_name FROM treatments t JOIN professionals p ON t.professional_id = p.professional_id;
SELECT t.cost_of_treatment, tt.treatment_type_description FROM treatments t JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT t.cost_of_treatment AS cost, tt.treatment_type_description AS treatment_type_description FROM treatments t JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT o.first_name, o.last_name, s.size_description  FROM owners o  JOIN dogs d ON o.owner_id = d.owner_id  JOIN sizes s ON d.size_code = s.size_code;
SELECT o.first_name, o.last_name, s.size_description  FROM owners o  JOIN dogs d ON o.owner_id = d.owner_id  JOIN sizes s ON d.size_code = s.size_code;
SELECT o.first_name, d.name  FROM owners o  JOIN dogs d ON o.owner_id = d.owner_id;
SELECT o.first_name, d.name  FROM owners o  JOIN dogs d ON o.owner_id = d.owner_id;
```sql SELECT d.name, t.date_of_treatment FROM dogs d JOIN breeds b ON d.breed_code = b.breed_code JOIN treatments t ON d.dog_id = t.dog_id WHERE b.breed_name = (     SELECT b2.breed_name     FROM breeds b2     JOIN dogs d2 ON b2.breed_code = d2.breed_code     GROUP BY b2.breed_name     ORDER BY COUNT(d2.dog_id) ASC     LIMIT 1 ); ```
```sql SELECT d.name, t.date_of_treatment FROM dogs d JOIN breeds b ON d.breed_code = b.breed_code JOIN treatments t ON d.dog_id = t.dog_id WHERE b.breed_name IN (     SELECT breed_name     FROM breeds     GROUP BY breed_name     ORDER BY COUNT(*) ASC     LIMIT 1 ); ```
SELECT o.first_name, d.name  FROM owners o  JOIN dogs d ON o.owner_id = d.owner_id  WHERE o.state = 'Virginia';
SELECT o.first_name, d.name  FROM owners o  JOIN dogs d ON o.owner_id = d.owner_id  WHERE o.state = 'Virginia';
SELECT d.date_arrived, d.date_departed  FROM dogs d  JOIN treatments t ON d.dog_id = t.dog_id;
SELECT d.date_arrived, d.date_departed  FROM dogs d  JOIN treatments t ON d.dog_id = t.dog_id;
SELECT o.last_name  FROM owners o  JOIN dogs d ON o.owner_id = d.owner_id  ORDER BY d.date_of_birth DESC  LIMIT 1;
SELECT o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id ORDER BY d.date_of_birth DESC LIMIT 1;
SELECT email_address  FROM professionals  WHERE state IN ('Hawaii', 'Wisconsin');
SELECT email_address  FROM professionals  WHERE state IN ('Hawaii', 'Wisconsin');
SELECT date_arrived, date_departed FROM dogs;
SELECT date_arrived, date_departed FROM dogs;
SELECT COUNT(DISTINCT dog_id) FROM treatments;
SELECT COUNT(DISTINCT dog_id) AS number_of_dogs FROM treatments;
SELECT COUNT(DISTINCT professional_id)  FROM treatments  WHERE dog_id IS NOT NULL;
SELECT COUNT(DISTINCT professional_id)  FROM treatments  WHERE dog_id IS NOT NULL;
SELECT p.role_code, p.street, p.city, p.state FROM professionals p WHERE p.city LIKE '%West%';
SELECT p.role_code, p.street, p.city, p.state FROM professionals p WHERE p.city LIKE '%West%';
SELECT first_name, last_name, email_address  FROM owners  WHERE state LIKE '%North%';
SELECT first_name, last_name, email_address  FROM owners  WHERE state LIKE '%North%';
SELECT COUNT(*)  FROM dogs  WHERE CAST(age AS INTEGER) < (SELECT AVG(CAST(age AS INTEGER)) FROM dogs);
SELECT COUNT(*)  FROM dogs  WHERE CAST(age AS INTEGER) < (SELECT AVG(CAST(age AS INTEGER)) FROM dogs);
SELECT cost_of_treatment  FROM treatments  ORDER BY date_of_treatment DESC  LIMIT 1;
SELECT cost_of_treatment  FROM treatments  ORDER BY date_of_treatment DESC  LIMIT 1;
SELECT COUNT(*)  FROM dogs  WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM treatments);
SELECT COUNT(*)  FROM dogs  WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM treatments);
SELECT COUNT(*)  FROM owners  WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM dogs);
SELECT COUNT(*)  FROM owners  WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM dogs);
SELECT COUNT(*)  FROM professionals  WHERE professional_id NOT IN (     SELECT DISTINCT professional_id      FROM treatments      WHERE dog_id IN (SELECT dog_id FROM dogs) );
SELECT COUNT(*)  FROM professionals  WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM treatments WHERE dog_id IS NOT NULL);
SELECT name, age, weight  FROM dogs  WHERE abandoned_yn = '1';
SELECT name, age, weight  FROM dogs  WHERE abandoned_yn = '1';
SELECT AVG(CAST(age AS FLOAT)) AS average_age FROM dogs;
SELECT AVG(CAST(age AS FLOAT)) AS average_age FROM dogs;
SELECT MAX(age) AS oldest_dog_age FROM dogs;
SELECT MAX(age) AS oldest_dog_age FROM dogs;
SELECT charge_type, charge_amount FROM charges;
SELECT charge_type, charge_amount FROM charges;
SELECT MAX(charge_amount) FROM charges;
SELECT MAX(charge_amount)  FROM charges  WHERE charge_type = (SELECT charge_type                        FROM charges                        ORDER BY charge_amount DESC                        LIMIT 1);
SELECT email_address, cell_number, home_phone  FROM professionals;
SELECT email_address, cell_number, home_phone  FROM professionals;
SELECT b.breed_code, s.size_code FROM breeds b CROSS JOIN sizes s;
SELECT DISTINCT d.breed_code, d.size_code FROM dogs d;
SELECT p.first_name, tt.treatment_type_description FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT p.first_name, tt.treatment_type_description  FROM professionals p  JOIN treatments t ON p.professional_id = t.professional_id  JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT name FROM singer ORDER BY net_worth_millions ASC;
SELECT name FROM singer ORDER BY net_worth_millions ASC;
SELECT birth_year, citizenship FROM singer;
SELECT birth_year, citizenship FROM singer;
SELECT name FROM singer WHERE citizenship <> 'France';
SELECT name FROM singer WHERE citizenship <> 'French';
SELECT name FROM singer WHERE birth_year IN (1948, 1949);
SELECT name FROM singer WHERE birth_year IN (1948, 1949);
SELECT name  FROM singer  ORDER BY net_worth_millions DESC  LIMIT 1;
SELECT name  FROM singer  ORDER BY net_worth_millions DESC  LIMIT 1;
SELECT citizenship, COUNT(*) AS number_of_singers FROM singer GROUP BY citizenship;
SELECT citizenship, COUNT(*) AS singer_count FROM singer GROUP BY citizenship;
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT citizenship, MAX(net_worth_millions) AS max_net_worth FROM singer GROUP BY citizenship;
SELECT citizenship, MAX(net_worth_millions) AS max_net_worth FROM singer GROUP BY citizenship;
SELECT song.title, singer.name  FROM song  JOIN singer ON song.singer_id = singer.singer_id;
SELECT song.title, singer.name  FROM song  JOIN singer ON song.singer_id = singer.singer_id;
SELECT DISTINCT s.name  FROM singer s  JOIN song so ON s.singer_id = so.singer_id  WHERE so.sales > 300000;
SELECT DISTINCT s.name  FROM singer s  JOIN song so ON s.singer_id = so.singer_id  WHERE so.sales > 300000;
SELECT s.name  FROM singer s  JOIN song so ON s.singer_id = so.singer_id  GROUP BY s.singer_id, s.name  HAVING COUNT(so.song_id) > 1;
SELECT s.name  FROM singer s  JOIN song so ON s.singer_id = so.singer_id  GROUP BY s.singer_id, s.name  HAVING COUNT(so.song_id) > 1;
SELECT s.name, SUM so.sales AS total_sales FROM singer s JOIN song so ON s.singer_id = so.singer_id GROUP BY s.name;
SELECT s.name, SUM so.sales AS total_sales FROM singer s JOIN song so ON s.singer_id = so.singer_id GROUP BY s.name;
SELECT name  FROM singer  WHERE singer_id NOT IN (SELECT singer_id FROM song);
SELECT name AS sname  FROM singer  WHERE singer_id NOT IN (SELECT singer_id FROM song);
SELECT DISTINCT citizenship  FROM singer  WHERE birth_year < 1945 OR birth_year > 1955  GROUP BY citizenship  HAVING COUNT(DISTINCT singer_id) > 1;
SELECT DISTINCT s1.citizenship FROM singer s1 JOIN singer s2 ON s1.citizenship = s2.citizenship WHERE s1.birth_year < 1945 AND s2.birth_year > 1955;
SELECT COUNT(*)  FROM other_available_features;
SELECT rft.feature_type_name  FROM ref_feature_types rft  JOIN other_available_features oaf ON rft.feature_type_code = oaf.feature_type_code  WHERE oaf.feature_name = 'AirCon';
SELECT rpt.property_type_description  FROM ref_property_types rpt  JOIN properties p ON rpt.property_type_code = p.property_type_code  WHERE p.property_type_code = 'your_code_here';
SELECT property_name  FROM properties  WHERE room_count > 1  AND property_type_code IN (     SELECT property_type_code      FROM ref_property_types      WHERE property_type_description IN ('house', 'apartment') );
