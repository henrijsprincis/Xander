SELECT COUNT(DISTINCT singer_id) AS total_singers FROM singer;
SELECT COUNT(*) AS total_number_of_singers FROM singer;
SELECT name, country, age FROM singer ORDER BY age DESC;
SELECT name, country, age FROM singer ORDER BY age DESC;
SELECT AVG(age) AS average_age, MIN(age) AS min_age, MAX(age) AS max_age FROM singer WHERE country = 'France';
SELECT AVG(age) AS average_age, MIN(age) AS min_age, MAX(age) AS max_age FROM singer WHERE country = 'France';
SELECT s.name, s.song_release_year FROM singer s WHERE s.age = (SELECT MIN(age) FROM singer);
SELECT s.name, s.song_release_year FROM singer s WHERE s.age = (SELECT MIN(age) FROM singer)
SELECT DISTINCT country FROM singer WHERE age > 20;
SELECT DISTINCT country FROM singer WHERE age > 20;
SELECT country, COUNT(singer_id) AS num_singers FROM singer GROUP BY country;
SELECT country, COUNT(*)  FROM singer  GROUP BY country;
SELECT s.song_name FROM singer s WHERE s.age > (SELECT AVG(age) FROM singer);
SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer);
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT MAX(capacity) AS maximum_capacity, AVG(capacity) AS average_capacity FROM stadium;
SELECT AVG(capacity) AS average_capacity, MAX(capacity) AS max_capacity FROM stadium;
SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium);
SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium);
SELECT COUNT(*)  FROM concert  WHERE year = '2014' OR year = '2015';
SELECT COUNT(*)  FROM concert  WHERE year = '2014' OR year = '2015';
SELECT s.name AS stadium_name, COUNT(c.concert_id) AS number_of_concerts FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.name;
SELECT s.name AS stadium, COUNT(c.concert_id) AS num_concerts FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.name HAVING s.name = "Stark's Park";
SELECT name, capacity FROM stadium WHERE stadium_id = (     SELECT stadium_id     FROM concert     WHERE year >= '2014'     GROUP BY stadium_id     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT name, capacity FROM stadium WHERE stadium_id = (     SELECT stadium_id     FROM concert     WHERE year > 2013     GROUP BY stadium_id     ORDER BY COUNT(*) DESC     LIMIT 1 )
SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT name FROM stadium WHERE name NOT IN (SELECT name FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id)
SELECT name FROM stadium WHERE name NOT IN (SELECT DISTINCT stadium.name                    FROM stadium                    JOIN concert ON stadium.stadium_id = concert.stadium_id)
SELECT DISTINCT s1.country FROM singer s1, singer s2 WHERE s1.age > 40 AND s2.age < 30 AND s1.country = s2.country;
SELECT name FROM stadium WHERE stadium_id NOT IN (     SELECT stadium_id     FROM concert     WHERE year = '2014' );
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = '2014');
SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme;
SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme;
SELECT singer.name, COUNT(concert.concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY singer.name;
SELECT singer.name, COUNT(concert.concert_id) AS number_of_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY singer.name;
SELECT s.name FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id JOIN concert c ON sic.concert_id = c.concert_id WHERE c.year = '2014';
SELECT s.name FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id JOIN concert c ON sic.concert_id = c.concert_id WHERE c.year = '2014';
SELECT s.name, s.country FROM singer s WHERE s.song_name LIKE '%Hey%';
SELECT s.name, s.country FROM singer s WHERE s.singer_id IN (     SELECT sic.singer_id     FROM singer_in_concert sic     JOIN concert c ON sic.concert_id = c.concert_id     WHERE c.concert_name LIKE '%Hey%' )
SELECT s.name, s.location FROM stadium s WHERE s.stadium_id IN (     SELECT c.stadium_id     FROM concert c     WHERE c.year = '2014' ) AND s.stadium_id IN (     SELECT c.stadium_id     FROM concert c     WHERE c.year = '2015' );
SELECT s.name, s.location FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year IN ('2014', '2015') GROUP BY s.name, s.location HAVING COUNT(DISTINCT c.year) = 2;
SELECT COUNT(*)  FROM concert  WHERE stadium_id = (SELECT stadium_id                      FROM stadium                      ORDER BY capacity DESC                      LIMIT 1);
SELECT COUNT(*)  FROM concert  WHERE stadium_id = (     SELECT stadium_id      FROM stadium      ORDER BY capacity DESC      LIMIT 1 );
SELECT COUNT(*)  FROM pets  WHERE weight > 10;
SELECT COUNT(*)  FROM pets  WHERE weight > 10;
SELECT MIN(weight)  FROM pets  WHERE pet_age = (SELECT MIN(pet_age) FROM pets);
SELECT MIN(weight)  FROM pets  WHERE pettype = 'dog';
SELECT MAX(weight) AS max_weight, pettype FROM pets GROUP BY pettype;
SELECT MAX(weight), pettype FROM pets GROUP BY pettype;
SELECT COUNT(DISTINCT p.petid) FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE s.age > 20;
SELECT COUNT(DISTINCT p.petid) FROM has_pet h JOIN pets p ON h.petid = p.petid JOIN student s ON h.stuid = s.stuid WHERE s.age > 20;
SELECT COUNT(DISTINCT p.petid) FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE s.sex = 'F' AND p.pettype = 'dog';
SELECT COUNT(DISTINCT p.petid) FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE s.sex = 'female' AND p.pettype = 'dog';
SELECT COUNT(DISTINCT pettype)  FROM pets;
SELECT COUNT(DISTINCT pettype) AS num_types FROM pets;
SELECT DISTINCT s.fname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype IN ('cat', 'dog');
SELECT DISTINCT s.fname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype IN ('cat', 'dog');
SELECT s.fname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype IN ('cat', 'dog') GROUP BY s.stuid HAVING COUNT(DISTINCT p.pettype) = 2;
SELECT DISTINCT s.fname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND s.stuid IN (     SELECT s.stuid     FROM student s     JOIN has_pet hp ON s.stuid = hp.stuid     JOIN pets p ON hp.petid = p.petid     WHERE p.pettype = 'dog' )
SELECT s.major, s.age FROM student s LEFT JOIN has_pet hp ON s.stuid = hp.stuid LEFT JOIN pets p ON hp.petid = p.petid WHERE p.pettype <> 'cat';
SELECT s.major, s.age FROM student s WHERE s.stuid NOT IN (SELECT h.stuid FROM has_pet h WHERE h.petid IN (SELECT p.petid FROM pets p WHERE p.pettype = 'cat'));
SELECT s.stuid FROM student s LEFT JOIN has_pet hp ON s.stuid = hp.stuid LEFT JOIN pets p ON hp.petid = p.petid WHERE p.pettype <> 'cat' OR p.pettype IS NULL;
SELECT DISTINCT s.stuid FROM student s LEFT JOIN has_pet hp ON s.stuid = hp.stuid LEFT JOIN pets p ON hp.petid = p.petid WHERE p.pettype <> 'cat' OR p.pettype IS NULL;
SELECT s.fname, s.age FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'dog' AND s.stuid NOT IN (     SELECT s.stuid     FROM student s     JOIN has_pet hp ON s.stuid = hp.stuid     JOIN pets p ON hp.petid = p.petid     WHERE p.pettype = 'cat' )
SELECT s.fname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'dog' AND s.stuid NOT IN (     SELECT s.stuid     FROM student s     JOIN has_pet hp ON s.stuid = hp.stuid     JOIN pets p ON hp.petid = p.petid     WHERE p.pettype = 'cat' )
SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets);
SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets);
SELECT petid, weight FROM pets WHERE pet_age > 1;
SELECT petid, weight FROM pets WHERE pet_age > 1;
SELECT pettype, AVG(pet_age) AS average_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype;
SELECT pettype, AVG(pet_age) AS average_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype;
SELECT AVG(weight) AS average_weight, pettype FROM pets GROUP BY pettype;
SELECT AVG(weight) AS average_weight, pettype FROM pets GROUP BY pettype;
SELECT s.fname, s.age FROM student s JOIN has_pet hp ON s.stuid = hp.stuid;
SELECT DISTINCT s.fname, s.age FROM student s JOIN has_pet hp ON s.stuid = hp.stuid;
SELECT petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE lname = 'Smith'
SELECT petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE lname = 'Smith';
SELECT stuid, COUNT(petid) AS num_pets FROM has_pet GROUP BY stuid HAVING COUNT(petid) > 0;
SELECT stuid, COUNT(petid)  FROM has_pet  GROUP BY stuid;
SELECT s.fname, s.sex FROM student s JOIN has_pet hp ON s.stuid = hp.stuid GROUP BY s.stuid, s.fname, s.sex HAVING COUNT(hp.petid) > 1;
SELECT s.fname, s.sex FROM student s JOIN has_pet hp ON s.stuid = hp.stuid GROUP BY s.stuid, s.fname, s.sex HAVING COUNT(hp.petid) > 1;
SELECT s.lname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND p.pet_age = 3;
SELECT s.lname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND p.pet_age = 3 ORDER BY p.pet_age DESC LIMIT 1;
SELECT AVG(age)  FROM student  WHERE stuid NOT IN (SELECT stuid FROM has_pet)
SELECT AVG(age)  FROM student  WHERE stuid NOT IN (SELECT stuid FROM has_pet);
SELECT COUNT(DISTINCT continent) AS num_continents FROM continents;
SELECT COUNT(DISTINCT continent) AS number_of_continents FROM continents;
SELECT c.contid, c.continent, COUNT(co.countryid) AS num_countries FROM continents c LEFT JOIN countries co ON c.contid = co.continent GROUP BY c.contid, c.continent;
SELECT c.contid, c.continent, COUNT(co.countryid) AS num_countries FROM continents c LEFT JOIN countries co ON c.contid = co.continent GROUP BY c.contid, c.continent;
SELECT COUNT(DISTINCT countryid) AS total_countries FROM countries;
SELECT COUNT(DISTINCT countryid) AS total_countries FROM countries;
SELECT cm.fullname, cm.id, COUNT(ml.modelid) AS number FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker GROUP BY cm.fullname, cm.id;
SELECT car_makers.fullname, car_makers.id, COUNT(model_list.model) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id;
SELECT model_list.model, MIN(cars_data.horsepower) FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id JOIN car_names ON model_list.modelid = car_names.makeid JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'amc';
SELECT model_list.model FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.horsepower = (SELECT MIN(cars_data.horsepower) FROM cars_data)
SELECT model FROM model_list WHERE weight < (SELECT AVG(weight) FROM cars_data)
SELECT model FROM model_list WHERE weight < (SELECT AVG(weight) FROM cars_data)
SELECT DISTINCT maker FROM car_makers WHERE id IN (SELECT maker              FROM model_list              WHERE modelid IN (SELECT makeid                                FROM cars_data                                WHERE year = 1970));
SELECT DISTINCT maker FROM car_makers WHERE id IN (SELECT maker              FROM model_list              WHERE modelid IN (SELECT makeid                                FROM car_names                                WHERE model IN (SELECT id                                                 FROM cars_data                                                 WHERE year = 1970)));
SELECT make, year FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE year = (SELECT MIN(year) FROM cars_data);
SELECT maker, MIN(year) AS earliest_year FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE model = 'chevrolet chevelle malibu';
SELECT DISTINCT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.year > 1980 AND car_makers.maker = 'plymouth';
SELECT DISTINCT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'plymouth' AND cars_data.year > 1980;
SELECT c.continent, COUNT(cm.id) as count FROM continents c JOIN countries co ON c.contid = co.continent JOIN car_makers cm ON co.countryname = cm.country GROUP BY c.continent;
SELECT c.continent, COUNT(cm.id) AS num_car_makers FROM continents c LEFT JOIN countries co ON c.contid = co.continent LEFT JOIN car_makers cm ON co.countryname = cm.country GROUP BY c.continent;
SELECT country, COUNT(maker) AS num_car_makers FROM car_makers GROUP BY country ORDER BY num_car_makers DESC LIMIT 1;
SELECT country  FROM car_makers  GROUP BY country  ORDER BY COUNT(DISTINCT maker) DESC  LIMIT 1;
SELECT COUNT(model_list.modelid) AS count, car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname;
SELECT COUNT(modelid) AS number_of_models, car_makers.id, car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname;
SELECT accelerate  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN car_makers ON car_names.make = car_makers.fullname  WHERE car_makers.maker = 'amc' AND car_names.model = 'hornet sportabout (sw)';
SELECT accelerate  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.fullname = 'amc hornet sportabout (sw)';
SELECT COUNT(DISTINCT maker)  FROM car_makers  WHERE country = 'France';
SELECT COUNT(DISTINCT maker)  FROM car_makers  WHERE country = 'France';
SELECT COUNT(DISTINCT modelid)  FROM model_list  WHERE maker IN (SELECT id FROM car_makers WHERE country = 'usa');
SELECT COUNT(DISTINCT model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.country = 'United States';
SELECT AVG(mpg)  FROM cars_data  WHERE cylinders = 4;
SELECT AVG(mpg)  FROM cars_data  WHERE cylinders = 4;
SELECT MIN(weight)  FROM cars_data  WHERE cylinders = 8 AND year = 1974;
SELECT MIN(weight)  FROM cars_data  WHERE cylinders = 8 AND year = 1974;
SELECT maker, model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker;
SELECT maker, model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker WHERE maker = 'amc';
SELECT DISTINCT c.countryid, c.countryname FROM countries c JOIN car_makers cm ON c.countryname = cm.country;
SELECT DISTINCT c.countryid, c.countryname FROM countries c JOIN car_makers cm ON c.countryname = cm.country;
SELECT COUNT(*)  FROM cars_data  WHERE CAST(horsepower AS INTEGER) > 150;
SELECT COUNT(*)  FROM cars_data  WHERE CAST(horsepower AS INTEGER) > 150;
SELECT AVG(weight), year FROM cars_data GROUP BY year;
SELECT AVG(weight), year FROM cars_data GROUP BY year;
SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryname = cm.country GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) >= 3 AND c.continent = (SELECT contid FROM continents WHERE continent = 'europe');
SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryname = cm.country GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) >= 3 AND c.continent = (SELECT contid FROM continents WHERE continent = 'Europe');
SELECT MAX(cars_data.horsepower), car_makers.maker FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3;
SELECT MAX(cars_data.horsepower), car_makers.maker FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3;
SELECT model_list.model, MAX(cars_data.mpg) AS max_mpg FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON model_list.modelid = cars_data.id WHERE car_makers.fullname = 'citroen';
SELECT model_list.model, MAX(cars_data.mpg)  FROM model_list  JOIN car_names ON model_list.modelid = car_names.makeid  JOIN cars_data ON car_names.model = cars_data.id  JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.maker = 'citroen';
SELECT AVG(CAST(horsepower AS DECIMAL))  FROM cars_data  WHERE year < 1980;
SELECT AVG(CAST(horsepower AS DECIMAL))  FROM cars_data  WHERE year < 1980;
SELECT AVG(edispl)  FROM cars_data  WHERE id IN (SELECT id               FROM car_names               WHERE makeid IN (SELECT id                                FROM car_makers                                WHERE maker = 'volvo'));
SELECT AVG(edispl)  FROM cars_data  WHERE id IN (SELECT id               FROM car_makers               WHERE maker = 'volvo');
SELECT cylinders, MAX(accelerate)  FROM cars_data  GROUP BY cylinders;
SELECT MAX(accelerate) AS max_accelerate, cylinders FROM cars_data GROUP BY cylinders;
SELECT maker, COUNT(model) AS num_models FROM model_list GROUP BY maker ORDER BY num_models DESC LIMIT 1;
SELECT maker, COUNT(DISTINCT model) AS num_versions FROM car_makers JOIN model_list ON car_makers.id = model_list.maker WHERE maker = 'ford' GROUP BY maker ORDER BY num_versions DESC LIMIT 1;
SELECT COUNT(*)  FROM cars_data  WHERE cylinders > 4;
SELECT COUNT(*)  FROM cars_data  WHERE cylinders > 4;
SELECT COUNT(*)  FROM cars_data  WHERE year = 1980;
SELECT COUNT(*)  FROM cars_data  WHERE year = 1980;
SELECT COUNT(DISTINCT modelid)  FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  WHERE fullname = 'American Motor Company';
SELECT COUNT(modelid)  FROM model_list  WHERE maker = (SELECT id FROM car_makers WHERE maker = 'American Motor Company');
SELECT id, fullname FROM car_makers WHERE id IN (     SELECT maker     FROM model_list     GROUP BY maker     HAVING COUNT(model) > 3 );
SELECT id, maker FROM car_makers WHERE id IN (     SELECT maker     FROM model_list     GROUP BY maker     HAVING COUNT(*) > 3 )
SELECT DISTINCT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON model_list.modelid = cars_data.id WHERE (car_makers.fullname = 'General Motors' OR cars_data.weight > 3500)
SELECT DISTINCT model FROM model_list WHERE maker = (SELECT id FROM car_makers WHERE maker = 'chevrolet') OR weight > 3500;
SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000;
SELECT DISTINCT year FROM cars_data WHERE weight < 4000 AND weight > 3000;
SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1;
SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1;
SELECT MIN(cylinders)  FROM cars_data  WHERE id IN (SELECT id               FROM car_names               WHERE makeid = (SELECT id                               FROM car_makers                               WHERE maker = 'volvo'));
SELECT MIN(cylinders)  FROM cars_data  WHERE model IN (SELECT model                  FROM model_list                  WHERE maker IN (SELECT id                                  FROM car_makers                                  WHERE maker = 'volvo'));
SELECT COUNT(*)  FROM cars_data  WHERE accelerate > (SELECT MAX(accelerate)                      FROM cars_data                      WHERE horsepower = (SELECT MAX(horsepower)                                          FROM cars_data));
SELECT COUNT(*)  FROM cars_data  WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);
SELECT COUNT(DISTINCT c.country) FROM car_makers c GROUP BY c.country HAVING COUNT(DISTINCT c.maker) > 2;
SELECT COUNT(DISTINCT c.country) FROM countries c JOIN car_makers cm ON c.countryname = cm.country GROUP BY c.country HAVING COUNT(DISTINCT cm.id) > 2;
SELECT COUNT(*)  FROM cars_data  WHERE cylinders > 6;
SELECT COUNT(*)  FROM cars_data  WHERE cylinders > 6;
SELECT model_list.model, MAX(cars_data.horsepower) FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.cylinders = 4 AND model_list.maker = 'ford';
SELECT model FROM cars_data WHERE cylinders = 4 ORDER BY CAST(horsepower AS INTEGER) DESC LIMIT 1;
SELECT c.makeid, cm.maker FROM car_names c JOIN cars_data cd ON c.makeid = cd.id JOIN car_makers cm ON cd.id = cm.id WHERE cd.horsepower > (SELECT MIN(horsepower) FROM cars_data)  AND cd.cylinders <= 3;
SELECT makeid, make FROM car_names WHERE cylinders < 4 AND makeid NOT IN (     SELECT makeid     FROM cars_data     WHERE horsepower = (         SELECT MIN(horsepower)         FROM cars_data     ) )
SELECT MAX(mpg)  FROM cars_data  WHERE cylinders = 8 AND year < 1980;
SELECT MAX(mpg)  FROM cars_data  WHERE cylinders = 8 OR year < 1980;
SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id JOIN car_makers ON model_list.maker = car_makers.id WHERE weight < 3500 AND car_makers.maker <> 'Ford Motor Company'
SELECT DISTINCT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.weight < 3500 AND car_makers.country != 'USA'
SELECT countryname FROM countries WHERE countryname NOT IN (SELECT DISTINCT country                           FROM car_makers)
SELECT countryname FROM countries WHERE countryname NOT IN (SELECT DISTINCT country                           FROM car_makers)
SELECT cm.id, cm.maker FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker GROUP BY cm.id, cm.maker HAVING COUNT(DISTINCT ml.model) >= 2;
SELECT id, maker FROM car_makers WHERE id IN (     SELECT maker     FROM model_list     GROUP BY maker     HAVING COUNT(DISTINCT model) >= 2 ) AND id IN (     SELECT maker     FROM car_names     GROUP BY maker     HAVING COUNT(DISTINCT makeid) > 3 );
SELECT c.countryid, c.countryname FROM countries c WHERE c.countryid IN (     SELECT cm.country     FROM car_makers cm     GROUP BY cm.country     HAVING COUNT(DISTINCT cm.maker) > 3 ) OR c.countryid IN (     SELECT cm.country     FROM car_makers cm     JOIN model_list ml ON cm.id = ml.maker     JOIN car_names cn ON ml.modelid = cn.makeid     WHERE cn.model = 'fiat' )
SELECT c.countryid, c.countryname FROM countries c WHERE c.countryid IN (     SELECT cm.country     FROM car_makers cm     GROUP BY cm.country     HAVING COUNT(DISTINCT cm.maker) > 3 ) OR c.countryid IN (     SELECT DISTINCT cm.country     FROM car_makers cm     JOIN model_list ml ON cm.id = ml.maker     WHERE ml.model = 'fiat' )
SELECT country  FROM airlines  WHERE airline = 'JetBlue Airways';
SELECT DISTINCT country  FROM airlines  WHERE airline = 'Jetblue Airways';
SELECT abbreviation  FROM airlines  WHERE airline = 'JetBlue Airways';
SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';
SELECT airline, abbreviation FROM airlines WHERE country = 'USA';
SELECT airline, abbreviation FROM airlines WHERE country = 'USA';
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';
SELECT COUNT(DISTINCT airline) FROM airlines;
SELECT COUNT(DISTINCT uid) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT airline FROM airlines WHERE abbreviation = 'UAL';
SELECT airline FROM airlines WHERE abbreviation = 'UAL';
SELECT COUNT(DISTINCT uid)  FROM airlines  WHERE country = 'USA';
SELECT COUNT(DISTINCT uid)  FROM airlines  WHERE country = 'USA';
SELECT city, country FROM airports WHERE airportname = 'Alton';
SELECT city, country FROM airports WHERE airportname = 'Alton';
SELECT airportname  FROM airports  WHERE airportcode = 'AKO';
SELECT airportname FROM airports WHERE airportcode = 'AKO';
SELECT airportname  FROM airports  WHERE city = 'Aberdeen';
SELECT airportname  FROM airports  WHERE city = 'Aberdeen';
SELECT COUNT(*)  FROM flights  WHERE sourceairport = 'APG';
SELECT COUNT(*)  FROM flights  WHERE sourceairport = 'APG';
SELECT COUNT(*)  FROM flights  WHERE destairport = 'ATO';
SELECT COUNT(*)  FROM flights  WHERE destairport = 'ATO';
SELECT COUNT(*)  FROM flights  WHERE sourceairport = 'Aberdeen';
SELECT COUNT(*)  FROM flights  WHERE sourceairport = 'Aberdeen';
SELECT COUNT(*)  FROM flights  WHERE destairport = 'Aberdeen';
SELECT COUNT(*)  FROM flights  WHERE destairport = 'Aberdeen';
SELECT COUNT(*)  FROM flights  WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley';
SELECT COUNT(*)  FROM flights  WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley';
SELECT COUNT(*)  FROM flights  WHERE airline = 'JetBlue Airways';
SELECT COUNT(*)  FROM flights  WHERE airline = 100;
SELECT COUNT(*)  FROM flights  WHERE airline = 'United Airlines'  AND destairport = 'ASY';
SELECT COUNT(*)  FROM flights  WHERE airline = (SELECT uid FROM airlines WHERE abbreviation = 'UAL')  AND destairport = 'ASY';
SELECT COUNT(*)  FROM flights  WHERE airline = 'United Airlines'  AND sourceairport = 'AHD';
SELECT COUNT(*)  FROM flights  WHERE airline = (SELECT uid FROM airlines WHERE airline = 'United Airlines')  AND sourceairport = 'AHD';
SELECT COUNT(*)  FROM flights  WHERE sourceairport = 'Aberdeen'  OR destairport = 'Aberdeen';
SELECT COUNT(*)  FROM flights  WHERE airline = (SELECT uid FROM airlines WHERE airline = 'United Airlines')  AND destairport = 'Aberdeen';
SELECT destairport AS city, COUNT(*) AS num_arriving_flights FROM flights GROUP BY destairport ORDER BY num_arriving_flights DESC LIMIT 1;
SELECT destairport AS city, COUNT(destairport) AS frequency FROM flights GROUP BY destairport ORDER BY frequency DESC LIMIT 1;
SELECT sourceairport AS city, COUNT(*) AS num_departing_flights FROM flights GROUP BY sourceairport ORDER BY num_departing_flights DESC LIMIT 1;
SELECT sourceairport AS most_frequent_source_airport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT sourceairport AS airportcode FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT sourceairport AS airportcode FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT sourceairport AS airportcode FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT sourceairport AS airportcode FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT airline FROM (SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC LIMIT 1;
SELECT airline FROM airlines WHERE airline = (     SELECT airline     FROM flights     GROUP BY airline     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT abbreviation, country FROM airlines WHERE abbreviation = (     SELECT abbreviation     FROM flights     JOIN airlines ON flights.airline = airlines.uid     GROUP BY abbreviation     ORDER BY COUNT(*) ASC     LIMIT 1 )
SELECT abbreviation, country FROM airlines WHERE airline = (     SELECT airline     FROM flights     GROUP BY airline     ORDER BY COUNT(*) ASC     LIMIT 1 )
SELECT DISTINCT a.airline FROM airlines a JOIN flights f ON a.uid = f.airline WHERE f.sourceairport = 'AHD';
SELECT DISTINCT airline FROM flights WHERE sourceairport = 'AHD';
SELECT DISTINCT airline FROM flights WHERE destairport = 'AHD';
SELECT DISTINCT airline FROM flights WHERE destairport = 'AHD';
SELECT DISTINCT a.airline FROM flights f JOIN airlines a ON f.airline = a.uid WHERE f.sourceairport = 'APG' AND EXISTS (SELECT 1 FROM flights WHERE airline = f.airline AND destairport = 'CVO')
SELECT DISTINCT a.airline FROM flights f JOIN airports apg ON f.sourceairport = apg.airportcode AND apg.airportname = 'APG' JOIN airports cvo ON f.sourceairport = cvo.airportcode AND cvo.airportname = 'CVO' JOIN airlines a ON f.airline = a.uid;
SELECT DISTINCT a.airline FROM flights f JOIN airlines a ON f.airline = a.uid WHERE f.sourceairport = 'CVO' AND f.airline NOT IN (SELECT airline FROM flights WHERE sourceairport = 'APG');
SELECT DISTINCT airline FROM flights WHERE sourceairport = 'CVO' AND airline NOT IN (     SELECT airline     FROM flights     WHERE sourceairport = 'APG' )
SELECT airline FROM airlines GROUP BY airline HAVING COUNT(*) >= 10;
SELECT airline FROM airlines GROUP BY airline HAVING COUNT(*) >= 10;
SELECT airline FROM airlines GROUP BY airline HAVING COUNT(*) < 200;
SELECT airline FROM airlines WHERE uid IN (     SELECT airline     FROM flights     GROUP BY airline     HAVING COUNT(*) < 200 );
SELECT flightno  FROM flights  WHERE airline = 'United Airlines';
SELECT flightno FROM flights WHERE airline = 28;
SELECT flightno  FROM flights  WHERE sourceairport = 'APG';
SELECT flightno FROM flights WHERE sourceairport = 'APG';
SELECT flightno  FROM flights  WHERE destairport = 'APG';
SELECT flightno FROM flights WHERE destairport = 'APG';
SELECT flightno  FROM flights  WHERE sourceairport = 'Aberdeen';
SELECT flightno FROM flights WHERE sourceairport = 'Aberdeen';
SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE city = 'Aberdeen';
SELECT flightno FROM flights WHERE destairport = 'Aberdeen';
SELECT COUNT(*)  FROM flights  WHERE destairport = 'Aberdeen' OR destairport = 'Abilene';
SELECT COUNT(*)  FROM flights  WHERE destairport = 'Aberdeen' OR destairport = 'Abilene';
SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights)  AND airportcode NOT IN (SELECT destairport FROM flights);
SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights);
SELECT COUNT(employee_id) AS total_employees FROM employee;
SELECT COUNT(employee_id) FROM employee;
SELECT name FROM employee ORDER BY age ASC;
SELECT name FROM employee ORDER BY age ASC;
SELECT city, COUNT(employee_id) AS num_employees FROM employee GROUP BY city;
SELECT city, COUNT(employee_id) AS num_employees FROM employee GROUP BY city;
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(DISTINCT employee_id) > 1;
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(employee_id) > 1;
SELECT location, COUNT(shop_id) AS num_shops FROM shop GROUP BY location;
SELECT location, COUNT(shop_id) AS num_shops FROM shop GROUP BY location;
SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop);
SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop);
SELECT MIN(number_products), MAX(number_products) FROM shop;
SELECT MIN(number_products), MAX(number_products) FROM shop;
SELECT name, location, district FROM shop ORDER BY number_products DESC;
SELECT name, location, district FROM shop ORDER BY number_products DESC;
SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop);
SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop);
SELECT e.name FROM employee e JOIN evaluation ev ON e.employee_id = ev.employee_id GROUP BY e.employee_id, e.name ORDER BY COUNT(ev.year_awarded) DESC LIMIT 1;
SELECT e.name FROM employee e JOIN evaluation ev ON e.employee_id = ev.employee_id GROUP BY e.employee_id, e.name ORDER BY COUNT(ev.year_awarded) DESC LIMIT 1;
SELECT e.name FROM employee e JOIN evaluation ev ON e.employee_id = ev.employee_id WHERE ev.bonus = (SELECT MAX(bonus) FROM evaluation);
SELECT e.name FROM employee e JOIN evaluation ev ON e.employee_id = ev.employee_id ORDER BY ev.bonus DESC LIMIT 1;
SELECT e.name FROM employee e WHERE NOT EXISTS (     SELECT 1     FROM evaluation ev     WHERE e.employee_id = ev.employee_id );
SELECT e.name FROM employee e WHERE NOT EXISTS (     SELECT 1     FROM evaluation ev     WHERE e.employee_id = ev.employee_id );
SELECT s.name FROM shop s JOIN hiring h ON s.shop_id = h.shop_id GROUP BY s.name ORDER BY COUNT(h.employee_id) DESC LIMIT 1;
SELECT s.name AS shop FROM shop s JOIN hiring h ON s.shop_id = h.shop_id GROUP BY s.name ORDER BY COUNT(h.employee_id) DESC LIMIT 1;
SELECT name FROM shop WHERE shop_id NOT IN (SELECT DISTINCT shop_id FROM hiring)
SELECT s.name FROM shop s LEFT JOIN hiring h ON s.shop_id = h.shop_id WHERE h.employee_id IS NULL;
SELECT s.name AS shop_name, COUNT(h.employee_id) AS num_employees_hired FROM shop s JOIN hiring h ON s.shop_id = h.shop_id GROUP BY s.name;
SELECT s.name AS shop_name, COUNT(e.employee_id) AS num_employees FROM shop s JOIN hiring h ON s.shop_id = h.shop_id JOIN employee e ON h.employee_id = e.employee_id GROUP BY s.name;
SELECT SUM(bonus) AS total_bonus FROM evaluation;
SELECT SUM(bonus) FROM evaluation;
SELECT * FROM hiring;
SELECT *  FROM hiring;
SELECT district FROM shop GROUP BY district HAVING MIN(number_products) < 3000 AND MAX(number_products) > 10000;
SELECT district FROM shop GROUP BY district HAVING SUM(CASE WHEN number_products < 3000 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN number_products > 10000 THEN 1 ELSE 0 END) > 0;
SELECT COUNT(DISTINCT location) FROM shop;
SELECT COUNT(DISTINCT location) FROM shop;
SELECT COUNT(document_id) AS total_documents FROM documents;
SELECT COUNT(document_id) AS num_documents FROM documents;
SELECT documents.document_id, documents.document_name, documents.document_description FROM documents;
SELECT document_id, document_name, document_description FROM documents;
SELECT d.document_name, d.template_id FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE d.document_description LIKE '%w%';
SELECT d.document_name, d.template_id FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE d.document_description LIKE '%w%';
SELECT d.document_id, d.template_id, d.document_description FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE d.document_name = 'Robbin CV';
SELECT d.document_id, d.template_id, d.document_description FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE d.document_name = 'Robbin CV';
SELECT COUNT(DISTINCT template_type_code)  FROM templates;
SELECT COUNT(DISTINCT template_id)  FROM templates;
SELECT COUNT(DISTINCT d.document_id) FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'PPT';
SELECT COUNT(*)  FROM documents  JOIN templates ON documents.template_id = templates.template_id  WHERE templates.template_type_code = 'PPT';
SELECT t.template_id, COUNT(d.template_id) AS num_documents FROM templates t LEFT JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id;
SELECT template_id, COUNT(template_id)  FROM documents  GROUP BY template_id;
SELECT template_id, template_type_code FROM templates WHERE template_id = (     SELECT template_id     FROM documents     GROUP BY template_id     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT template_id, template_type_code FROM templates WHERE template_id = (     SELECT template_id     FROM documents     GROUP BY template_id     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(DISTINCT document_id) > 1;
SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(DISTINCT document_id) > 1;
SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents);
SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents);
SELECT COUNT(*) FROM templates;
SELECT COUNT(template_id) AS number_of_templates FROM templates;
SELECT template_id, version_number, template_type_code FROM templates;
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates;
SELECT DISTINCT template_type_code  FROM templates;
SELECT DISTINCT template_type_code FROM ref_template_types;
SELECT template_id  FROM templates  WHERE template_type_code IN ('PP', 'PPT');
SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT');
SELECT COUNT(*)  FROM templates  WHERE template_type_code = 'CV';
SELECT COUNT(*)  FROM templates  WHERE template_type_code = 'CV';
SELECT version_number, template_type_code  FROM templates  WHERE version_number > 5;
SELECT version_number, template_type_code FROM templates WHERE version_number > 5;
SELECT template_type_code, COUNT(*) AS number_of_templates FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY template_type_code;
SELECT template_type_code, COUNT(*) AS num_templates FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY template_type_code;
SELECT template_type_code, COUNT(*) AS num_templates FROM templates GROUP BY template_type_code ORDER BY num_templates DESC LIMIT 1;
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT template_type_code FROM ref_template_types WHERE template_type_code IN (     SELECT template_type_code     FROM templates     GROUP BY template_type_code     HAVING COUNT(template_id) < 3 );
SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (     SELECT template_type_code     FROM templates     GROUP BY template_type_code     HAVING COUNT(template_id) >= 3 );
SELECT MIN(version_number), template_type_code FROM templates;
SELECT MIN(version_number), template_type_code FROM templates;
SELECT template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id WHERE document_name = 'Data base';
SELECT t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id WHERE d.document_name = 'Data base';
SELECT d.document_name FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'BK';
SELECT DISTINCT d.document_name FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'BK';
SELECT tt.template_type_code, COUNT(d.document_id) FROM ref_template_types tt LEFT JOIN templates t ON tt.template_type_code = t.template_type_code LEFT JOIN documents d ON t.template_id = d.template_id GROUP BY tt.template_type_code;
SELECT t.template_type_code, COUNT(d.document_id) FROM ref_template_types t LEFT JOIN templates te ON t.template_type_code = te.template_type_code LEFT JOIN documents d ON te.template_id = d.template_id GROUP BY t.template_type_code;
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT DISTINCT template_type_code FROM templates)
SELECT tt.template_type_code FROM ref_template_types tt LEFT JOIN templates t ON tt.template_type_code = t.template_type_code WHERE t.template_type_code IS NULL;
SELECT template_type_code, template_type_description  FROM ref_template_types;
SELECT template_type_code, template_type_description  FROM ref_template_types;
SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = 'AD';
SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = 'AD';
SELECT template_type_code  FROM ref_template_types  WHERE template_type_description = 'Book';
SELECT template_type_code  FROM ref_template_types  WHERE template_type_description = 'Book';
SELECT DISTINCT tt.template_type_description FROM ref_template_types tt JOIN templates t ON tt.template_type_code = t.template_type_code;
SELECT DISTINCT t.template_details FROM templates t JOIN documents d ON t.template_id = d.template_id WHERE d.document_name = 'Presentation';
SELECT template_id  FROM templates  WHERE template_type_code = (SELECT template_type_code                               FROM ref_template_types                               WHERE template_type_description = 'Presentation');
SELECT template_id FROM templates WHERE template_type_code IN (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation');
SELECT COUNT(paragraph_id)  FROM paragraphs;
SELECT COUNT(paragraph_id)  FROM paragraphs;
SELECT COUNT(*)  FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  JOIN templates ON documents.template_id = templates.template_id  WHERE documents.document_name = 'Summer Show';
SELECT COUNT(paragraph_id)  FROM paragraphs  WHERE document_id = (SELECT document_id                       FROM documents                       WHERE document_name = 'Summer Show');
SELECT *  FROM paragraphs  WHERE paragraph_text LIKE '%Korea%';
SELECT *  FROM paragraphs WHERE paragraph_text LIKE '%Korea%';
SELECT paragraph_id, paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Welcome to NY';
SELECT paragraphs.paragraph_id, paragraphs.paragraph_text FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = 'Welcome to NY';
SELECT paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE document_name = 'Customer reviews';
SELECT paragraph_text  FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  JOIN templates ON documents.template_id = templates.template_id  WHERE document_name = 'Customer reviews';
SELECT d.document_id, COUNT(p.paragraph_id) AS num_paragraphs FROM documents d LEFT JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id ORDER BY d.document_id;
SELECT d.document_id, COUNT(p.paragraph_id) AS num_paragraphs FROM documents d LEFT JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id ORDER BY d.document_id;
SELECT d.document_id, d.document_name, COUNT(p.paragraph_id) AS num_paragraphs FROM documents d LEFT JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name;
SELECT d.document_id, d.document_name, COUNT(p.paragraph_id) AS num_paragraphs FROM documents d LEFT JOIN paragraphs p ON d.document_id = p.document_id WHERE d.template_id = 3 AND d.document_name = 'Summer Show' GROUP BY d.document_id, d.document_name;
SELECT document_id FROM documents GROUP BY document_id HAVING COUNT(DISTINCT paragraph_id) >= 2;
SELECT document_id FROM documents GROUP BY document_id HAVING COUNT(DISTINCT document_id) >= 2;
SELECT d.document_id, d.document_name FROM documents d JOIN (     SELECT document_id, COUNT(paragraph_id) AS num_paragraphs     FROM paragraphs     GROUP BY document_id     ORDER BY num_paragraphs DESC     LIMIT 1 ) p ON d.document_id = p.document_id;
SELECT d.document_id, d.document_name FROM documents d JOIN (     SELECT document_id, COUNT(*) AS paragraph_count     FROM paragraphs     GROUP BY document_id     ORDER BY paragraph_count DESC     LIMIT 1 ) p ON d.document_id = p.document_id;
SELECT document_id FROM documents GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT document_id FROM documents GROUP BY document_id ORDER BY COUNT(DISTINCT paragraph_id) LIMIT 1;
SELECT document_id FROM documents WHERE LENGTH(document_description) BETWEEN 1 AND 2;
SELECT DISTINCT d.document_id FROM documents d JOIN (     SELECT document_id, COUNT(paragraph_id) AS num_paragraphs     FROM paragraphs     GROUP BY document_id ) p ON d.document_id = p.document_id WHERE p.num_paragraphs >= 1 AND p.num_paragraphs <= 2;
SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland';
SELECT document_id FROM paragraphs WHERE paragraph_text LIKE '%Brazil%' INTERSECT SELECT document_id FROM paragraphs WHERE paragraph_text LIKE '%Ireland%';
SELECT COUNT(DISTINCT teacher_id)  FROM teacher;
SELECT COUNT(teacher_id) FROM teacher;
SELECT name FROM teacher ORDER BY age ASC;
SELECT name FROM teacher ORDER BY age ASC;
SELECT age, hometown FROM teacher;
SELECT age, hometown FROM teacher;
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';
SELECT name FROM teacher WHERE age IN ('32', '33');
SELECT name FROM teacher WHERE age IN ('32', '33');
SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher)
SELECT hometown FROM teacher ORDER BY age LIMIT 1;
SELECT hometown, COUNT(teacher_id) AS num_teachers FROM teacher GROUP BY hometown;
SELECT hometown, COUNT(teacher_id) AS num_teachers FROM teacher GROUP BY hometown;
SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT hometown, COUNT(hometown) AS hometown_count FROM teacher GROUP BY hometown ORDER BY hometown_count DESC LIMIT 1;
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2;
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(teacher_id) >= 2;
SELECT t.name, c.course FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id JOIN course c ON ca.course_id = c.course_id;
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE teacher.name = 'Kearsley Brown';
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;
SELECT teacher.name FROM course JOIN course_arrange ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id WHERE course.course = 'math';
SELECT DISTINCT t.name FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id JOIN course c ON ca.course_id = c.course_id WHERE c.course = 'math';
SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name;
SELECT t.name AS teacher_name, COUNT(ca.course_id) AS num_courses FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.name;
SELECT name FROM teacher WHERE teacher_id IN (     SELECT teacher_id     FROM course_arrange     GROUP BY teacher_id     HAVING COUNT(course_id) >= 2 )
SELECT DISTINCT name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.teacher_id HAVING COUNT(DISTINCT course_id) >= 2;
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange);
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange);
SELECT COUNT(*)  FROM visitor  WHERE age < 30;
SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC;
SELECT AVG(age)  FROM visitor  WHERE level_of_membership <= 4;
SELECT v.name, v.level_of_membership FROM visitor v WHERE v.level_of_membership > 4 ORDER BY v.age DESC;
SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1;
SELECT AVG(num_of_staff)  FROM museum  WHERE CAST(open_year AS INTEGER) < 2009;
SELECT open_year, num_of_staff  FROM museum  WHERE name = 'Plaza Museum';
SELECT m.name FROM museum m WHERE m.num_of_staff > (SELECT MIN(num_of_staff)                          FROM museum                          WHERE open_year > '2010');
SELECT v.id, v.name, v.age FROM visitor v JOIN visit vi ON v.id = vi.visitor_id GROUP BY v.id, v.name, v.age HAVING COUNT(DISTINCT vi.museum_id) > 1;
SELECT visitor_id AS id, name, level_of_membership FROM visitor WHERE visitor_id = (     SELECT visitor_id     FROM visit     GROUP BY visitor_id     ORDER BY SUM(total_spent) DESC     LIMIT 1 )
SELECT museum_id, name FROM museum WHERE museum_id = (     SELECT museum_id     FROM visit     GROUP BY museum_id     ORDER BY SUM(num_of_ticket) DESC     LIMIT 1 );
SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit);
SELECT v.name, v.age FROM visitor v JOIN visit vi ON v.id = vi.visitor_id WHERE vi.num_of_ticket = (SELECT MAX(num_of_ticket) FROM visit);
SELECT AVG(num_of_ticket) AS average_tickets, MAX(num_of_ticket) AS max_tickets FROM visit;
SELECT SUM(total_spent)  FROM visit  JOIN visitor ON visit.visitor_id = visitor.id  WHERE level_of_membership = 1;
SELECT v.name FROM visitor v JOIN visit vi ON v.id = vi.visitor_id JOIN museum m ON vi.museum_id = m.museum_id WHERE m.open_year < '2009' AND m.open_year > '2011' GROUP BY v.name HAVING COUNT(DISTINCT m.open_year) = 2;
SELECT COUNT(DISTINCT visitor_id)  FROM visitor  WHERE visitor_id NOT IN      (SELECT visitor_id       FROM visit       JOIN museum ON visit.museum_id = museum.museum_id       WHERE open_year > '2010');
SELECT COUNT(*)  FROM museum  WHERE open_year > '2013' OR open_year < '2008';
SELECT COUNT(player_id) AS total_players FROM players;
SELECT COUNT(DISTINCT player_id) AS total_players FROM players;
SELECT COUNT(*) AS total_matches FROM matches;
SELECT COUNT(*) AS number_of_matches FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT AVG(loser_age), AVG(winner_age) FROM matches;
SELECT AVG(loser_age), AVG(winner_age) FROM matches;
SELECT AVG(winner_rank)  FROM matches;
SELECT AVG(winner_rank)  FROM matches;
SELECT MAX(loser_rank) AS highest_rank_of_losers FROM matches;
SELECT MAX(loser_rank) AS best_rank_of_losers FROM matches;
SELECT COUNT(DISTINCT country_code) AS distinct_country_codes FROM players;
SELECT COUNT(DISTINCT country_code) AS distinct_countries FROM players;
SELECT COUNT(DISTINCT loser_name) AS num_distinct_losers FROM matches;
SELECT COUNT(DISTINCT loser_name) AS num_different_loser_names FROM matches;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_name IN     (SELECT winner_name      FROM matches      WHERE year = 2016)
SELECT DISTINCT p1.first_name || ' ' || p1.last_name FROM players p1 JOIN matches m1 ON p1.player_id = m1.winner_id JOIN matches m2 ON p1.player_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016;
SELECT COUNT(*)  FROM matches  WHERE year IN (2013, 2016);
SELECT COUNT(*)  FROM matches  WHERE year = 2013 OR year = 2016;
SELECT p.country_code, p.first_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'WTA Championships' AND m.tourney_name = 'Australian Open';
SELECT p.first_name, p.country_code FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'WTA Championships' AND m.tourney_name = 'Australian Open';
SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players);
SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players);
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT first_name || ' ' || last_name AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT first_name, country_code FROM players WHERE player_id = (     SELECT player_id     FROM rankings     ORDER BY tours DESC     LIMIT 1 )
SELECT first_name, country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY tours DESC LIMIT 1;
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT winner_name, MAX(wins) as max_wins FROM (SELECT winner_name, COUNT(*) as wins FROM matches GROUP BY winner_name) as win_count;
SELECT winner_name, MAX(winner_rank_points)  FROM matches;
SELECT winner_name FROM matches WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open');
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;
SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);
SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1;
SELECT AVG(rankings.ranking) AS average_ranking, players.first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY players.first_name;
SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name;
SELECT first_name, SUM(ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name;
SELECT COUNT(player_id), country_code FROM players GROUP BY country_code;
SELECT COUNT(player_id), country_code FROM players GROUP BY country_code;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;
SELECT country_code AS code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, SUM(tours) as total_tours FROM rankings GROUP BY ranking_date;
SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year;
SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year;
SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3;
SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3;
SELECT COUNT(DISTINCT winner_id)  FROM matches  WHERE tourney_level = 'WTA Championships'  AND winner_hand = 'L';
SELECT COUNT(*)  FROM matches  WHERE winner_hand = 'L'  AND tourney_level = 'WTA Championships';
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches);
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches);
SELECT hand, COUNT(player_id) AS num_players FROM players GROUP BY hand;
SELECT hand, COUNT(player_id)  FROM players  GROUP BY hand;
SELECT COUNT(*)  FROM ship  WHERE disposition_of_ship = 'Captured';
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, date, result FROM battle;
SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death;
SELECT AVG(injured) FROM death;
SELECT death.note, death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';
SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig' AND b.result = 'lost';
SELECT b.id, b.name FROM battle b JOIN death d ON b.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10;
SELECT s.id, s.name FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.id, s.name ORDER BY SUM(d.injured) DESC LIMIT 1;
SELECT DISTINCT name FROM battle WHERE (bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I') OR (bulgarian_commander = 'Baldwin I' AND latin_commander = 'Kaloyan');
SELECT COUNT(DISTINCT result) AS num_results FROM battle;
SELECT COUNT(DISTINCT b.id) FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.tonnage = '225' AND s.lost_in_battle IS NULL;
SELECT b.name, b.date FROM battle b JOIN ship s1 ON b.id = s1.lost_in_battle JOIN ship s2 ON b.id = s2.lost_in_battle WHERE s1.name = 'Lettice' AND s2.name = 'HMS Atalanta';
SELECT b.name, b.result, b.bulgarian_commander FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE b.location = 'English Channel' AND s.lost_in_battle IS NULL;
SELECT note FROM death WHERE note LIKE '%East%';
SELECT line_1, line_2 FROM addresses;
SELECT line_1, line_2 FROM addresses;
SELECT COUNT(course_id) AS total_courses FROM courses;
SELECT COUNT(course_id) AS total_courses FROM courses;
SELECT course_description  FROM courses  WHERE course_name = 'Math';
SELECT course_description FROM courses WHERE course_name LIKE '%math%';
SELECT zip_postcode  FROM addresses  WHERE city = 'Port Chelsea';
SELECT zip_postcode  FROM addresses  WHERE city = 'Port Chelsea';
SELECT departments.department_id, departments.department_name FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_id, departments.department_name ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1;
SELECT department_name, department_id FROM departments WHERE department_id = (     SELECT department_id     FROM degree_programs     GROUP BY department_id     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT COUNT(DISTINCT department_id)  FROM degree_programs;
SELECT COUNT(DISTINCT department_id) AS num_departments_with_degrees FROM degree_programs;
SELECT COUNT(DISTINCT degree_summary_name) AS num_degree_names FROM degree_programs;
SELECT COUNT(DISTINCT degree_summary_name) AS num_degrees FROM degree_programs;
SELECT COUNT(degree_program_id)  FROM degree_programs  WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering');
SELECT COUNT(*)  FROM degree_programs  WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering');
SELECT section_name, section_description FROM sections;
SELECT section_name, section_description FROM sections;
SELECT course_id, course_name FROM courses WHERE course_id IN (     SELECT course_id     FROM sections     GROUP BY course_id     HAVING COUNT(section_id) <= 2 );
SELECT course_id, course_name FROM courses WHERE course_id IN (     SELECT course_id     FROM sections     GROUP BY course_id     HAVING COUNT(section_id) < 2 );
SELECT section_name FROM sections ORDER BY section_name DESC;
SELECT section_name FROM sections ORDER BY section_name DESC;
SELECT semester_name, semester_id FROM (     SELECT semester_id, COUNT(student_id) AS num_students     FROM student_enrolment     GROUP BY semester_id     ORDER BY num_students DESC ) AS temp LIMIT 1;
SELECT s.semester_name, s.semester_id, COUNT(sec.student_id) AS num_students FROM semesters s JOIN student_enrolment se ON s.semester_id = se.semester_id JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id GROUP BY s.semester_name, s.semester_id ORDER BY num_students DESC LIMIT 1;
SELECT department_description  FROM departments  WHERE department_name LIKE '%the computer%';
SELECT department_description FROM departments WHERE department_name LIKE '%computer%';
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT se.degree_program_id) = 2;
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT se.degree_program_id) = 2;
SELECT s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelor';
SELECT s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelors';
SELECT degree_summary_name AS most_enrolled_program FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(student_id) DESC LIMIT 1;
SELECT degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;
SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id, degree_programs.degree_summary_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;
SELECT degree_program_id, degree_summary_name  FROM degree_programs  WHERE degree_program_id = (     SELECT degree_program_id      FROM student_enrolment      GROUP BY degree_program_id      ORDER BY COUNT(student_id) DESC      LIMIT 1 );
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_id) AS num_enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY num_enrollments DESC LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(sec.section_id) AS enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id GROUP BY s.student_id ORDER BY enrollments DESC LIMIT 1;
SELECT semester_name FROM semesters WHERE semester_id NOT IN (     SELECT DISTINCT semester_id     FROM student_enrolment )
SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)
SELECT DISTINCT c.course_name FROM courses c JOIN student_enrolment_courses sec ON c.course_id = sec.course_id;
SELECT DISTINCT c.course_name FROM courses c JOIN student_enrolment_courses sec ON c.course_id = sec.course_id;
SELECT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY course_name ORDER BY COUNT(student_enrolment_courses.student_enrolment_id) DESC LIMIT 1;
SELECT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY course_name ORDER BY COUNT(student_enrolment_courses.student_enrolment_id) DESC LIMIT 1;
SELECT last_name FROM students WHERE current_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM student_enrolment)
SELECT s.last_name FROM students s LEFT JOIN student_enrolment se ON s.student_id = se.student_id LEFT JOIN addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND se.degree_program_id IS NULL;
SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id IN (     SELECT se.student_enrolment_id     FROM student_enrolment_courses sec     JOIN student_enrolment se ON sec.student_enrolment_id = se.student_enrolment_id     GROUP BY se.student_enrolment_id     HAVING COUNT(DISTINCT sec.course_id) >= 2 )
SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id IN (     SELECT se.student_enrolment_id     FROM student_enrolment_courses sec     JOIN student_enrolment se ON sec.student_enrolment_id = se.student_enrolment_id     GROUP BY se.student_enrolment_id     HAVING COUNT(DISTINCT sec.course_id) >= 2 );
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1;
SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1;
SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN transcripts t ON s.student_id = t.transcript_id ORDER BY t.transcript_date LIMIT 1;
SELECT first_name FROM students JOIN addresses AS current_address ON students.current_address_id = current_address.address_id JOIN addresses AS permanent_address ON students.permanent_address_id = permanent_address.address_id WHERE current_address.line_1 <> permanent_address.line_1;
SELECT first_name FROM students JOIN addresses AS current_address ON students.current_address_id = current_address.address_id JOIN addresses AS permanent_address ON students.permanent_address_id = permanent_address.address_id WHERE current_address.line_1 <> permanent_address.line_1;
SELECT current_address_id AS address_id, line_1, line_2, line_3 FROM students GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT a.address_id, a.line_1, a.line_2 FROM addresses a JOIN students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2 ORDER BY COUNT(s.student_id) DESC LIMIT 1;
SELECT AVG(transcript_date) AS average_print_date FROM transcripts;
SELECT AVG(transcript_date) AS average_transcript_date FROM transcripts;
SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date LIMIT 1;
SELECT MIN(transcript_date) AS earliest_transcript_date, transcript_id FROM transcripts;
SELECT COUNT(transcript_id) AS total_transcripts FROM transcripts;
SELECT COUNT(*)  FROM transcripts;
SELECT MAX(transcript_date) AS last_transcript_release_date FROM transcripts;
SELECT MAX(transcript_date) AS last_transcript_release_date FROM transcripts;
SELECT course_enrollment_id, COUNT(course_enrollment_id) AS enrollment_count FROM student_enrollment_courses GROUP BY course_enrollment_id ORDER BY enrollment_count DESC LIMIT 1;
SELECT course_id, COUNT(course_id) AS course_count FROM student_enrolment_courses GROUP BY course_id ORDER BY course_count DESC LIMIT 1;
SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id = (     SELECT transcript_id     FROM transcript_contents     GROUP BY transcript_id     ORDER BY COUNT(*) ASC     LIMIT 1 );
SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id = (     SELECT transcript_id     FROM transcript_contents     GROUP BY transcript_id     ORDER BY COUNT(*) ASC     LIMIT 1 );
SELECT DISTINCT s.semester_name FROM semesters s JOIN student_enrolment se ON s.semester_id = se.semester_id JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name IN ('Master', 'Bachelor');
SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters') INTERSECT SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors');
SELECT COUNT(DISTINCT current_address_id) AS num_different_addresses FROM students;
SELECT DISTINCT line_1, line_2, line_3, city, zip_postcode, state_province_county, country FROM addresses WHERE address_id IN (SELECT current_address_id FROM students) OR address_id IN (SELECT permanent_address_id FROM students);
SELECT * FROM students ORDER BY last_name DESC, first_name DESC;
SELECT * FROM students ORDER BY last_name DESC;
SELECT * FROM sections WHERE section_name = 'h';
SELECT section_description FROM sections WHERE section_name = 'h';
SELECT first_name FROM students WHERE country = 'Haiti' OR cell_mobile_number = '09700166582';
SELECT first_name FROM students WHERE country = 'Haiti' OR cell_mobile_number = '09700166582';
SELECT title FROM cartoon ORDER BY title;
SELECT title FROM cartoon ORDER BY title;
SELECT title FROM cartoon WHERE directed_by = 'Ben Jones';
SELECT title FROM cartoon WHERE directed_by = 'Ben Jones';
SELECT COUNT(*)  FROM cartoon  WHERE written_by = 'Joseph Kuhr';
SELECT COUNT(*)  FROM cartoon  WHERE written_by = 'Joseph Kuhr';
SELECT cartoon.title, cartoon.directed_by FROM cartoon ORDER BY cartoon.original_air_date;
SELECT title, directed_by FROM cartoon ORDER BY original_air_date;
SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti';
SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti';
SELECT country, COUNT(id) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;
SELECT country, COUNT(id) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name, content)  FROM tv_channel;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;
SELECT content  FROM tv_channel  WHERE series_name = 'Sky Radio';
SELECT content FROM tv_channel WHERE series_name = 'Sky Radio';
SELECT package_option  FROM tv_channel  WHERE series_name = 'Sky Radio';
SELECT DISTINCT package_option FROM tv_channel WHERE series_name = 'Sky Radio';
SELECT COUNT(*)  FROM tv_channel  WHERE language = 'English';
SELECT COUNT(*)  FROM tv_channel  WHERE language = 'English';
SELECT language, COUNT(tv_channel) AS num_channels FROM tv_channel GROUP BY language ORDER BY num_channels LIMIT 1;
SELECT language, COUNT(tv_channel) AS num_channels FROM tv_channel GROUP BY language ORDER BY num_channels LIMIT 1;
SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language;
SELECT language, COUNT(DISTINCT id) AS num_channels FROM tv_channel GROUP BY language;
SELECT tv_channel.series_name FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.title = 'The Rise of the Blue Beetle!';
SELECT tv_series.series_name FROM tv_series JOIN cartoon ON tv_series.channel = cartoon.channel WHERE cartoon.title = 'The Rise of the Blue Beetle';
SELECT title FROM cartoon WHERE channel = 'Sky Radio';
SELECT c.title FROM cartoon c JOIN tv_series s ON c.channel = s.channel WHERE s.series_name = 'Sky Radio';
SELECT episode FROM tv_series ORDER BY rating;
SELECT *  FROM tv_series  ORDER BY rating;
SELECT series_name, episode, rating FROM tv_series ORDER BY CAST(rating AS DECIMAL) DESC LIMIT 3;
SELECT series_name, episode, rating FROM tv_series ORDER BY CAST(rating AS DECIMAL) DESC LIMIT 3;
SELECT MIN(share), MAX(share) FROM tv_series;
SELECT MAX(share), MIN(share) FROM tv_series;
SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime';
SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime';
SELECT weekly_rank  FROM tv_series  WHERE episode = 'A Love of a Lifetime';
SELECT weekly_rank  FROM tv_series  WHERE episode = 'A Love of a Lifetime';
SELECT tv_channel.series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.episode = 'A Love of a Lifetime';
SELECT tv_series.series_name FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = 'A Love of a Lifetime';
SELECT tv_series.episode FROM tv_series WHERE tv_series.channel = 'Sky Radio';
SELECT episode  FROM tv_series  WHERE series_name = 'Sky Radio';
SELECT directed_by, COUNT(*) AS num_cartoons FROM cartoon WHERE directed_by = 'Ben Jones' GROUP BY directed_by;
SELECT directed_by, COUNT(title) AS num_cartoons FROM cartoon GROUP BY directed_by;
SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon);
SELECT production_code, channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1;
SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 'Yes';
SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 'Yes';
SELECT DISTINCT country FROM tv_channel WHERE channel IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey');
SELECT DISTINCT country FROM cartoon WHERE written_by = 'Todd Casey';
SELECT DISTINCT country FROM tv_channel WHERE country NOT IN (     SELECT DISTINCT country     FROM cartoon     WHERE written_by = 'Todd Casey' );
SELECT DISTINCT country  FROM tv_channel  WHERE country NOT IN  (SELECT country  FROM cartoon  WHERE written_by = 'Todd Casey');
SELECT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.channel = cartoon.channel WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang') AND cartoon.content = 'cartoon';
SELECT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Michael Chang';
SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'English';
SELECT pixel_aspect_ratio_par, country  FROM tv_channel  WHERE language != 'English';
SELECT DISTINCT channel FROM tv_channel GROUP BY country HAVING COUNT(channel) > 2;
SELECT id FROM tv_channel GROUP BY id HAVING COUNT(id) > 2;
SELECT DISTINCT c.channel FROM tv_channel c WHERE c.id NOT IN (     SELECT DISTINCT ca.channel     FROM cartoon ca     WHERE ca.directed_by = 'Ben Jones' );
SELECT DISTINCT c.channel FROM tv_channel c LEFT JOIN cartoon ca ON c.id = ca.channel WHERE ca.directed_by != 'Ben Jones' OR ca.directed_by IS NULL;
SELECT DISTINCT tv_channel.package_option FROM tv_channel LEFT JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.directed_by != 'Ben Jones' OR cartoon.directed_by IS NULL;
SELECT DISTINCT package_option  FROM tv_channel  WHERE id NOT IN      (SELECT channel       FROM cartoon       WHERE directed_by = 'Ben Jones');
SELECT COUNT(poker_player_id) AS total_poker_players FROM poker_player;
SELECT COUNT(poker_player_id)  FROM poker_player;
SELECT earnings FROM poker_player ORDER BY earnings DESC;
SELECT earnings FROM poker_player ORDER BY earnings DESC;
SELECT poker_player.final_table_made, poker_player.best_finish FROM poker_player WHERE poker_player.final_table_made = 42.0 AND poker_player.best_finish = 1.0;
SELECT final_table_made, best_finish FROM poker_player;
SELECT AVG(earnings)  FROM poker_player;
SELECT AVG(earnings)  FROM poker_player;
SELECT money_rank  FROM poker_player  ORDER BY earnings DESC  LIMIT 1;
SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1;
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;
SELECT MAX(final_table_made)  FROM poker_player  WHERE earnings < 200000;
SELECT name FROM people;
SELECT name FROM people;
SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id WHERE pp.earnings > 300000;
SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id WHERE pp.earnings > 300000;
SELECT p.name FROM poker_player p ORDER BY p.final_table_made ASC;
SELECT p.name FROM poker_player p ORDER BY p.final_table_made ASC;
SELECT p.birth_date FROM poker_player p JOIN people pe ON p.people_id = pe.people_id ORDER BY p.earnings LIMIT 1;
SELECT birth_date FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY earnings LIMIT 1;
SELECT money_rank  FROM poker_player  JOIN people ON poker_player.people_id = people.people_id  ORDER BY height DESC  LIMIT 1;
SELECT money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY height DESC LIMIT 1;
SELECT AVG(earnings)  FROM poker_player  JOIN people ON poker_player.people_id = people.people_id  WHERE height > 200;
SELECT AVG(earnings)  FROM poker_player  JOIN people ON poker_player.people_id = people.people_id  WHERE height > 200;
SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id ORDER BY pp.earnings DESC;
SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id ORDER BY pp.earnings DESC;
SELECT nationality, COUNT(*)  FROM people  GROUP BY nationality;
SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality;
SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT people_id) >= 2;
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(people_id) >= 2;
SELECT name, birth_date FROM people ORDER BY name;
SELECT name, birth_date FROM people ORDER BY name;
SELECT name FROM people WHERE nationality != 'Russia';
SELECT name FROM people WHERE nationality <> 'Russia';
SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player);
SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player);
SELECT COUNT(DISTINCT nationality) AS distinct_nationalities FROM people;
SELECT COUNT(DISTINCT nationality) AS num_of_nationalities FROM people;
SELECT COUNT(DISTINCT state) AS number_of_states FROM area_code_state;
SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC;
SELECT vote_id, phone_number, state FROM votes;
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM area_code_state;
SELECT MAX(created)  FROM votes  WHERE state = 'CA';
SELECT contestant_name FROM contestants WHERE contestant_name <> 'Jessie Alloway';
SELECT DISTINCT state, created FROM votes;
SELECT c.contestant_number, c.contestant_name FROM contestants c JOIN votes v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name HAVING COUNT(v.vote_id) >= 2;
SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (     SELECT contestant_number     FROM votes     GROUP BY contestant_number     ORDER BY COUNT(*) ASC     LIMIT 1 );
SELECT COUNT(*)  FROM votes  WHERE state = 'NY' OR state = 'CA';
SELECT COUNT(DISTINCT contestant_number)  FROM contestants  WHERE contestant_number NOT IN (SELECT contestant_number FROM votes);
SELECT area_code_state[1] AS area_code FROM (SELECT area_code_state[1], COUNT(vote_id) AS total_votes FROM votes GROUP BY area_code_state[1] ORDER BY total_votes DESC LIMIT 1;
SELECT created, state, phone_number FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number WHERE contestant_name = 'Tabatha Gehling';
SELECT area_code_number FROM votes WHERE contestant_number IN (     SELECT contestant_number     FROM contestants     WHERE contestant_name = 'Tabatha Gehling'     OR contestant_name = 'Kelly Clauss'     GROUP BY contestant_number     HAVING COUNT(DISTINCT contestant_name) = 2 )
SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%';
SELECT name  FROM country  WHERE indepyear > 1950;
SELECT name FROM country WHERE indepyear > 1950;
SELECT COUNT(*)  FROM country  WHERE governmentform = 'Republic';
SELECT COUNT(*)  FROM country  WHERE governmentform LIKE '%Republic%';
SELECT SUM(surfacearea)  FROM country  WHERE region = 'Caribbean';
SELECT SUM(surfacearea)  FROM country  WHERE continent = 'North America'  OR continent = 'South America';
SELECT continent FROM country WHERE name = 'Anguilla';
SELECT continent  FROM country  WHERE code = 'AIA'
SELECT region FROM country WHERE name = 'Kabul';
SELECT region  FROM country  WHERE name = 'Kabul';
SELECT language FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1;
SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND isofficial = 'T';
SELECT population, lifeexpectancy  FROM country  WHERE name = 'Brazil';
SELECT population, lifeexpectancy  FROM country  WHERE name = 'Brazil';
SELECT region, population  FROM country  WHERE name = 'Angola';
SELECT country.region, country.population FROM country WHERE country.name = 'Angola';
SELECT AVG(lifeexpectancy)  FROM country  WHERE region = 'Central Africa';
SELECT AVG(lifeexpectancy)  FROM country  WHERE continent = 'Africa'  AND region = 'Central Africa';
SELECT name  FROM country  WHERE lifeexpectancy = (SELECT MIN(lifeexpectancy)                          FROM country                          WHERE continent = 'Asia');
SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy LIMIT 1;
SELECT SUM(population), MAX(gnp)  FROM country  WHERE continent = 'Asia';
SELECT COUNT(*) AS total_population, MAX(gnp) AS largest_gnp FROM country WHERE continent = 'Asia';
SELECT AVG(lifeexpectancy)  FROM country  WHERE continent = 'Africa' AND governmentform LIKE '%Republic%';
SELECT AVG(lifeexpectancy)  FROM country  WHERE continent = 'Africa' AND governmentform = 'Republic';
SELECT SUM(surfacearea)  FROM country  WHERE continent IN ('Asia', 'Europe');
SELECT SUM(surfacearea)  FROM country  WHERE continent = 'Asia' OR continent = 'Europe';
SELECT SUM(population)  FROM city  WHERE district = 'Gelderland';
SELECT SUM(population)  FROM city  WHERE district = 'Gelderland';
SELECT AVG(gnp), SUM(population)  FROM country  WHERE governmentform LIKE '%US territory%';
SELECT AVG(gnp), SUM(population)  FROM country  WHERE continent = 'North America'  AND governmentform LIKE '%US territory%';
SELECT COUNT(DISTINCT language)  FROM countrylanguage;
SELECT COUNT(DISTINCT language)  FROM countrylanguage;
SELECT COUNT(DISTINCT governmentform)  FROM country  WHERE continent = 'Africa';
SELECT COUNT(DISTINCT governmentform)  FROM country  WHERE continent = 'Africa';
SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode = 'ABW';
SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode = 'ABW';
SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode = 'AF';
SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode = 'AF';
SELECT country.name FROM country JOIN (     SELECT countrycode, COUNT(language) AS num_languages     FROM countrylanguage     GROUP BY countrycode     ORDER BY num_languages DESC     LIMIT 1 ) AS max_languages ON country.code = max_languages.countrycode;
SELECT country.name FROM country JOIN (     SELECT countrycode, COUNT(language) AS num_languages     FROM countrylanguage     GROUP BY countrycode     ORDER BY num_languages DESC     LIMIT 1 ) AS max_languages ON country.code = max_languages.countrycode;
SELECT continent FROM country WHERE continent != 'Antarctica' GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1;
SELECT continent, COUNT(language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent ORDER BY num_languages DESC LIMIT 1;
SELECT COUNT(*)  FROM countrylanguage  WHERE language IN ('English', 'Dutch')  GROUP BY countrycode  HAVING COUNT(DISTINCT language) = 2;
SELECT COUNT(DISTINCT countrycode)  FROM countrylanguage  WHERE language IN ('English', 'Dutch');
SELECT c1.name FROM countrylanguage cl1 JOIN country c1 ON cl1.countrycode = c1.code WHERE cl1.language IN ('English', 'French') GROUP BY c1.name HAVING COUNT(DISTINCT cl1.language) = 2;
SELECT c1.name FROM countrylanguage cl1 JOIN countrylanguage cl2 ON cl1.countrycode = cl2.countrycode JOIN country c1 ON cl1.countrycode = c1.code JOIN country c2 ON cl2.countrycode = c2.code WHERE cl1.language = 'English' AND cl2.language = 'French' AND c1.name != c2.name;
SELECT c1.name FROM countrylanguage cl1 JOIN countrylanguage cl2 ON cl1.countrycode = cl2.countrycode JOIN country c1 ON cl1.countrycode = c1.code JOIN country c2 ON cl2.countrycode = c2.code WHERE cl1.language = 'English' AND cl2.language = 'French' AND c1.name <> c2.name;
SELECT c.name FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language IN ('English', 'French') GROUP BY c.name HAVING COUNT(DISTINCT cl.language) = 2;
SELECT COUNT(DISTINCT continent)  FROM country  WHERE code IN      (SELECT countrycode       FROM countrylanguage       WHERE language = 'Chinese'       AND isofficial = 'T');
SELECT COUNT(DISTINCT continent)  FROM country  WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese');
SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch'));
SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch' OR language = 'English');
SELECT name  FROM country  WHERE countrycode IN      (SELECT countrycode       FROM countrylanguage       WHERE language = 'English' OR language = 'Dutch');
SELECT name  FROM country  WHERE code IN      (SELECT countrycode       FROM countrylanguage       WHERE language = 'English' OR language = 'Dutch');
SELECT language FROM countrylanguage WHERE continent = 'Asia' GROUP BY language ORDER BY SUM(percentage) DESC LIMIT 1;
SELECT language, COUNT(countrycode) AS num_countries FROM countrylanguage WHERE continent = 'Asia' GROUP BY language ORDER BY num_countries DESC LIMIT 1;
SELECT language FROM countrylanguage WHERE isofficial = 'T' GROUP BY language HAVING COUNT(DISTINCT countrycode) = 1 AND governmentform LIKE '%Republic%';
SELECT language FROM countrylanguage WHERE language IN (     SELECT language     FROM countrylanguage     GROUP BY language     HAVING COUNT(DISTINCT countrycode) = 1 ) AND countrycode IN (     SELECT code     FROM country     WHERE governmentform LIKE '%Republic%' )
SELECT city.name, city.population FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' AND countrylanguage.isofficial = 'T' ORDER BY city.population DESC LIMIT 1;
SELECT city.name, city.population FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1;
SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1;
SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1;
SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN      (SELECT countrycode       FROM countrylanguage       WHERE language = 'English' AND isofficial = 'T');
SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN      (SELECT countrycode       FROM countrylanguage       WHERE language = 'English' AND isofficial = 'T');
SELECT SUM(population)  FROM country  WHERE code NOT IN      (SELECT countrycode       FROM countrylanguage       WHERE language = 'English');
SELECT COUNT(DISTINCT city.population)  FROM city  JOIN country ON city.countrycode = country.code  WHERE country.code NOT IN  (SELECT countrycode FROM countrylanguage WHERE language = 'English');
SELECT language FROM countrylanguage WHERE countrycode = (     SELECT code     FROM country     WHERE headofstate = 'Beatrix' ) AND isofficial = 'T';
SELECT language FROM countrylanguage WHERE countrycode = (     SELECT code     FROM country     WHERE headofstate = 'Beatrix' ) AND isofficial = 'T';
SELECT COUNT(DISTINCT language)  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE indepyear < 1930;
SELECT COUNT(DISTINCT language)  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE indepyear < 1930;
SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe');
SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe');
SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population)                   FROM country                   WHERE continent = 'Asia');
SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia');
SELECT name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa');
SELECT name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa');
SELECT code FROM country WHERE code NOT IN      (SELECT countrycode      FROM countrylanguage      WHERE language = 'English');
SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');
SELECT DISTINCT countrycode  FROM country  WHERE countrycode IN      (SELECT countrycode       FROM countrylanguage       WHERE language <> 'English');
SELECT DISTINCT countrycode FROM countrylanguage WHERE language <> 'English';
SELECT code  FROM country  WHERE governmentform != 'Republic'  AND code NOT IN  (SELECT countrycode  FROM countrylanguage  WHERE language = 'English')
SELECT code FROM country WHERE governmentform != 'Republic'  AND code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe'  AND countrylanguage.language <> 'English' GROUP BY city.name;
SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode JOIN country ON city.countrycode = country.code WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English' AND countrylanguage.isofficial = 'T';
SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T';
SELECT DISTINCT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode JOIN country ON city.countrycode = country.code WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T';
SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country);
SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country);
SELECT population, name, headofstate FROM country WHERE surfacearea = (SELECT MAX(surfacearea) FROM country);
SELECT name, population, headofstate FROM country WHERE surfacearea = (SELECT MAX(surfacearea) FROM country);
SELECT country.name, COUNT(countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code HAVING num_languages >= 3;
SELECT country.name, COUNT(countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING num_languages > 2;
SELECT district, COUNT(city)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district;
SELECT district, COUNT(city)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district;
SELECT governmentform, SUM(population) as total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform;
SELECT governmentform, SUM(population)  FROM country  WHERE lifeexpectancy > 72  GROUP BY governmentform;
SELECT AVG(lifeexpectancy) AS average_life_expectancy, SUM(population) AS total_population, continent FROM country GROUP BY continent HAVING average_life_expectancy < 72;
SELECT c.continent, SUM(c.population) AS total_population, AVG(c.lifeexpectancy) AS average_life_expectancy FROM country c GROUP BY c.continent HAVING average_life_expectancy < 72;
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;
SELECT name  FROM country  ORDER BY population DESC  LIMIT 3;
SELECT name FROM country ORDER BY population DESC LIMIT 3;
SELECT name FROM country ORDER BY population LIMIT 3;
SELECT name FROM country ORDER BY population LIMIT 3;
SELECT COUNT(*)  FROM country  WHERE continent = 'Asia';
SELECT COUNT(*)  FROM country  WHERE continent = 'Asia';
SELECT name  FROM country  WHERE continent = 'Europe' AND population = 80000;
SELECT name  FROM country  WHERE continent = 'Europe' AND population = 80000;
SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_area FROM country WHERE continent = 'North America' AND surfacearea > 3000;
SELECT SUM(c.population) AS total_population, AVG(c.surfacearea) AS average_surface_area FROM country c WHERE c.continent = 'North America' AND c.surfacearea > 3000;
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1;
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1;
SELECT countrylanguage.language, countrylanguage.countrycode, MAX(countrylanguage.percentage)  FROM countrylanguage  GROUP BY countrycode;
SELECT c.code, cl.language FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = c.code);
SELECT COUNT(DISTINCT countrycode)  FROM countrylanguage  WHERE language = 'Spanish' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish');
SELECT COUNT(DISTINCT countrycode)  FROM countrylanguage  WHERE language = 'Spanish' AND isofficial = 'T';
SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' ORDER BY percentage DESC LIMIT 1;
SELECT code FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T';
SELECT COUNT(conductor_id) AS conductor_count FROM conductor;
SELECT COUNT(conductor_id) AS number_of_conductors FROM conductor;
SELECT name FROM conductor ORDER BY age ASC;
SELECT name FROM conductor ORDER BY age;
SELECT name FROM conductor WHERE nationality != 'USA';
SELECT name FROM conductor WHERE nationality != 'USA';
SELECT record_company FROM orchestra WHERE record_company = 'Columbia Masterworks' ORDER BY year_of_founded DESC;
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;
SELECT AVG(attendance) FROM show;
SELECT AVG(attendance) FROM show;
SELECT MAX(share), MIN(share)  FROM performance  WHERE type != 'Live final';
SELECT MAX(share), MIN(share) FROM performance WHERE type <> 'Live final';
SELECT COUNT(DISTINCT nationality)  FROM conductor;
SELECT COUNT(DISTINCT nationality) AS num_different_nationalities FROM conductor;
SELECT name FROM conductor ORDER BY year_of_work DESC;
SELECT name FROM conductor ORDER BY year_of_work DESC;
SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1;
SELECT name FROM conductor GROUP BY name ORDER BY SUM(year_of_work) DESC LIMIT 1;
SELECT c.name, o.orchestra FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id;
SELECT c.name AS conductor, o.orchestra AS orchestra FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id;
SELECT c.name FROM conductor c GROUP BY c.name HAVING COUNT(DISTINCT c.conductor_id) > 1;
SELECT c.name FROM conductor c GROUP BY c.name HAVING COUNT(DISTINCT c.orchestra_id) > 1;
SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name ORDER BY COUNT(o.orchestra_id) DESC LIMIT 1;
SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name ORDER BY COUNT(o.orchestra_id) DESC LIMIT 1;
SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id WHERE o.year_of_founded > 2008;
SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id WHERE o.year_of_founded > 2008;
SELECT record_company, COUNT(orchestra_id) AS num_orchestras FROM orchestra GROUP BY record_company;
SELECT record_company, COUNT(DISTINCT orchestra_id) AS num_orchestras_managed FROM orchestra GROUP BY record_company HAVING record_company = 'Columbia Masterworks';
SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) ASC;
SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC;
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(DISTINCT orchestra_id) DESC LIMIT 1;
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(orchestra_id) DESC LIMIT 1;
SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance);
SELECT orchestra  FROM orchestra  WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance);
SELECT DISTINCT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT DISTINCT record_company FROM orchestra WHERE year_of_founded > 2003;
SELECT record_company FROM orchestra WHERE year_of_founded < 2003 AND record_company IN (     SELECT record_company     FROM orchestra     WHERE year_of_founded > 2003 );
SELECT COUNT(*)  FROM orchestra  WHERE major_record_format = 'CD' OR major_record_format = 'DVD';
SELECT COUNT(*)  FROM orchestra  WHERE major_record_format = 'CD' OR major_record_format = 'DVD';
SELECT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING COUNT(orchestra_id) > 1;
SELECT year_of_founded FROM orchestra WHERE orchestra_id IN (     SELECT orchestra_id     FROM performance     GROUP BY orchestra_id     HAVING COUNT(*) > 1 );
SELECT COUNT(*)  FROM highschooler  WHERE grade = 9;
SELECT COUNT(*)  FROM highschooler  WHERE grade = 9;
SELECT name, grade FROM highschooler;
SELECT name, grade FROM highschooler;
SELECT grade  FROM highschooler;
SELECT grade FROM highschooler;
SELECT grade  FROM highschooler  WHERE name = 'Kyle';
SELECT grade FROM highschooler WHERE name = 'Kyle';
SELECT name FROM highschooler WHERE grade = 10;
SELECT name FROM highschooler WHERE grade = 10;
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT COUNT(*)  FROM highschooler  WHERE grade IN (9, 10);
SELECT COUNT(*)  FROM highschooler  WHERE grade IN (9, 10);
SELECT grade, COUNT(*) AS num_highschoolers FROM highschooler GROUP BY grade;
SELECT grade, COUNT(id)  FROM highschooler  GROUP BY grade;
SELECT grade, COUNT(*) AS num_highschoolers FROM highschooler GROUP BY grade ORDER BY num_highschoolers DESC LIMIT 1;
SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade, COUNT(id)  FROM highschooler  GROUP BY grade  HAVING COUNT(id) >= 4;
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT student_id, COUNT(friend_id) AS num_of_friends FROM friend GROUP BY student_id;
SELECT student_id, COUNT(friend_id) AS num_friends FROM friend GROUP BY student_id;
SELECT h.name, COUNT(f.friend_id) AS num_friends FROM highschooler h LEFT JOIN friend f ON h.id = f.student_id GROUP BY h.name HAVING h.name = 'Haley';
SELECT h.name, COUNT(f.friend_id) AS num_friends FROM highschooler h LEFT JOIN friend f ON h.id = f.student_id GROUP BY h.name HAVING h.name = 'Haley';
SELECT h.name FROM highschooler h JOIN (     SELECT student_id, COUNT(friend_id) AS num_friends     FROM friend     GROUP BY student_id     ORDER BY num_friends DESC     LIMIT 1 ) f ON h.id = f.student_id;
SELECT h.name FROM highschooler h JOIN (     SELECT student_id, COUNT(friend_id) AS num_friends     FROM friend     GROUP BY student_id     ORDER BY num_friends DESC     LIMIT 1 ) f ON h.id = f.student_id;
SELECT h1.name FROM highschooler h1 JOIN friend f ON h1.id = f.student_id GROUP BY h1.id HAVING COUNT(f.friend_id) >= 3;
SELECT h1.name FROM highschooler h1 JOIN friend f ON h1.id = f.student_id GROUP BY h1.id HAVING COUNT(f.friend_id) >= 3;
SELECT h1.name FROM highschooler h1, highschooler h2, friend f WHERE h1.id = f.friend_id AND h2.id = f.student_id AND h2.name = 'Kyle';
SELECT h2.name FROM highschooler h1, highschooler h2, friend f WHERE h1.name = 'Kyle' AND h1.id = f.student_id AND h2.id = f.friend_id;
SELECT COUNT(friend_id)  FROM friend  WHERE student_id = (SELECT id                      FROM highschooler                      WHERE name = 'Kyle');
SELECT COUNT(*)  FROM friend  WHERE student_id = (SELECT id                      FROM highschooler                      WHERE name = 'Kyle');
SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)
SELECT h.id FROM highschooler h LEFT JOIN friend f ON h.id = f.student_id WHERE f.friend_id IS NULL;
SELECT h.name FROM highschooler h LEFT JOIN friend f ON h.id = f.student_id WHERE f.friend_id IS NULL;
SELECT h.name FROM highschooler h LEFT JOIN friend f ON h.id = f.student_id WHERE f.friend_id IS NULL;
SELECT DISTINCT h1.id FROM highschooler h1 JOIN friend f ON h1.id = f.student_id JOIN likes l ON h1.id = l.student_id;
SELECT DISTINCT f1.student_id FROM friend f1 JOIN likes l ON f1.student_id = l.student_id WHERE f1.student_id IN (SELECT student_id FROM friend) AND f1.student_id IN (SELECT student_id FROM likes);
SELECT h1.name FROM highschooler h1 JOIN friend f ON h1.id = f.student_id JOIN likes l ON h1.id = l.student_id WHERE h1.id IN (SELECT student_id FROM friend) AND h1.id IN (SELECT liked_id FROM likes);
SELECT h1.name FROM highschooler h1 JOIN friend f ON h1.id = f.student_id JOIN likes l ON h1.id = l.student_id WHERE h1.id IN (     SELECT student_id     FROM friend     INTERSECT     SELECT student_id     FROM likes );
SELECT student_id, COUNT(liked_id) AS num_likes FROM likes GROUP BY student_id;
SELECT student_id, COUNT(liked_id) AS num_likes FROM likes GROUP BY student_id;
SELECT h.name, COUNT(l.liked_id) AS num_likes FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.name HAVING COUNT(l.liked_id) > 0;
SELECT h.name, COUNT(l.liked_id) AS num_likes FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.name HAVING COUNT(l.liked_id) > 0;
SELECT h.name FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.id ORDER BY COUNT(l.liked_id) DESC LIMIT 1;
SELECT h.name FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.id ORDER BY COUNT(l.liked_id) DESC LIMIT 1;
SELECT h.name FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.id, h.name HAVING COUNT(l.liked_id) >= 2;
SELECT h.name FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY l.student_id HAVING COUNT(l.liked_id) >= 2;
SELECT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id WHERE h.grade > 5 GROUP BY h.id HAVING COUNT(f.friend_id) >= 2;
SELECT h1.name FROM highschooler h1 JOIN friend f ON h1.id = f.student_id WHERE h1.grade > 5 GROUP BY h1.id HAVING COUNT(f.friend_id) >= 2;
SELECT COUNT(*)  FROM likes  WHERE student_id = (SELECT id                      FROM highschooler                      WHERE name = 'Kyle');
SELECT COUNT(*)  FROM likes  WHERE student_id = (SELECT id                      FROM highschooler                      WHERE name = 'Kyle');
SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT DISTINCT student_id FROM friend UNION SELECT DISTINCT friend_id FROM friend);
SELECT AVG(h.grade) FROM highschooler h WHERE h.id IN (SELECT f.student_id FROM friend f);
SELECT MIN(grade)  FROM highschooler  WHERE id NOT IN (SELECT student_id FROM friend);
SELECT MIN(grade)  FROM highschooler  WHERE id NOT IN (SELECT student_id FROM friend);
SELECT DISTINCT o.state FROM owners o JOIN professionals p ON o.state = p.state;
SELECT DISTINCT o.state FROM owners o JOIN professionals p ON o.state = p.state;
SELECT AVG(age)  FROM dogs  WHERE dog_id IN (SELECT dog_id FROM treatments)
SELECT AVG(age)  FROM dogs  WHERE dog_id IN (SELECT dog_id FROM treatments)
SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (     SELECT professional_id     FROM treatments     GROUP BY professional_id     HAVING COUNT(*) > 2 );
SELECT professional_id AS id, last_name, cell_number AS cell_phone FROM professionals WHERE state = 'Indiana' OR professional_id IN (     SELECT professional_id     FROM treatments     GROUP BY professional_id     HAVING COUNT(*) > 2 );
SELECT d.name FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment <= 1000;
SELECT d.name FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id JOIN charges c ON t.cost_of_treatment <= 1000;
SELECT DISTINCT p.first_name FROM professionals p WHERE p.first_name NOT IN (SELECT d.name FROM dogs d) AND p.first_name NOT IN (SELECT o.first_name FROM owners o);
SELECT DISTINCT p.first_name FROM professionals p WHERE p.first_name NOT IN (     SELECT DISTINCT d.name     FROM dogs d )
SELECT p.professional_id, p.role_code, p.email_address FROM professionals p WHERE p.professional_id NOT IN (     SELECT DISTINCT t.professional_id     FROM treatments t     JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code     WHERE tt.treatment_type_description = 'operate on dogs' );
SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (     SELECT DISTINCT professional_id     FROM treatments     INNER JOIN dogs ON treatments.dog_id = dogs.dog_id     WHERE dogs.breed_code != 'dog' );
SELECT owner_id, first_name, last_name FROM owners WHERE owner_id = (     SELECT owner_id     FROM dogs     GROUP BY owner_id     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT owner_id, first_name, last_name FROM owners WHERE owner_id = (SELECT owner_id                   FROM dogs                   GROUP BY owner_id                   ORDER BY COUNT(*) DESC                   LIMIT 1);
SELECT professional_id, role_code, first_name FROM professionals GROUP BY professional_id, role_code, first_name HAVING COUNT(DISTINCT treatment_id) >= 2;
SELECT professional_id, role_code, first_name FROM professionals GROUP BY professional_id, role_code, first_name HAVING COUNT(DISTINCT treatment_id) >= 2;
SELECT breed_name FROM breeds WHERE breed_code = (     SELECT breed_code     FROM dogs     GROUP BY breed_code     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT breed_name FROM breeds WHERE breed_code = (     SELECT breed_code     FROM dogs     GROUP BY breed_code     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;
SELECT o.owner_id, o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatment_types.treatment_type_description ORDER BY SUM(treatments.cost_of_treatment) LIMIT 1;
SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatment_types.treatment_type_description ORDER BY SUM(treatments.cost_of_treatment) LIMIT 1;
SELECT owner_id, zip_code FROM owners WHERE owner_id IN (     SELECT owner_id     FROM dogs     GROUP BY owner_id     ORDER BY SUM(weight) DESC     LIMIT 1 );
SELECT o.owner_id, o.zip_code FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN treatments t ON d.dog_id = t.dog_id JOIN charges c ON t.cost_of_treatment = c.charge_amount GROUP BY o.owner_id, o.zip_code ORDER BY SUM(c.charge_amount) DESC LIMIT 1;
SELECT professional_id, cell_number FROM professionals GROUP BY professional_id, cell_number HAVING COUNT(DISTINCT treatment_type_code) >= 2;
SELECT professional_id, cell_number FROM professionals WHERE professional_id IN (     SELECT professional_id     FROM treatments     GROUP BY professional_id     HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
SELECT p.first_name, p.last_name FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);
SELECT DISTINCT p.first_name, p.last_name FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);
SELECT t.date_of_treatment, p.first_name FROM treatments t JOIN professionals p ON t.professional_id = p.professional_id;
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id;
SELECT t.cost_of_treatment, tt.treatment_type_description FROM treatments t JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT o.first_name, o.last_name, s.size_description FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN sizes s ON d.size_code = s.size_code;
SELECT o.first_name, o.last_name, s.size_description FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN sizes s ON d.size_code = s.size_code;
SELECT o.first_name, d.name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id;
SELECT o.first_name, d.name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id;
SELECT d.name, t.date_of_treatment FROM dogs d JOIN breeds b ON d.breed_code = b.breed_code JOIN treatments t ON d.dog_id = t.dog_id WHERE b.breed_code = (SELECT breed_code FROM breeds ORDER BY breed_code LIMIT 1) ORDER BY t.date_of_treatment;
SELECT d.name, t.date_of_treatment FROM dogs d JOIN breeds b ON d.breed_code = b.breed_code JOIN treatments t ON d.dog_id = t.dog_id GROUP BY d.name ORDER BY COUNT(*) ASC LIMIT 1;
SELECT o.first_name, d.name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';
SELECT o.first_name, d.name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia'
SELECT date_arrived, date_departed FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
SELECT date_arrived, date_departed FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
SELECT o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs)
SELECT o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs);
SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT date_arrived, date_departed FROM dogs;
SELECT date_arrived, date_departed FROM dogs;
SELECT COUNT(DISTINCT dog_id)  FROM treatments;
SELECT COUNT(DISTINCT dog_id)  FROM treatments;
SELECT COUNT(DISTINCT professional_id)  FROM treatments  WHERE treatment_type_code = 'dog';
SELECT COUNT(DISTINCT professional_id)  FROM professionals  WHERE professional_id IN (SELECT DISTINCT professional_id                            FROM treatments                            WHERE treatment_type_code = 'dog');
SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%';
SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%';
SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%';
SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%';
SELECT COUNT(*)  FROM dogs  WHERE age < (SELECT AVG(age) FROM dogs);
SELECT COUNT(*)  FROM dogs  WHERE age < (SELECT AVG(age) FROM dogs);
SELECT MAX(cost_of_treatment)  FROM treatments;
SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT COUNT(*)  FROM dogs  WHERE dog_id NOT IN (SELECT dog_id FROM treatments);
SELECT COUNT(*)  FROM dogs  WHERE dog_id NOT IN (SELECT dog_id FROM treatments);
SELECT COUNT(DISTINCT owner_id)  FROM owners  WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM dogs)
SELECT COUNT(DISTINCT owner_id)  FROM owners  WHERE owner_id NOT IN (SELECT owner_id FROM dogs);
SELECT COUNT(DISTINCT professional_id)  FROM professionals  WHERE professional_id NOT IN (SELECT professional_id FROM treatments WHERE treatment_type_code = 'dog');
SELECT COUNT(DISTINCT professional_id)  FROM professionals  WHERE professional_id NOT IN  (SELECT DISTINCT professional_id  FROM treatments  INNER JOIN dogs ON treatments.dog_id = dogs.dog_id  WHERE dogs.breed_code = 'dog_breed_code');
SELECT name, age, weight FROM dogs WHERE abandoned_yn = '1';
SELECT name, age, weight FROM dogs WHERE abandoned_yn = '1';
SELECT AVG(age) FROM dogs;
SELECT AVG(age) FROM dogs;
SELECT MAX(age)  FROM dogs;
SELECT MAX(age)  FROM dogs;
SELECT charge_type, charge_amount FROM charges WHERE charge_type = 'Daily Accommodation';
SELECT charge_type, charge_amount FROM charges;
SELECT MAX(charge_amount)  FROM charges;
SELECT MAX(charge_amount)  FROM charges;
SELECT email_address, cell_number, home_phone FROM professionals;
SELECT email_address, cell_number, home_phone FROM professionals;
SELECT DISTINCT d.breed_code, s.size_code FROM dogs d, sizes s;
SELECT DISTINCT d.breed_code, s.size_code FROM dogs d JOIN sizes s ON d.size_code = s.size_code;
SELECT p.first_name, t.treatment_type_description FROM professionals p JOIN treatments tr ON p.professional_id = tr.professional_id JOIN treatment_types t ON tr.treatment_type_code = t.treatment_type_code;
SELECT p.first_name, tt.treatment_type_description FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code WHERE p.first_name = 'Monte';
SELECT COUNT(DISTINCT singer_id) AS total_singers FROM singer;
SELECT COUNT(DISTINCT singer_id) AS count_of_singers FROM singer;
SELECT name FROM singer ORDER BY net_worth_millions ASC;
SELECT name FROM singer ORDER BY net_worth_millions ASC;
SELECT birth_year, citizenship FROM singer;
SELECT birth_year, citizenship FROM singer;
SELECT name FROM singer WHERE citizenship != 'France';
SELECT name FROM singer WHERE citizenship <> 'French';
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949;
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949;
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;
SELECT citizenship, COUNT(DISTINCT singer_id)  FROM singer  GROUP BY citizenship;
SELECT citizenship, COUNT(*) AS num_singers FROM singer GROUP BY citizenship;
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT citizenship, MAX(net_worth_millions)  FROM singer  GROUP BY citizenship;
SELECT citizenship, MAX(net_worth_millions)  FROM singer  GROUP BY citizenship;
SELECT s.title, si.name FROM song s JOIN singer si ON s.singer_id = si.singer_id WHERE s.title = 'Do They Know It\'s Christmas';
SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id WHERE song.title = 'Do They Know It\'s Christmas';
SELECT DISTINCT s.name FROM singer s JOIN song so ON s.singer_id = so.singer_id WHERE so.sales > 300000;
SELECT DISTINCT s.name FROM singer s JOIN song so ON s.singer_id = so.singer_id WHERE so.sales > 300000;
SELECT s.name FROM singer s JOIN song sg ON s.singer_id = sg.singer_id GROUP BY s.name HAVING COUNT(sg.song_id) > 1;
SELECT s.name FROM singer s JOIN song sg ON s.singer_id = sg.singer_id GROUP BY s.singer_id, s.name HAVING COUNT(sg.song_id) > 1;
SELECT s.name AS singer, SUM(sales) AS total_sales FROM singer s JOIN song sg ON s.singer_id = sg.singer_id GROUP BY s.name;
SELECT s.name AS singer, SUM(so.sales) AS total_sales FROM singer s JOIN song so ON s.singer_id = so.singer_id GROUP BY s.name;
SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);
SELECT name AS sname FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);
SELECT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year > 1955;
SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955;
SELECT COUNT(*)  FROM other_available_features;
SELECT feature_type_name  FROM ref_feature_types  WHERE feature_type_code = 'AirCon';
SELECT property_type_description  FROM ref_property_types  WHERE property_type_code = 'apt';
SELECT property_name FROM properties WHERE (property_type_code = 'APT' OR property_type_code = 'HSE') AND room_count > 1;
