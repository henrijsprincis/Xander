SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT name, country, age FROM singer ORDER BY age DESC;
SELECT name, country, age FROM singer ORDER BY age DESC;
SELECT AVG(age) AS average_age, MIN(age) AS minimum_age, MAX(age) AS maximum_age FROM singer WHERE country = 'France';
SELECT AVG(age) AS average_age, MIN(age) AS minimum_age, MAX(age) AS maximum_age FROM singer WHERE country = 'France';
SELECT song_name, song_release_year FROM singer ORDER BY age ASC LIMIT 1;
SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer);
SELECT DISTINCT country FROM singer WHERE age > 20;
SELECT DISTINCT country FROM singer WHERE age > 20;
SELECT country, COUNT(*) AS number_of_singers FROM singer GROUP BY country;
SELECT country, COUNT(*)  FROM singer  GROUP BY country;
SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer);
SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer);
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT MAX(capacity), AVG(capacity) FROM stadium;
SELECT AVG(capacity), MAX(capacity) FROM stadium;
SELECT name, capacity FROM stadium ORDER BY average DESC LIMIT 1;
SELECT name, capacity FROM stadium ORDER BY average DESC LIMIT 1;
SELECT COUNT(*)  FROM concert  WHERE year IN ('2014', '2015');
SELECT COUNT(*)  FROM concert  WHERE year IN ('2014', '2015');
SELECT s.name, COUNT(c.concert_id) AS number_of_concerts FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.name;
SELECT s.name, COUNT(c.concert_id) FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.name;
SELECT s.name, s.capacity FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year >= '2014' GROUP BY s.name, s.capacity ORDER BY COUNT(c.concert_id) DESC LIMIT 1;
SELECT s.name, s.capacity FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year > 2013 GROUP BY s.name, s.capacity ORDER BY COUNT(c.concert_id) DESC LIMIT 1;
SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT name  FROM stadium  WHERE stadium_id NOT IN (SELECT DISTINCT stadium_id FROM concert);
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT DISTINCT stadium_id FROM concert);
SELECT DISTINCT s1.country FROM singer s1 JOIN singer s2 ON s1.country = s2.country WHERE s1.age > 40 AND s2.age < 30;
SELECT name FROM stadium WHERE stadium_id NOT IN (     SELECT stadium_id     FROM concert     WHERE year = '2014' );
SELECT name FROM stadium WHERE stadium_id NOT IN (     SELECT stadium_id     FROM concert     WHERE year = '2014' );
SELECT c.concert_name, c.theme, COUNT(sic.singer_id) AS number_of_singers FROM concert c JOIN singer_in_concert sic ON c.concert_id = sic.concert_id GROUP BY c.concert_name, c.theme;
SELECT c.concert_name, c.theme, COUNT(sic.singer_id) AS number_of_singers FROM concert c JOIN singer_in_concert sic ON c.concert_id = sic.concert_id GROUP BY c.concert_name, c.theme;
SELECT s.name, COUNT(sic.concert_id) AS number_of_concerts FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id GROUP BY s.name;
SELECT s.name, COUNT(sic.concert_id) AS number_of_concerts FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id GROUP BY s.name;
SELECT DISTINCT s.name FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id JOIN concert c ON sic.concert_id = c.concert_id WHERE c.year = '2014';
SELECT s.name FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id JOIN concert c ON sic.concert_id = c.concert_id WHERE c.year = '2014';
SELECT s.name, s.country FROM singer s WHERE s.song_name LIKE '%Hey%';
SELECT singer.name, singer.country FROM singer WHERE singer.song_name LIKE '%Hey%';
SELECT s.name, s.location FROM stadium s JOIN concert c1 ON s.stadium_id = c1.stadium_id JOIN concert c2 ON s.stadium_id = c2.stadium_id WHERE c1.year = '2014' AND c2.year = '2015';
```sql SELECT DISTINCT s.name, s.location FROM stadium s JOIN concert c1 ON s.stadium_id = c1.stadium_id JOIN concert c2 ON s.stadium_id = c2.stadium_id WHERE c1.year = '2014' AND c2.year = '2015'; ```
```sql SELECT COUNT(*) FROM concert WHERE stadium_id = (     SELECT stadium_id     FROM stadium     ORDER BY capacity DESC     LIMIT 1 ); ```
SELECT COUNT(*)  FROM concert  WHERE stadium_id = (     SELECT stadium_id      FROM stadium      ORDER BY capacity DESC      LIMIT 1 );
SELECT COUNT(*) FROM pets WHERE weight > 10;
SELECT COUNT(*)  FROM pets  WHERE weight > 10;
SELECT weight  FROM pets  WHERE pet_age = (SELECT MIN(pet_age) FROM pets)  LIMIT 1;
SELECT weight  FROM pets  WHERE pet_age = (SELECT MIN(pet_age) FROM pets);
SELECT pettype, MAX(weight) AS max_weight FROM pets GROUP BY pettype;
SELECT pettype, MAX(weight) AS max_weight FROM pets GROUP BY pettype;
SELECT COUNT(*) FROM has_pet WHERE stuid IN (     SELECT stuid     FROM student     WHERE age > 20 );
SELECT COUNT(*) FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20;
SELECT COUNT(*) FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE s.sex = 'F' AND p.pettype = 'dog';
SELECT COUNT(*) FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE s.sex = 'F' AND p.pettype = 'dog';
SELECT COUNT(DISTINCT pettype) FROM pets;
SELECT COUNT(DISTINCT pettype) FROM pets;
SELECT s.fname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype IN ('cat', 'dog');
SELECT s.fname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype IN ('cat', 'dog');
SELECT s.fname FROM student s JOIN has_pet hp1 ON s.stuid = hp1.stuid JOIN pets p1 ON hp1.petid = p1.petid AND p1.pettype = 'cat' JOIN has_pet hp2 ON s.stuid = hp2.stuid JOIN pets p2 ON hp2.petid = p2.petid AND p2.pettype = 'dog';
SELECT DISTINCT s.fname FROM student s JOIN has_pet hp1 ON s.stuid = hp1.stuid JOIN pets p1 ON hp1.petid = p1.petid JOIN has_pet hp2 ON s.stuid = hp2.stuid JOIN pets p2 ON hp2.petid = p2.petid WHERE p1.pettype = 'cat' AND p2.pettype = 'dog';
SELECT s.major, s.age FROM student s LEFT JOIN has_pet hp ON s.stuid = hp.stuid LEFT JOIN pets p ON hp.petid = p.petid AND p.pettype = 'cat' WHERE p.petid IS NULL;
SELECT s.major, s.age FROM student s WHERE s.stuid NOT IN (     SELECT h.stuid     FROM has_pet h     JOIN pets p ON h.petid = p.petid     WHERE p.pettype = 'cat' );
SELECT s.stuid FROM student s LEFT JOIN has_pet hp ON s.stuid = hp.stuid LEFT JOIN pets p ON hp.petid = p.petid AND p.pettype = 'cat' WHERE p.petid IS NULL;
SELECT student.stuid FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid LEFT JOIN pets ON has_pet.petid = pets.petid AND pets.pettype = 'cat' WHERE pets.petid IS NULL;
SELECT s.fname, s.age FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'dog' AND s.stuid NOT IN (     SELECT s.stuid     FROM student s     JOIN has_pet hp ON s.stuid = hp.stuid     JOIN pets p ON hp.petid = p.petid     WHERE p.pettype = 'cat' );
SELECT s.fname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'dog' AND s.stuid NOT IN (     SELECT s.stuid     FROM student s     JOIN has_pet hp ON s.stuid = hp.stuid     JOIN pets p ON hp.petid = p.petid     WHERE p.pettype = 'cat' );
SELECT pettype, weight FROM pets ORDER BY pet_age ASC LIMIT 1;
SELECT pettype, weight FROM pets ORDER BY pet_age ASC LIMIT 1;
SELECT p.petid, p.weight FROM pets p WHERE p.pet_age > 1;
SELECT pets.petid, pets.weight FROM pets WHERE pets.pet_age > 1;
SELECT pettype, AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age FROM pets GROUP BY pettype;
SELECT pettype, AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age FROM pets GROUP BY pettype;
SELECT pettype, AVG(weight) AS average_weight FROM pets GROUP BY pettype;
SELECT pettype, AVG(weight) AS average_weight FROM pets GROUP BY pettype;
SELECT s.fname, s.age FROM student s JOIN has_pet hp ON s.stuid = hp.stuid;
SELECT DISTINCT s.fname, s.age FROM student s JOIN has_pet hp ON s.stuid = hp.stuid;
SELECT p.petid FROM student s JOIN has_pet h ON s.stuid = h.stuid JOIN pets p ON h.petid = p.petid WHERE s.lname = 'Smith';
SELECT p.petid FROM student s JOIN has_pet h ON s.stuid = h.stuid JOIN pets p ON h.petid = p.petid WHERE s.lname = 'Smith';
SELECT h.stuid, COUNT(h.petid) AS number_of_pets FROM has_pet h GROUP BY h.stuid;
SELECT student.stuid, COUNT(has_pet.petid) AS pet_count FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid;
SELECT s.fname, s.sex FROM student s JOIN has_pet hp ON s.stuid = hp.stuid GROUP BY s.stuid, s.fname, s.sex HAVING COUNT(hp.petid) > 1;
SELECT s.fname, s.sex FROM student s JOIN has_pet hp ON s.stuid = hp.stuid GROUP BY s.stuid, s.fname, s.sex HAVING COUNT(hp.petid) > 1;
SELECT s.lname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND p.pet_age = 3;
SELECT s.lname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND p.pet_age = 3;
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT c.contid AS continent_id, c.continent AS continent_name, COUNT(ct.countryid) AS number_of_countries FROM continents c JOIN countries ct ON c.contid = ct.continent GROUP BY c.contid, c.continent;
SELECT c.contid, c.continent, COUNT(co.countryid) AS country_count FROM continents c LEFT JOIN countries co ON c.contid = co.continent GROUP BY c.contid, c.continent;
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT cm.fullname, cm.id, COUNT(ml.modelid) AS number_of_models FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker GROUP BY cm.fullname, cm.id;
SELECT cm.fullname, cm.id, COUNT(ml.modelid) AS model_count FROM car_makers cm LEFT JOIN model_list ml ON cm.id = ml.maker GROUP BY cm.fullname, cm.id;
SELECT car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY CAST(cars_data.horsepower AS INTEGER) LIMIT 1;
SELECT model FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid ORDER BY CAST(horsepower AS INTEGER) LIMIT 1;
SELECT DISTINCT cn.make FROM cars_data cd JOIN car_names cn ON cd.id = cn.makeid WHERE cd.weight < (SELECT AVG(weight) FROM cars_data);
SELECT DISTINCT car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);
SELECT DISTINCT cm.maker FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker JOIN car_names cn ON ml.model = cn.model JOIN cars_data cd ON cn.makeid = cd.id WHERE cd.year = 1970;
SELECT DISTINCT cm.maker FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker JOIN car_names cn ON ml.modelid = cn.makeid JOIN cars_data cd ON cn.model = cd.model WHERE cd.year = 1970;
SELECT car_names.make, cars_data.year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.year = (SELECT MIN(year) FROM cars_data);
SELECT cm.maker, MIN(cd.year) AS earliest_year FROM cars_data cd JOIN car_names cn ON cd.id = cn.makeid JOIN model_list ml ON cn.model = ml.model JOIN car_makers cm ON ml.maker = cm.id GROUP BY cm.maker ORDER BY earliest_year LIMIT 1;
SELECT DISTINCT cn.model FROM car_names cn JOIN model_list ml ON cn.makeid = ml.modelid JOIN cars_data cd ON ml.modelid = cd.id WHERE cd.year > 1980;
SELECT DISTINCT car_names.model FROM car_names JOIN model_list ON car_names.makeid = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year > 1980;
```sql SELECT continents.continent, COUNT(DISTINCT car_makers.maker) AS car_maker_count FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryname = car_makers.country GROUP BY continents.continent; ```
```sql SELECT c.continent, COUNT(cm.id) AS car_maker_count FROM continents c JOIN countries co ON c.contid = co.continent JOIN car_makers cm ON co.countryname = cm.country GROUP BY c.continent; ```
SELECT country, COUNT(*) AS maker_count FROM car_makers GROUP BY country ORDER BY maker_count DESC LIMIT 1;
SELECT countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryname ORDER BY COUNT(car_makers.id) DESC LIMIT 1;
SELECT cm.fullname, COUNT(ml.modelid) AS model_count FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker GROUP BY cm.fullname;
SELECT cm.id, cm.fullname, COUNT(ml.modelid) AS model_count FROM car_makers cm LEFT JOIN model_list ml ON cm.id = ml.maker GROUP BY cm.id, cm.fullname;
SELECT accelerate  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE car_names.make = 'amc hornet sportabout (sw)';
SELECT accelerate  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE car_names.make = 'amc'  AND car_names.model = 'hornet sportabout (sw)';
SELECT COUNT(*) FROM car_makers WHERE country = 'France';
SELECT COUNT(DISTINCT cm.maker) FROM car_makers cm JOIN countries c ON cm.country = c.countryname WHERE c.countryname = 'France';
SELECT COUNT(DISTINCT model_list.modelid) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryname WHERE countries.countryname = 'USA';
SELECT COUNT(DISTINCT model_list.modelid) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'United States';
SELECT AVG(CAST(mpg AS FLOAT)) FROM cars_data WHERE cylinders = 4;
SELECT AVG(CAST(mpg AS FLOAT)) FROM cars_data WHERE cylinders = 4;
SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;
SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;
SELECT cm.maker, ml.model FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker;
SELECT car_makers.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker;
SELECT DISTINCT c.countryname, c.countryid FROM countries c JOIN car_makers cm ON c.countryname = cm.country;
SELECT DISTINCT c.countryname, c.countryid FROM countries c JOIN car_makers cm ON c.countryid = cm.country;
SELECT COUNT(*)  FROM cars_data  WHERE CAST(horsepower AS INTEGER) > 150;
SELECT COUNT(*)  FROM cars_data  WHERE CAST(horsepower AS INTEGER) > 150;
SELECT AVG(weight) AS average_weight, year FROM cars_data GROUP BY year;
SELECT year, AVG(weight) AS average_weight, AVG(year) AS average_year FROM cars_data GROUP BY year;
```sql SELECT c.countryname FROM countries c JOIN continents ct ON c.continent = ct.contid JOIN car_makers cm ON c.countryname = cm.country WHERE ct.continent = 'Europe' GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) >= 3; ```
SELECT c.countryname FROM countries c JOIN continents ct ON c.continent = ct.contid JOIN car_makers cm ON c.countryname = cm.country WHERE ct.continent = 'Europe' GROUP BY c.countryname HAVING COUNT(cm.id) >= 3;
SELECT MAX(CAST(horsepower AS INTEGER)) AS max_horsepower, car_makers.maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3 GROUP BY car_makers.maker;
SELECT cm.maker, MAX(cd.horsepower) AS max_horsepower FROM cars_data cd JOIN car_names cn ON cd.id = cn.makeid JOIN car_makers cm ON cn.make = cm.id WHERE cd.cylinders = 3 GROUP BY cm.maker ORDER BY max_horsepower DESC LIMIT 1;
SELECT car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY CAST(cars_data.mpg AS FLOAT) DESC LIMIT 1;
SELECT car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY CAST(cars_data.mpg AS FLOAT) DESC LIMIT 1;
SELECT AVG(CAST(horsepower AS FLOAT)) FROM cars_data WHERE year < 1980;
SELECT AVG(CAST(horsepower AS FLOAT)) FROM cars_data WHERE year < 1980;
SELECT AVG(edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.maker = 'volvo';
SELECT AVG(cars_data.edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN car_makers ON car_names.make = car_makers.maker WHERE car_makers.maker = 'Volvo';
SELECT cylinders, MAX(accelerate) AS max_accelerate FROM cars_data GROUP BY cylinders;
SELECT MAX(accelerate), cylinders FROM cars_data GROUP BY cylinders;
SELECT ml.model FROM model_list ml JOIN car_names cn ON ml.model = cn.model GROUP BY ml.model ORDER BY COUNT(cn.make) DESC LIMIT 1;
SELECT model_list.model FROM model_list JOIN car_names ON model_list.model = car_names.model GROUP BY model_list.model ORDER BY COUNT(DISTINCT car_names.make) DESC LIMIT 1;
SELECT COUNT(*)  FROM cars_data  WHERE cylinders > 4;
SELECT COUNT(*)  FROM cars_data  WHERE cylinders > 4;
SELECT COUNT(*)  FROM cars_data  WHERE year = 1980;
SELECT COUNT(*) FROM cars_data WHERE year = 1980;
SELECT COUNT(ml.modelid) FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker WHERE cm.fullname = 'American Motor Company';
SELECT COUNT(*) FROM model_list WHERE maker = (SELECT id FROM car_makers WHERE maker = 'American Motor Company');
SELECT cm.fullname, cm.id FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker GROUP BY cm.fullname, cm.id HAVING COUNT(ml.modelid) > 3;
SELECT cm.maker, cm.id FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker GROUP BY cm.maker, cm.id HAVING COUNT(ml.modelid) > 3;
SELECT DISTINCT ml.model FROM model_list ml JOIN car_makers cm ON ml.maker = cm.id JOIN cars_data cd ON ml.model = cd.model WHERE cm.fullname = 'General Motors' OR cd.weight > 3500;
SELECT DISTINCT cn.make FROM car_names cn JOIN car_makers cm ON cn.makeid = cm.id JOIN cars_data cd ON cn.model = cd.id WHERE cm.maker = 'General Motors' OR cd.weight > 3500;
SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000;
SELECT DISTINCT year FROM cars_data WHERE year IN (     SELECT year     FROM cars_data     WHERE weight < 4000 ) AND year IN (     SELECT year     FROM cars_data     WHERE weight > 3000 );
SELECT horsepower  FROM cars_data  ORDER BY accelerate DESC  LIMIT 1;
SELECT horsepower  FROM cars_data  ORDER BY accelerate DESC  LIMIT 1;
SELECT cylinders  FROM cars_data  WHERE id = (     SELECT id      FROM cars_data      WHERE model = 'volvo'      ORDER BY accelerate ASC      LIMIT 1 );
SELECT cylinders  FROM cars_data  WHERE id = (     SELECT id      FROM cars_data      WHERE id IN (         SELECT id          FROM car_names          JOIN model_list ON car_names.makeid = model_list.modelid          JOIN car_makers ON model_list.maker = car_makers.id          WHERE car_makers.maker = 'volvo'     )      ORDER BY accelerate ASC      LIMIT 1 );
SELECT COUNT(*) FROM cars_data WHERE accelerate > (     SELECT accelerate     FROM cars_data     WHERE horsepower = (         SELECT MAX(CAST(horsepower AS INTEGER))         FROM cars_data     ) );
SELECT COUNT(*) FROM cars_data WHERE accelerate > (     SELECT accelerate     FROM cars_data     WHERE horsepower = (         SELECT MAX(CAST(horsepower AS INTEGER))         FROM cars_data     ) );
SELECT COUNT(*) FROM (     SELECT country, COUNT(*) as maker_count     FROM car_makers     GROUP BY country     HAVING COUNT(*) > 2 ) AS subquery;
SELECT COUNT(*) FROM (     SELECT country     FROM car_makers     GROUP BY country     HAVING COUNT(*) > 2 ) AS subquery;
SELECT COUNT(*)  FROM cars_data  WHERE cylinders > 6;
SELECT COUNT(*)  FROM cars_data  WHERE cylinders > 6;
SELECT model FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders = 4 ORDER BY CAST(horsepower AS INTEGER) DESC LIMIT 1;
SELECT model_list.model FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid WHERE cars_data.cylinders = 4 ORDER BY CAST(cars_data.horsepower AS INTEGER) DESC LIMIT 1;
SELECT cn.makeid, cn.make FROM car_names cn JOIN cars_data cd ON cn.makeid = cd.id WHERE cd.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cd.cylinders <= 3;
SELECT DISTINCT cm.id, cm.maker FROM car_makers cm JOIN car_names cn ON cm.id = cn.makeid JOIN cars_data cd ON cn.model = cd.model WHERE cd.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cd.cylinders < 4;
SELECT MAX(CAST(mpg AS FLOAT)) FROM cars_data WHERE cylinders = 8 OR year < 1980;
SELECT MAX(CAST(mpg AS FLOAT)) FROM cars_data WHERE cylinders = 8 OR year < 1980;
SELECT DISTINCT car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname != 'Ford Motor Company';
SELECT DISTINCT ml.model FROM model_list ml JOIN car_makers cm ON ml.maker = cm.id JOIN cars_data cd ON ml.modelid = cd.id WHERE cd.weight < 3500 AND cm.maker != 'Ford Motor Company';
SELECT countryname  FROM countries  WHERE countryid NOT IN (     SELECT DISTINCT country      FROM car_makers );
SELECT countryname FROM countries WHERE countryid NOT IN (     SELECT DISTINCT country     FROM car_makers );
SELECT cm.id, cm.maker FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker GROUP BY cm.id, cm.maker HAVING COUNT(ml.modelid) >= 2 AND (SELECT COUNT(DISTINCT cm2.id)       FROM car_makers cm2       JOIN model_list ml2 ON cm2.id = ml2.maker       GROUP BY cm2.id       HAVING COUNT(ml2.modelid) >= 2) > 3;
```sql SELECT cm.id, cm.maker FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker JOIN car_names cn ON ml.model = cn.model GROUP BY cm.id, cm.maker HAVING COUNT(DISTINCT ml.model) >= 2 AND COUNT(cn.makeid) > 3; ```
SELECT c.countryid, c.countryname FROM countries c WHERE c.countryid IN (     SELECT cm.country     FROM car_makers cm     GROUP BY cm.country     HAVING COUNT(cm.id) > 3 ) OR c.countryid IN (     SELECT cm.country     FROM car_makers cm     JOIN model_list ml ON cm.id = ml.maker     JOIN car_names cn ON ml.modelid = cn.makeid     WHERE cn.model = 'fiat' );
SELECT DISTINCT c.countryid, c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country LEFT JOIN model_list ml ON cm.id = ml.maker WHERE cm.country IN (     SELECT country     FROM car_makers     GROUP BY country     HAVING COUNT(id) > 3 ) OR ml.model = 'fiat';
SELECT country FROM airlines WHERE airline = 'JetBlue Airways';
SELECT country FROM airlines WHERE airline = 'Jetblue Airways';
SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';
SELECT abbreviation FROM airlines WHERE airline = 'JetBlue';
SELECT airline, abbreviation FROM airlines WHERE country = 'USA';
SELECT airline, abbreviation FROM airlines WHERE country = 'USA';
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';
SELECT airportcode, airportname  FROM airports  WHERE city = 'Anthony';
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT airline FROM airlines WHERE abbreviation = 'UAL';
SELECT airline FROM airlines WHERE abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE country = 'USA';
SELECT COUNT(*) FROM airlines WHERE country = 'USA';
SELECT city, country  FROM airports  WHERE airportname = 'Alton';
SELECT city, country  FROM airports  WHERE airportname = 'Alton';
SELECT airportname FROM airports WHERE airportcode = 'AKO';
SELECT airportname  FROM airports  WHERE airportcode = 'AKO';
SELECT airportname  FROM airports  WHERE city = 'Aberdeen';
SELECT airportname  FROM airports  WHERE city = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';
SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';
SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';
SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.sourceairport = airports.airportcode  WHERE airports.city = 'Aberdeen';
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.sourceairport = airports.airportcode  WHERE airports.city = 'Aberdeen';
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city = 'Aberdeen';
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city = 'Aberdeen';
SELECT COUNT(*) FROM flights f JOIN airports a1 ON f.sourceairport = a1.airportcode JOIN airports a2 ON f.destairport = a2.airportcode WHERE a1.city = 'Aberdeen' AND a2.city = 'Ashley';
SELECT COUNT(*)  FROM flights  JOIN airports AS source ON flights.sourceairport = source.airportcode  JOIN airports AS dest ON flights.destairport = dest.airportcode  WHERE source.city = 'Aberdeen' AND dest.city = 'Ashley';
SELECT COUNT(*) FROM flights WHERE airline = (SELECT uid FROM airlines WHERE airline = 'JetBlue Airways');
SELECT COUNT(*)  FROM flights  WHERE airline = (SELECT uid FROM airlines WHERE airline = 'Jetblue Airways');
SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid WHERE a.airline = 'United Airlines' AND f.destairport = 'ASY';
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE airlines.abbreviation = 'UA' AND flights.destairport = 'ASY';
SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid WHERE a.airline = 'United Airlines' AND f.sourceairport = 'AHD';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.airline = 'United Airlines' AND flights.sourceairport = 'AHD';
SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen';
SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen';
SELECT a.city, COUNT(f.destairport) AS arriving_flights FROM flights f JOIN airports a ON f.destairport = a.airportcode GROUP BY a.city ORDER BY arriving_flights DESC LIMIT 1;
SELECT a.city FROM airports a JOIN flights f ON a.airportcode = f.destairport GROUP BY a.city ORDER BY COUNT(f.destairport) DESC LIMIT 1;
SELECT a.city, COUNT(f.flightno) AS num_departing_flights FROM flights f JOIN airports a ON f.sourceairport = a.airportcode GROUP BY a.city ORDER BY num_departing_flights DESC LIMIT 1;
SELECT a.city, COUNT(f.sourceairport) AS flight_count FROM flights f JOIN airports a ON f.sourceairport = a.airportcode GROUP BY a.city ORDER BY flight_count DESC LIMIT 1;
SELECT sourceairport AS airportcode, COUNT(*) AS flight_count FROM flights GROUP BY sourceairport ORDER BY flight_count DESC LIMIT 1;
SELECT sourceairport AS airportcode FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT sourceairport AS airportcode FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT airportcode FROM airports WHERE airportcode = (     SELECT sourceairport     FROM flights     GROUP BY sourceairport     ORDER BY COUNT(*) ASC     LIMIT 1 );
SELECT a.airline FROM airlines a JOIN flights f ON a.uid = f.airline GROUP BY a.airline ORDER BY COUNT(f.flightno) DESC LIMIT 1;
SELECT a.airline FROM airlines a JOIN flights f ON a.uid = f.airline GROUP BY a.airline ORDER BY COUNT(f.flightno) DESC LIMIT 1;
SELECT a.abbreviation, a.country FROM airlines a JOIN (     SELECT airline, COUNT(*) AS flight_count     FROM flights     GROUP BY airline     ORDER BY flight_count ASC     LIMIT 1 ) f ON a.uid = f.airline;
SELECT a.abbreviation, a.country FROM airlines a JOIN (     SELECT airline, COUNT(*) AS flight_count     FROM flights     GROUP BY airline     ORDER BY flight_count ASC     LIMIT 1 ) f ON a.uid = f.airline;
SELECT DISTINCT a.airline FROM airlines a JOIN flights f ON a.uid = f.airline WHERE f.sourceairport = 'AHD';
SELECT DISTINCT a.airline FROM airlines a JOIN flights f ON a.uid = f.airline WHERE f.sourceairport = 'AHD';
SELECT DISTINCT a.airline FROM airlines a JOIN flights f ON a.uid = f.airline WHERE f.destairport = 'AHD';
SELECT DISTINCT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.destairport = 'AHD';
SELECT DISTINCT a.airline FROM airlines a JOIN flights f1 ON a.uid = f1.airline JOIN flights f2 ON a.uid = f2.airline WHERE f1.sourceairport = 'APG' AND f2.sourceairport = 'CVO';
SELECT DISTINCT a.airline FROM flights f1 JOIN flights f2 ON f1.airline = f2.airline JOIN airlines a ON f1.airline = a.uid WHERE f1.sourceairport = 'APG' AND f2.sourceairport = 'CVO';
SELECT DISTINCT a.airline FROM airlines a JOIN flights f1 ON a.uid = f1.airline LEFT JOIN flights f2 ON a.uid = f2.airline AND f2.sourceairport = 'APG' WHERE f1.sourceairport = 'CVO' AND f2.airline IS NULL;
SELECT DISTINCT a.airline FROM airlines a JOIN flights f ON a.uid = f.airline WHERE f.sourceairport = 'CVO' AND a.uid NOT IN (     SELECT f2.airline     FROM flights f2     WHERE f2.sourceairport = 'APG' );
SELECT a.airline FROM airlines a JOIN flights f ON a.uid = f.airline GROUP BY a.airline HAVING COUNT(f.flightno) >= 10;
SELECT a.airline FROM airlines a JOIN flights f ON a.uid = f.airline GROUP BY a.airline HAVING COUNT(f.flightno) >= 10;
SELECT a.airline FROM airlines a JOIN flights f ON a.uid = f.airline GROUP BY a.airline HAVING COUNT(f.flightno) < 200;
SELECT a.airline FROM airlines a JOIN flights f ON a.uid = f.airline GROUP BY a.airline HAVING COUNT(f.flightno) < 200;
SELECT flightno  FROM flights  WHERE airline = (SELECT uid FROM airlines WHERE airline = 'United Airlines');
SELECT flightno  FROM flights  WHERE airline = (SELECT uid FROM airlines WHERE airline = 'United Airlines');
SELECT flightno  FROM flights  WHERE sourceairport = 'APG';
SELECT flightno FROM flights WHERE sourceairport = 'APG';
SELECT flightno FROM flights WHERE destairport = 'APG';
SELECT flightno  FROM flights  WHERE destairport = 'APG';
SELECT flightno  FROM flights  JOIN airports ON flights.sourceairport = airports.airportcode  WHERE airports.city = 'Aberdeen';
SELECT flightno  FROM flights  JOIN airports ON flights.sourceairport = airports.airportcode  WHERE airports.city = 'Aberdeen';
SELECT flights.flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen';
SELECT flightno  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city = 'Aberdeen';
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city IN ('Aberdeen', 'Abilene');
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city IN ('Aberdeen', 'Abilene');
SELECT airportname FROM airports WHERE airportcode NOT IN (     SELECT sourceairport     FROM flights     UNION     SELECT destairport     FROM flights );
SELECT airportname FROM airports WHERE airportcode NOT IN (     SELECT sourceairport FROM flights     UNION     SELECT destairport FROM flights );
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT name FROM employee ORDER BY age ASC;
SELECT name FROM employee ORDER BY age ASC;
SELECT city, COUNT(*)  FROM employee  GROUP BY city;
SELECT city, COUNT(*)  FROM employee  GROUP BY city;
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(employee_id) > 1;
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(employee_id) > 1;
SELECT location, COUNT(*)  FROM shop  GROUP BY location;
SELECT location, COUNT(*)  FROM shop  GROUP BY location;
SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1;
SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1;
SELECT MIN(number_products), MAX(number_products) FROM shop;
SELECT MIN(number_products) AS min_products, MAX(number_products) AS max_products FROM shop;
SELECT name, location, district FROM shop ORDER BY number_products DESC;
SELECT name, location, district FROM shop ORDER BY number_products DESC;
SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop);
SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop);
SELECT e.name FROM employee e JOIN evaluation ev ON e.employee_id = ev.employee_id GROUP BY e.name ORDER BY COUNT(ev.year_awarded) DESC LIMIT 1;
SELECT e.name FROM employee e JOIN evaluation ev ON e.employee_id = ev.employee_id GROUP BY e.name ORDER BY COUNT(ev.bonus) DESC LIMIT 1;
SELECT e.name FROM employee e JOIN evaluation ev ON e.employee_id = ev.employee_id ORDER BY ev.bonus DESC LIMIT 1;
SELECT e.name FROM employee e JOIN evaluation ev ON e.employee_id = ev.employee_id ORDER BY ev.bonus DESC LIMIT 1;
SELECT e.name FROM employee e LEFT JOIN evaluation ev ON e.employee_id = ev.employee_id WHERE ev.employee_id IS NULL;
SELECT e.name FROM employee e LEFT JOIN evaluation ev ON e.employee_id = ev.employee_id WHERE ev.employee_id IS NULL;
```sql SELECT s.name FROM shop s JOIN hiring h ON s.shop_id = h.shop_id GROUP BY s.name ORDER BY COUNT(h.employee_id) DESC LIMIT 1; ```
```sql SELECT s.name FROM shop s JOIN hiring h ON s.shop_id = h.shop_id GROUP BY s.name ORDER BY COUNT(h.employee_id) DESC LIMIT 1; ```
SELECT s.name FROM shop s LEFT JOIN hiring h ON s.shop_id = h.shop_id WHERE h.employee_id IS NULL;
SELECT s.name FROM shop s LEFT JOIN hiring h ON s.shop_id = h.shop_id WHERE h.employee_id IS NULL;
SELECT s.name, COUNT(h.employee_id)  FROM shop s JOIN hiring h ON s.shop_id = h.shop_id GROUP BY s.name;
SELECT s.shop_id, s.name, COUNT(e.employee_id) AS number_of_employees FROM shop s JOIN hiring h ON s.shop_id = h.shop_id JOIN employee e ON h.employee_id = e.employee_id GROUP BY s.shop_id, s.name;
SELECT SUM(bonus) FROM evaluation;
SELECT SUM(bonus) FROM evaluation;
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT DISTINCT s1.district FROM shop s1 JOIN shop s2 ON s1.district = s2.district WHERE s1.number_products < 3000 AND s2.number_products > 10000;
SELECT DISTINCT s1.district FROM shop s1 JOIN shop s2 ON s1.district = s2.district WHERE s1.number_products < 3000 AND s2.number_products > 10000;
SELECT COUNT(DISTINCT location) FROM shop;
SELECT COUNT(DISTINCT location) FROM shop;
SELECT COUNT(*) FROM documents;
SELECT COUNT(*) FROM documents;
SELECT document_id, document_name, document_description FROM documents;
SELECT document_id, document_name, document_description FROM documents;
SELECT d.document_name, d.template_id FROM documents d WHERE d.document_description LIKE '%w%';
SELECT d.document_name, d.template_id FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE d.document_description LIKE '%w%';
SELECT d.document_id, d.template_id, d.document_description FROM documents d WHERE d.document_name = 'Robbin CV';
SELECT d.document_id, d.template_id, d.document_description FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE d.document_name = 'Robbin CV';
SELECT COUNT(DISTINCT t.template_type_code) FROM templates t JOIN documents d ON t.template_id = d.template_id;
SELECT COUNT(DISTINCT template_id)  FROM documents;
SELECT COUNT(*) FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'PPT';
SELECT COUNT(*) FROM documents d JOIN templates t ON d.template_id = t.template_id JOIN ref_template_types rtt ON t.template_type_code = rtt.template_type_code WHERE rtt.template_type_code = 'PPT';
SELECT t.template_id, COUNT(d.document_id) AS document_count FROM templates t LEFT JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id;
SELECT template_id, COUNT(*) AS usage_count FROM documents GROUP BY template_id;
SELECT t.template_id, t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id, t.template_type_code ORDER BY COUNT(d.document_id) DESC LIMIT 1;
SELECT t.template_id, t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id, t.template_type_code ORDER BY COUNT(d.document_id) DESC LIMIT 1;
SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(document_id) > 1;
```sql SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(document_id) > 1; ```
SELECT template_id FROM templates WHERE template_id NOT IN (SELECT DISTINCT template_id FROM documents);
SELECT template_id FROM templates WHERE template_id NOT IN (SELECT DISTINCT template_id FROM documents);
SELECT COUNT(*) FROM templates;
SELECT COUNT(*) FROM templates;
SELECT template_id, version_number, template_type_code FROM templates;
SELECT template_id, version_number, template_type_code FROM templates;
SELECT DISTINCT template_type_code FROM templates;
SELECT DISTINCT template_type_code FROM ref_template_types;
SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT');
SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT');
SELECT COUNT(*)  FROM templates  WHERE template_type_code = 'CV';
SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';
SELECT version_number, template_type_code FROM templates WHERE version_number > 5;
SELECT version_number, template_type_code FROM templates WHERE version_number > 5;
SELECT t.template_type_code, COUNT(*)  FROM templates t GROUP BY t.template_type_code;
SELECT t.template_type_code, COUNT(*)  FROM templates t GROUP BY t.template_type_code;
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT rtt.template_type_code FROM ref_template_types rtt LEFT JOIN templates t ON rtt.template_type_code = t.template_type_code GROUP BY rtt.template_type_code HAVING COUNT(t.template_id) < 3;
```sql SELECT template_type_code FROM ref_template_types WHERE template_type_code IN (     SELECT template_type_code     FROM templates     GROUP BY template_type_code     HAVING COUNT(template_id) < 3 ); ```
SELECT MIN(version_number), template_type_code FROM templates GROUP BY template_type_code;
SELECT MIN(t.version_number) AS lowest_version_number, t.template_type_code FROM templates t GROUP BY t.template_type_code;
SELECT t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id WHERE d.document_name = 'Data base';
SELECT t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id WHERE d.document_name = 'Data base';
SELECT d.document_name FROM documents d JOIN templates t ON d.template_id = t.template_id JOIN ref_template_types rtt ON t.template_type_code = rtt.template_type_code WHERE rtt.template_type_code = 'BK';
SELECT d.document_name FROM documents d JOIN templates t ON d.template_id = t.template_id JOIN ref_template_types rtt ON t.template_type_code = rtt.template_type_code WHERE rtt.template_type_code = 'BK';
```sql SELECT t.template_type_code, COUNT(d.document_id) AS document_count FROM ref_template_types t JOIN templates tp ON t.template_type_code = tp.template_type_code JOIN documents d ON tp.template_id = d.template_id GROUP BY t.template_type_code; ```
```sql SELECT t.template_type_code, COUNT(d.document_id)  FROM ref_template_types t JOIN templates tp ON t.template_type_code = tp.template_type_code JOIN documents d ON tp.template_id = d.template_id GROUP BY t.template_type_code; ```
SELECT template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1;
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (     SELECT DISTINCT t.template_type_code     FROM templates t     JOIN documents d ON t.template_id = d.template_id );
SELECT rtt.template_type_code FROM ref_template_types rtt LEFT JOIN templates t ON rtt.template_type_code = t.template_type_code LEFT JOIN documents d ON t.template_id = d.template_id WHERE d.document_id IS NULL;
SELECT template_type_code, template_type_description FROM ref_template_types;
SELECT template_type_code, template_type_description FROM ref_template_types;
SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';
SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';
SELECT template_type_code  FROM ref_template_types  WHERE template_type_description = 'Book';
SELECT template_type_code  FROM ref_template_types  WHERE template_type_description = 'Book';
```sql SELECT DISTINCT rtt.template_type_description FROM ref_template_types rtt JOIN templates t ON rtt.template_type_code = t.template_type_code JOIN documents d ON t.template_id = d.template_id; ```
SELECT DISTINCT rtt.template_type_description FROM ref_template_types rtt JOIN templates t ON rtt.template_type_code = t.template_type_code JOIN documents d ON t.template_id = d.template_id;
SELECT t.template_id FROM templates t JOIN ref_template_types rtt ON t.template_type_code = rtt.template_type_code WHERE rtt.template_type_description = 'Presentation';
SELECT template_id FROM templates WHERE template_type_code = (     SELECT template_type_code     FROM ref_template_types     WHERE template_type_description = 'Presentation' );
SELECT COUNT(*) FROM paragraphs;
SELECT COUNT(*) FROM paragraphs;
SELECT COUNT(*) FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE d.document_name = 'Summer Show';
SELECT COUNT(*) FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE d.document_name = 'Summer Show';
SELECT *  FROM paragraphs  WHERE paragraph_text = 'Korea ';
SELECT *  FROM paragraphs  WHERE paragraph_text LIKE '%Korea %';
SELECT p.paragraph_id, p.paragraph_text FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE d.document_name = 'Welcome to NY';
SELECT p.paragraph_id, p.paragraph_text FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE d.document_name = 'Welcome to NY';
SELECT p.paragraph_text FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE d.document_name = 'Customer reviews';
SELECT p.paragraph_text FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE d.document_name = 'Customer reviews';
SELECT d.document_id, COUNT(p.paragraph_id) AS paragraph_count FROM documents d LEFT JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id ORDER BY d.document_id;
SELECT document_id, COUNT(paragraph_id) AS number_of_paragraphs FROM paragraphs GROUP BY document_id ORDER BY document_id;
SELECT d.document_id, d.document_name, COUNT(p.paragraph_id) AS number_of_paragraphs FROM documents d LEFT JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name;
SELECT d.document_id, d.document_name, COUNT(p.paragraph_id) AS number_of_paragraphs FROM documents d LEFT JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name;
SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) >= 2;
SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) >= 2;
SELECT d.document_id, d.document_name FROM documents d JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name ORDER BY COUNT(p.paragraph_id) DESC LIMIT 1;
SELECT d.document_id, d.document_name FROM documents d JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name ORDER BY COUNT(p.paragraph_id) DESC LIMIT 1;
SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(paragraph_id) ASC LIMIT 1;
SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(paragraph_id) ASC LIMIT 1;
SELECT d.document_id FROM documents d JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id HAVING COUNT(p.paragraph_id) BETWEEN 1 AND 2;
SELECT d.document_id FROM documents d JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id HAVING COUNT(p.paragraph_id) BETWEEN 1 AND 2;
SELECT d.document_id FROM documents d JOIN paragraphs p1 ON d.document_id = p1.document_id JOIN paragraphs p2 ON d.document_id = p2.document_id WHERE p1.paragraph_text = 'Brazil' AND p2.paragraph_text = 'Ireland';
SELECT DISTINCT d.document_id FROM documents d JOIN paragraphs p1 ON d.document_id = p1.document_id JOIN paragraphs p2 ON d.document_id = p2.document_id WHERE p1.paragraph_text LIKE '%Brazil%' AND p2.paragraph_text LIKE '%Ireland%';
SELECT COUNT(*) FROM teacher;
SELECT COUNT(*) FROM teacher;
SELECT name FROM teacher ORDER BY CAST(age AS INTEGER) ASC;
SELECT name  FROM teacher  ORDER BY CAST(age AS INTEGER) ASC;
SELECT age, hometown FROM teacher;
SELECT age, hometown FROM teacher;
SELECT name  FROM teacher  WHERE hometown != 'Little Lever Urban District';
SELECT name  FROM teacher  WHERE hometown != 'Little Lever Urban District';
SELECT name  FROM teacher  WHERE age IN ('32', '33');
SELECT name FROM teacher WHERE age IN ('32', '33');
SELECT hometown  FROM teacher  ORDER BY CAST(age AS INTEGER) ASC  LIMIT 1;
SELECT hometown  FROM teacher  ORDER BY CAST(age AS INTEGER) ASC  LIMIT 1;
SELECT hometown, COUNT(*) AS number_of_teachers FROM teacher GROUP BY hometown;
SELECT hometown, COUNT(*) AS teacher_count FROM teacher GROUP BY hometown;
SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2;
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(teacher_id) >= 2;
SELECT t.name, c.course FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id JOIN course c ON ca.course_id = c.course_id;
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id;
SELECT t.name, c.course FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id JOIN course c ON ca.course_id = c.course_id ORDER BY t.name ASC;
SELECT t.name, c.course FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id JOIN course c ON ca.course_id = c.course_id ORDER BY t.name ASC;
SELECT t.name FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id JOIN course c ON ca.course_id = c.course_id WHERE c.course = 'math';
SELECT t.name FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id JOIN course c ON ca.course_id = c.course_id WHERE c.course = 'math';
SELECT t.name, COUNT(ca.course_id) AS number_of_courses FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.name;
SELECT t.name, COUNT(ca.course_id) AS course_count FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.name;
SELECT t.name FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.name HAVING COUNT(DISTINCT ca.course_id) >= 2;
SELECT t.name FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.name HAVING COUNT(DISTINCT ca.course_id) >= 2;
SELECT name  FROM teacher  WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange);
SELECT t.name FROM teacher t WHERE t.teacher_id NOT IN (     SELECT ca.teacher_id     FROM course_arrange ca );
SELECT COUNT(*) FROM visitor WHERE age < 30;
SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC;
SELECT AVG(age)  FROM visitor  WHERE level_of_membership <= 4;
SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age DESC;
SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1;
SELECT AVG(num_of_staff) FROM museum WHERE open_year < '2009';
SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum';
SELECT name FROM museum WHERE num_of_staff > (     SELECT MIN(num_of_staff)     FROM museum     WHERE open_year > '2010' );
SELECT v.id, v.name, v.age FROM visitor v JOIN visit vi ON v.id = vi.visitor_id GROUP BY v.id, v.name, v.age HAVING COUNT(vi.museum_id) > 1;
SELECT v.id, v.name, v.level_of_membership FROM visitor v JOIN visit vi ON v.id = vi.visitor_id GROUP BY v.id, v.name, v.level_of_membership ORDER BY SUM(vi.total_spent) DESC LIMIT 1;
SELECT m.museum_id, m.name FROM museum m JOIN visit v ON m.museum_id = v.museum_id GROUP BY m.museum_id, m.name ORDER BY COUNT(v.visitor_id) DESC LIMIT 1;
SELECT m.name FROM museum m LEFT JOIN visit v ON m.museum_id = v.museum_id WHERE v.museum_id IS NULL;
SELECT v.name, v.age FROM visitor v JOIN visit vi ON v.id = vi.visitor_id ORDER BY vi.num_of_ticket DESC LIMIT 1;
SELECT AVG(num_of_ticket) AS average_tickets, MAX(num_of_ticket) AS max_tickets FROM visit;
SELECT SUM(total_spent)  FROM visit  JOIN visitor ON visit.visitor_id = visitor.id  WHERE visitor.level_of_membership = 1;
SELECT v.name FROM visitor v JOIN visit vi1 ON v.id = vi1.visitor_id JOIN museum m1 ON vi1.museum_id = m1.museum_id JOIN visit vi2 ON v.id = vi2.visitor_id JOIN museum m2 ON vi2.museum_id = m2.museum_id WHERE m1.open_year < 2009 AND m2.open_year > 2011;
SELECT COUNT(DISTINCT v.id) FROM visitor v WHERE NOT EXISTS (     SELECT 1     FROM visit vi     JOIN museum m ON vi.museum_id = m.museum_id     WHERE vi.visitor_id = v.id AND m.open_year > '2010' );
SELECT COUNT(*) FROM museum WHERE open_year > '2013' OR open_year < '2008';
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;
SELECT      AVG(winner_age) AS average_winner_age,      AVG(loser_age) AS average_loser_age FROM      matches;
SELECT AVG(winner_rank)  FROM matches  WHERE winner_rank IS NOT NULL;
SELECT AVG(winner_rank)  FROM matches  WHERE winner_rank IS NOT NULL;
SELECT MAX(loser_rank) FROM matches;
SELECT MIN(loser_rank) FROM matches;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10;
SELECT DISTINCT winner_name FROM matches WHERE year IN (2013, 2016) GROUP BY winner_name HAVING COUNT(DISTINCT year) = 2;
SELECT DISTINCT p.first_name || ' ' || p.last_name AS player_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016;
SELECT COUNT(*)  FROM matches  WHERE year IN (2013, 2016);
SELECT COUNT(*)  FROM matches  WHERE year IN (2013, 2016);
SELECT DISTINCT p.country_code, p.first_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.tourney_name = 'WTA Championships'   AND m2.tourney_name = 'Australian Open';
SELECT p.first_name, p.country_code FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open';
SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1;
SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id ORDER BY r.tours DESC LIMIT 1;
SELECT p.first_name, p.country_code FROM players p JOIN (     SELECT player_id, MAX(tours) as max_tours     FROM rankings     GROUP BY player_id     ORDER BY max_tours DESC     LIMIT 1 ) r ON p.player_id = r.player_id;
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_name, winner_rank_points ORDER BY COUNT(*) DESC LIMIT 1;
SELECT p.first_name || ' ' || p.last_name AS name, r.ranking_points FROM players p JOIN (     SELECT winner_id, COUNT(*) AS win_count     FROM matches     GROUP BY winner_id     ORDER BY win_count DESC     LIMIT 1 ) w ON p.player_id = w.winner_id JOIN rankings r ON p.player_id = r.player_id ORDER BY r.ranking_date DESC LIMIT 1;
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;
SELECT loser_name, winner_name FROM matches ORDER BY minutes DESC LIMIT 1;
SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1;
SELECT AVG(r.ranking) AS average_ranking, p.first_name FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.player_id, p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT COUNT(player_id), country_code FROM players GROUP BY country_code;
SELECT country_code, COUNT(*)  FROM players  GROUP BY country_code;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT COUNT(*) AS match_count, year FROM matches GROUP BY year;
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year;
SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;
SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;
SELECT COUNT(DISTINCT winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE players.hand = 'L' AND matches.tourney_name = 'WTA Championships';
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id ORDER BY m.winner_rank_points DESC LIMIT 1;
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN (     SELECT winner_id, SUM(winner_rank_points) AS total_winner_points     FROM matches     GROUP BY winner_id     ORDER BY total_winner_points DESC     LIMIT 1 ) m ON p.player_id = m.winner_id;
SELECT hand, COUNT(*) AS number_of_players FROM players GROUP BY hand;
SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand;
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, date, result FROM battle;
SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death;
SELECT AVG(injured) FROM death;
SELECT d.killed, d.injured FROM ship s JOIN death d ON s.id = d.caused_by_ship_id WHERE s.tonnage = 't';
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';
SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig';
SELECT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10;
```sql SELECT s.id, s.name FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.id, s.name ORDER BY SUM(d.injured) DESC LIMIT 1; ```
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(DISTINCT b.id) FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle AND s.tonnage = '225' WHERE s.id IS NULL;
SELECT b.name, b.date FROM battle b JOIN ship s1 ON b.id = s1.lost_in_battle JOIN ship s2 ON b.id = s2.lost_in_battle WHERE s1.name = 'Lettice' AND s2.name = 'HMS Atalanta';
SELECT b.name, b.result, b.bulgarian_commander FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.id IS NULL AND s.location = 'English Channel';
SELECT note FROM death WHERE note LIKE '%East%';
SELECT address_id, line_1, line_2 FROM addresses;
SELECT address_id, line_1, line_2 FROM addresses;
SELECT COUNT(*) AS total_courses FROM courses;
SELECT COUNT(*) AS course_count FROM courses;
SELECT course_description  FROM courses  WHERE course_name = 'math';
SELECT course_description FROM courses WHERE course_name LIKE '%math%';
SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode  FROM addresses  WHERE city = 'Port Chelsea';
SELECT d.department_name, d.department_id FROM departments d JOIN degree_programs dp ON d.department_id = dp.department_id GROUP BY d.department_name, d.department_id ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1;
SELECT d.department_name, d.department_id FROM departments d JOIN degree_programs dp ON d.department_id = dp.department_id GROUP BY d.department_name, d.department_id ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT department_id) AS department_count FROM degree_programs;
SELECT COUNT(DISTINCT department_id) AS number_of_departments FROM degree_programs;
SELECT COUNT(DISTINCT degree_summary_name) AS number_of_degrees FROM degree_programs;
SELECT COUNT(DISTINCT degree_summary_name) AS number_of_degrees FROM degree_programs;
SELECT COUNT(*)  FROM degree_programs  WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering');
SELECT COUNT(*) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id WHERE departments.department_name = 'Engineering';
SELECT section_name, section_description FROM sections;
SELECT section_name, section_description FROM sections;
SELECT c.course_id, c.course_name FROM courses c JOIN (     SELECT course_id     FROM sections     GROUP BY course_id     HAVING COUNT(section_id) <= 2 ) s ON c.course_id = s.course_id;
SELECT c.course_id, c.course_name FROM courses c LEFT JOIN sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.section_id) < 2;
SELECT section_name FROM sections ORDER BY section_name DESC;
SELECT section_name FROM sections ORDER BY section_name DESC;
```sql SELECT s.semester_id, s.semester_name FROM semesters s JOIN student_enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id, s.semester_name ORDER BY COUNT(se.student_id) DESC LIMIT 1; ```
SELECT s.semester_id, s.semester_name FROM semesters s JOIN (     SELECT semester_id, COUNT(student_id) AS student_count     FROM student_enrolment     GROUP BY semester_id ) se ON s.semester_id = se.semester_id WHERE (se.semester_id, se.student_count) IN (     SELECT semester_id, MAX(student_count)     FROM (         SELECT semester_id, COUNT(student_id) AS student_count         FROM student_enrolment         GROUP BY semester_id     ) subquery     GROUP BY semester_id );
SELECT department_description FROM departments WHERE department_name LIKE '%the computer%';
SELECT department_description  FROM departments  WHERE department_name LIKE '%computer%';
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.first_name, s.middle_name, s.last_name, s.student_id, se.semester_id HAVING COUNT(DISTINCT se.degree_program_id) = 2;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se1 ON s.student_id = se1.student_id JOIN student_enrolment se2 ON s.student_id = se2.student_id WHERE se1.degree_program_id <> se2.degree_program_id AND se1.semester_id = se2.semester_id;
SELECT s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelor%';
SELECT s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelors%';
SELECT dp.degree_summary_name FROM degree_programs dp JOIN student_enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;
SELECT dp.degree_summary_name FROM degree_programs dp JOIN student_enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_description FROM degree_programs dp JOIN student_enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_description ORDER BY COUNT(se.student_id) DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_name FROM degree_programs dp JOIN student_enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_id) AS number_of_enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY number_of_enrollments DESC LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(se.student_enrolment_id) AS number_of_enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.first_name, s.middle_name, s.last_name, s.student_id ORDER BY number_of_enrollments DESC LIMIT 1;
SELECT semester_name FROM semesters WHERE semester_id NOT IN (     SELECT DISTINCT semester_id     FROM student_enrolment );
SELECT semester_name FROM semesters WHERE semester_id NOT IN (     SELECT DISTINCT semester_id     FROM student_enrolment );
SELECT DISTINCT c.course_name FROM courses c JOIN student_enrolment_courses sec ON c.course_id = sec.course_id;
SELECT DISTINCT c.course_name FROM courses c JOIN student_enrolment_courses sec ON c.course_id = sec.course_id;
SELECT c.course_name FROM courses c JOIN student_enrolment_courses sec ON c.course_id = sec.course_id GROUP BY c.course_id, c.course_name ORDER BY COUNT(sec.student_course_id) DESC LIMIT 1;
SELECT c.course_name FROM courses c JOIN student_enrolment_courses sec ON c.course_id = sec.course_id GROUP BY c.course_id, c.course_name ORDER BY COUNT(sec.student_course_id) DESC LIMIT 1;
SELECT s.last_name FROM students s JOIN addresses a ON s.current_address_id = a.address_id LEFT JOIN student_enrolment se ON s.student_id = se.student_id WHERE a.state_province_county = 'North Carolina'   AND se.student_id IS NULL;
SELECT s.last_name FROM students s JOIN addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.student_id NOT IN (     SELECT se.student_id     FROM student_enrolment se );
SELECT t.transcript_date, t.transcript_id FROM transcripts t JOIN transcript_contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_date, t.transcript_id HAVING COUNT(tc.student_course_id) >= 2;
```sql SELECT t.transcript_date, t.transcript_id FROM transcripts t JOIN transcript_contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_date, t.transcript_id HAVING COUNT(tc.student_course_id) >= 2; ```
SELECT cell_mobile_number  FROM students  WHERE first_name = 'Timmothy'  AND last_name = 'Ward';
SELECT cell_mobile_number  FROM students  WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1;
SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1;
SELECT first_name, middle_name, last_name FROM students ORDER BY date_left ASC LIMIT 1;
SELECT first_name, middle_name, last_name FROM students ORDER BY date_left ASC LIMIT 1;
SELECT s.first_name FROM students s JOIN addresses a1 ON s.current_address_id = a1.address_id JOIN addresses a2 ON s.permanent_address_id = a2.address_id WHERE a1.line_1 <> a2.line_1    OR a1.line_2 <> a2.line_2    OR a1.line_3 <> a2.line_3    OR a1.city <> a2.city    OR a1.zip_postcode <> a2.zip_postcode    OR a1.state_province_county <> a2.state_province_county    OR a1.country <> a2.country    OR a1.other_address_details <> a2.other_address_details;
SELECT first_name FROM students WHERE current_address_id <> permanent_address_id;
SELECT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details FROM addresses a JOIN (     SELECT current_address_id, COUNT(*) as student_count     FROM students     GROUP BY current_address_id     ORDER BY student_count DESC     LIMIT 1 ) s ON a.address_id = s.current_address_id;
```sql SELECT a.address_id, a.line_1, a.line_2 FROM addresses a JOIN students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2 ORDER BY COUNT(s.student_id) DESC LIMIT 1; ```
SELECT AVG(transcript_date) AS average_transcript_date FROM transcripts;
SELECT AVG(transcript_date) AS average_transcript_date FROM transcripts;
SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1;
SELECT transcript_date, transcript_id, other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1;
SELECT COUNT(*) AS number_of_transcripts_released FROM transcripts;
SELECT COUNT(*) FROM transcripts;
SELECT MAX(transcript_date) AS last_transcript_release_date FROM transcripts;
SELECT MAX(transcript_date) AS last_transcript_date FROM transcripts;
SELECT sec.student_course_id, COUNT(tc.transcript_id) AS transcript_count FROM student_enrolment_courses sec JOIN transcript_contents tc ON sec.student_course_id = tc.student_course_id GROUP BY sec.student_course_id ORDER BY transcript_count DESC LIMIT 1;
SELECT course_id, student_enrolment_id, COUNT(*) AS course_count FROM student_enrolment_courses GROUP BY course_id, student_enrolment_id ORDER BY course_count DESC LIMIT 1;
```sql SELECT t.transcript_date, t.transcript_id FROM transcripts t JOIN (     SELECT transcript_id, COUNT(*) AS result_count     FROM transcript_contents     GROUP BY transcript_id     ORDER BY result_count ASC     LIMIT 1 ) tc ON t.transcript_id = tc.transcript_id; ```
```sql SELECT t.transcript_date, t.transcript_id FROM transcripts t JOIN transcript_contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date ORDER BY COUNT(tc.student_course_id) ASC LIMIT 1; ```
SELECT semester_name FROM semesters WHERE semester_id IN (     SELECT semester_id     FROM student_enrolment     WHERE degree_program_id IN (         SELECT degree_program_id         FROM degree_programs         WHERE degree_summary_name = 'Master'     ) ) AND semester_id IN (     SELECT semester_id     FROM student_enrolment     WHERE degree_program_id IN (         SELECT degree_program_id         FROM degree_programs         WHERE degree_summary_name = 'Bachelor'     ) );
SELECT semester_id FROM student_enrolment se JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY semester_id HAVING COUNT(DISTINCT dp.degree_summary_name) = 2;
SELECT COUNT(DISTINCT a.address_id) FROM addresses a JOIN students s ON a.address_id = s.current_address_id;
SELECT DISTINCT a.* FROM addresses a JOIN students s ON a.address_id = s.current_address_id    OR a.address_id = s.permanent_address_id;
SELECT * FROM students ORDER BY last_name DESC, first_name DESC, middle_name DESC;
SELECT *  FROM students  ORDER BY last_name DESC;
SELECT * FROM sections WHERE section_name = 'h';
SELECT section_description  FROM sections  WHERE section_name = 'h';
SELECT first_name FROM students WHERE permanent_address_id IN (     SELECT address_id     FROM addresses     WHERE country = 'Haiti' ) OR cell_mobile_number = '09700166582';
SELECT s.first_name FROM students s JOIN addresses a ON s.permanent_address_id = a.address_id WHERE a.country = 'Haiti'    OR s.cell_mobile_number = '09700166582';
SELECT title FROM cartoon ORDER BY title;
SELECT title FROM cartoon ORDER BY title;
SELECT title  FROM cartoon  WHERE directed_by = 'Ben Jones';
SELECT title  FROM cartoon  WHERE directed_by = 'Ben Jones';
SELECT COUNT(*)  FROM cartoon  WHERE written_by = 'Joseph Kuhr';
SELECT COUNT(*)  FROM cartoon  WHERE written_by = 'Joseph Kuhr';
SELECT c.title, c.directed_by FROM cartoon c ORDER BY c.original_air_date;
SELECT c.title, c.directed_by FROM cartoon c JOIN tv_series ts ON c.channel = ts.channel ORDER BY c.original_air_date;
SELECT title  FROM cartoon  WHERE directed_by IN ('Ben Jones', 'Brandon Vietti');
SELECT title FROM cartoon WHERE directed_by IN ('Ben Jones', 'Brandon Vietti');
SELECT country, COUNT(*) AS num_tv_channels FROM tv_channel GROUP BY country ORDER BY num_tv_channels DESC LIMIT 1;
SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;
SELECT content  FROM tv_channel  WHERE series_name = 'Sky Radio';
SELECT content  FROM tv_channel  WHERE series_name = 'Sky Radio';
SELECT package_option  FROM tv_channel  WHERE series_name = 'Sky Radio';
SELECT DISTINCT package_option FROM tv_channel WHERE series_name = 'Sky Radio';
SELECT COUNT(*)  FROM tv_channel  WHERE language = 'English';
SELECT COUNT(*)  FROM tv_channel  WHERE language = 'English';
SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language ORDER BY num_channels ASC LIMIT 1;
```sql SELECT language, COUNT(*) AS channel_count FROM tv_channel GROUP BY language ORDER BY channel_count ASC LIMIT 1; ```
SELECT language, COUNT(*)  FROM tv_channel  GROUP BY language;
SELECT language, COUNT(*)  FROM tv_channel  GROUP BY language;
SELECT tv_channel.series_name FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.title = 'The Rise of the Blue Beetle!';
SELECT tv_channel.series_name FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.title = 'The Rise of the Blue Beetle';
SELECT c.title FROM cartoon c JOIN tv_series ts ON c.channel = ts.channel JOIN tv_channel tc ON ts.channel = tc.id WHERE tc.series_name = 'Sky Radio' AND tc.content = 'Cartoon';
SELECT cartoon.title FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio';
SELECT episode FROM tv_series ORDER BY rating;
SELECT episode FROM tv_series ORDER BY rating;
SELECT tv_series.episode, tv_series.rating FROM tv_series ORDER BY CAST(tv_series.rating AS FLOAT) DESC LIMIT 3;
SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3;
SELECT MIN(share), MAX(share) FROM tv_series;
SELECT MAX(share), MIN(share) FROM tv_series;
SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime';
SELECT air_date  FROM tv_series  WHERE episode = 'A Love of a Lifetime';
SELECT weekly_rank  FROM tv_series  WHERE episode = 'A Love of a Lifetime';
SELECT weekly_rank  FROM tv_series  WHERE episode = 'A Love of a Lifetime';
SELECT tv_channel.series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.episode = 'A Love of a Lifetime';
SELECT tv_channel.series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.episode = 'A Love of a Lifetime';
SELECT tv_series.episode FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio';
SELECT tv_series.episode FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio';
SELECT directed_by, COUNT(*) AS number_of_cartoons FROM cartoon WHERE directed_by IN ('Ben Jones') GROUP BY directed_by;
SELECT directed_by, COUNT(*)  FROM cartoon  GROUP BY directed_by;
SELECT c.production_code, c.channel FROM cartoon c JOIN tv_series ts ON c.channel = ts.channel ORDER BY ts.air_date DESC LIMIT 1;
SELECT c.production_code, c.channel FROM cartoon c ORDER BY c.original_air_date DESC LIMIT 1;
SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 'yes';
SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 'yes';
SELECT DISTINCT tv_channel.country FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.written_by = 'Todd Casey';
SELECT DISTINCT tv_channel.country FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.written_by = 'Todd Casey' AND tv_channel.content = 'cartoon';
SELECT DISTINCT tv_channel.country FROM tv_channel WHERE tv_channel.id NOT IN (     SELECT DISTINCT tv_channel.id     FROM tv_channel     JOIN cartoon ON tv_channel.id = cartoon.channel     WHERE cartoon.written_by = 'Todd Casey' );
SELECT DISTINCT tv_channel.country FROM tv_channel WHERE tv_channel.id NOT IN (     SELECT DISTINCT tv_channel.id     FROM tv_channel     JOIN cartoon ON tv_channel.id = cartoon.channel     WHERE cartoon.written_by = 'Todd Casey' );
SELECT DISTINCT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang');
SELECT DISTINCT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.directed_by = 'Ben Jones' AND tv_channel.series_name IN (     SELECT tv_channel.series_name     FROM tv_channel     JOIN tv_series ON tv_channel.id = tv_series.channel     JOIN cartoon ON tv_series.id = cartoon.channel     WHERE cartoon.directed_by = 'Michael Chang' );
SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'English';
SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'English';
SELECT id FROM tv_channel WHERE country IN (     SELECT country     FROM tv_channel     GROUP BY country     HAVING COUNT(id) > 2 );
SELECT channel FROM tv_series GROUP BY channel HAVING COUNT(DISTINCT id) > 2;
SELECT DISTINCT tv_channel.id FROM tv_channel LEFT JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.directed_by != 'Ben Jones' OR cartoon.directed_by IS NULL;
SELECT id FROM tv_channel WHERE id NOT IN (     SELECT DISTINCT channel     FROM cartoon     WHERE directed_by = 'Ben Jones' );
SELECT DISTINCT tv_channel.package_option FROM tv_channel WHERE tv_channel.id NOT IN (     SELECT DISTINCT tv_channel.id     FROM tv_channel     JOIN cartoon ON tv_channel.id = cartoon.channel     WHERE cartoon.directed_by = 'Ben Jones' );
SELECT DISTINCT tv_channel.package_option FROM tv_channel WHERE tv_channel.id NOT IN (     SELECT DISTINCT tv_channel.id     FROM tv_channel     JOIN cartoon ON tv_channel.id = cartoon.channel     WHERE cartoon.directed_by = 'Ben Jones' );
SELECT COUNT(*) FROM poker_player;
SELECT COUNT(*) FROM poker_player;
SELECT earnings FROM poker_player ORDER BY earnings DESC;
SELECT earnings FROM poker_player ORDER BY earnings DESC;
SELECT pp.final_table_made, pp.best_finish FROM poker_player pp JOIN people p ON pp.people_id = p.people_id;
SELECT pp.final_table_made, pp.best_finish FROM poker_player pp JOIN people p ON pp.people_id = p.people_id;
SELECT AVG(earnings) FROM poker_player;
SELECT AVG(earnings) FROM poker_player;
SELECT money_rank  FROM poker_player  ORDER BY earnings DESC  LIMIT 1;
SELECT money_rank  FROM poker_player  ORDER BY earnings DESC  LIMIT 1;
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;
SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id;
SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id;
SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id WHERE pp.earnings > 300000;
SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id WHERE pp.earnings > 300000;
SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id ORDER BY pp.final_table_made ASC;
SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id ORDER BY pp.final_table_made ASC;
SELECT p.birth_date FROM people p JOIN poker_player pp ON p.people_id = pp.people_id ORDER BY pp.earnings ASC LIMIT 1;
SELECT p.birth_date FROM people p JOIN poker_player pp ON p.people_id = pp.people_id ORDER BY pp.earnings ASC LIMIT 1;
SELECT pp.money_rank FROM poker_player pp JOIN people p ON pp.people_id = p.people_id ORDER BY p.height DESC LIMIT 1;
SELECT pp.money_rank FROM poker_player pp JOIN people p ON pp.people_id = p.people_id ORDER BY p.height DESC LIMIT 1;
SELECT AVG(p.earnings) FROM poker_player p JOIN people pe ON p.people_id = pe.people_id WHERE pe.height > 200;
SELECT AVG(pp.earnings) FROM poker_player pp JOIN people p ON pp.people_id = p.people_id WHERE p.height > 200;
SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id ORDER BY pp.earnings DESC;
SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id ORDER BY pp.earnings DESC;
SELECT p.nationality, COUNT(*)  FROM people p JOIN poker_player pp ON p.people_id = pp.people_id GROUP BY p.nationality;
SELECT nationality, COUNT(*)  FROM people  GROUP BY nationality;
SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;
SELECT name, birth_date FROM people ORDER BY name ASC;
SELECT name, birth_date FROM people ORDER BY name;
SELECT name FROM people WHERE nationality != 'Russia';
SELECT name FROM people WHERE nationality != 'Russia';
SELECT p.name FROM people p LEFT JOIN poker_player pp ON p.people_id = pp.people_id WHERE pp.people_id IS NULL;
SELECT p.name FROM people p LEFT JOIN poker_player pp ON p.people_id = pp.people_id WHERE pp.people_id IS NULL;
SELECT COUNT(DISTINCT nationality) FROM people;
SELECT COUNT(DISTINCT nationality) FROM people;
SELECT COUNT(DISTINCT state) FROM area_code_state;
SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC;
SELECT vote_id, phone_number, state FROM votes;
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM area_code_state;
SELECT MAX(created)  FROM votes  WHERE state = 'CA';
SELECT contestant_name  FROM contestants  WHERE contestant_name != 'Jessie Alloway';
SELECT DISTINCT state, created FROM votes;
SELECT c.contestant_number, c.contestant_name FROM contestants c JOIN (     SELECT contestant_number     FROM votes     GROUP BY contestant_number     HAVING COUNT(*) >= 2 ) v ON c.contestant_number = v.contestant_number;
SELECT c.contestant_number, c.contestant_name FROM contestants c JOIN (     SELECT contestant_number, COUNT(*) AS vote_count     FROM votes     GROUP BY contestant_number     ORDER BY vote_count ASC     LIMIT 1 ) v ON c.contestant_number = v.contestant_number;
SELECT COUNT(*)  FROM votes  WHERE state IN ('NY', 'CA');
SELECT COUNT(*)  FROM contestants  WHERE contestant_number NOT IN (SELECT DISTINCT contestant_number FROM votes);
SELECT area_code_state.area_code FROM votes JOIN area_code_state ON votes.state = area_code_state.state GROUP BY area_code_state.area_code ORDER BY COUNT(votes.vote_id) DESC LIMIT 1;
SELECT v.created, v.state, v.phone_number FROM votes v JOIN contestants c ON v.contestant_number = c.contestant_number WHERE c.contestant_name = 'Tabatha Gehling';
SELECT DISTINCT acs.area_code FROM area_code_state acs JOIN votes v1 ON acs.state = v1.state JOIN votes v2 ON acs.state = v2.state JOIN contestants c1 ON v1.contestant_number = c1.contestant_number JOIN contestants c2 ON v2.contestant_number = c2.contestant_number WHERE c1.contestant_name = 'Tabatha Gehling' AND c2.contestant_name = 'Kelly Clauss' AND v1.phone_number = v2.phone_number;
SELECT contestant_name  FROM contestants  WHERE contestant_name LIKE '%Al%';
SELECT name FROM country WHERE indepyear > 1950;
SELECT name FROM country WHERE indepyear > 1950;
SELECT COUNT(*)  FROM country  WHERE governmentform LIKE '%republic%';
SELECT COUNT(*)  FROM country  WHERE governmentform LIKE '%republic%';
SELECT SUM(surfacearea)  FROM country  WHERE region = 'Caribbean';
SELECT SUM(surfacearea)  FROM country  WHERE region = 'Caribbean';
SELECT continent  FROM country  WHERE name = 'Anguilla';
SELECT continent  FROM country  WHERE name = 'Anguilla';
SELECT country.region FROM city JOIN country ON city.countrycode = country.code WHERE city.name = 'Kabul';
SELECT country.region FROM city JOIN country ON city.countrycode = country.code WHERE city.name = 'Kabul';
SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba') ORDER BY percentage DESC LIMIT 1;
SELECT language FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1;
SELECT population, lifeexpectancy  FROM country  WHERE name = 'Brazil';
SELECT population, lifeexpectancy  FROM country  WHERE name = 'Brazil';
SELECT region, population  FROM country  WHERE name = 'Angola';
SELECT region, population FROM country WHERE name = 'Angola';
SELECT AVG(lifeexpectancy)  FROM country  WHERE region = 'Central Africa';
SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa';
SELECT name  FROM country  WHERE continent = 'Asia'  ORDER BY lifeexpectancy ASC  LIMIT 1;
SELECT name  FROM country  WHERE continent = 'Asia'  ORDER BY lifeexpectancy ASC  LIMIT 1;
SELECT SUM(country.population) AS total_population, MAX(country.gnp) AS max_gnp FROM country WHERE country.continent = 'Asia';
SELECT SUM(city.population) AS total_population, MAX(country.gnp) AS largest_gnp FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'Asia';
SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic';
SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic';
SELECT SUM(surfacearea)  FROM country  WHERE continent IN ('Asia', 'Europe');
SELECT SUM(surfacearea)  FROM country  WHERE continent IN ('Asia', 'Europe');
SELECT SUM(population) FROM city WHERE district = 'Gelderland';
SELECT SUM(population) FROM city WHERE district = 'Gelderland';
SELECT AVG(gnp), SUM(population) FROM country WHERE governmentform = 'US territory';
SELECT AVG(gnp), SUM(population) FROM country WHERE name LIKE '%US%' OR name LIKE '%United States%' OR name LIKE '%America%' OR name LIKE '%American%' OR name LIKE '%Territory%';
SELECT COUNT(DISTINCT language) FROM countrylanguage;
SELECT COUNT(DISTINCT language) FROM countrylanguage;
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW';
SELECT COUNT(*)  FROM countrylanguage  WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba');
SELECT COUNT(*)  FROM countrylanguage  WHERE countrycode = 'AFG' AND isofficial = 'T';
SELECT COUNT(*)  FROM countrylanguage  WHERE countrycode = 'AFG' AND isofficial = 'T';
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1;
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY COUNT(countrylanguage.language) DESC LIMIT 1;
SELECT continent FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1;
SELECT continent FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent ORDER BY COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1;
SELECT COUNT(*) FROM country c JOIN countrylanguage cl1 ON c.code = cl1.countrycode JOIN countrylanguage cl2 ON c.code = cl2.countrycode WHERE cl1.language = 'English' AND cl2.language = 'Dutch';
SELECT COUNT(DISTINCT country.code) FROM country JOIN countrylanguage AS cl1 ON country.code = cl1.countrycode JOIN countrylanguage AS cl2 ON country.code = cl2.countrycode WHERE cl1.language = 'English' AND cl2.language = 'Dutch';
SELECT DISTINCT c.name FROM country c JOIN countrylanguage cl1 ON c.code = cl1.countrycode JOIN countrylanguage cl2 ON c.code = cl2.countrycode WHERE cl1.language = 'English' AND cl2.language = 'French';
SELECT c.name FROM country c JOIN countrylanguage cl1 ON c.code = cl1.countrycode JOIN countrylanguage cl2 ON c.code = cl2.countrycode WHERE cl1.language = 'English' AND cl2.language = 'French';
SELECT c.name FROM country c JOIN countrylanguage cl1 ON c.code = cl1.countrycode JOIN countrylanguage cl2 ON c.code = cl2.countrycode WHERE cl1.language = 'English' AND cl1.isofficial = 'T' AND cl2.language = 'French' AND cl2.isofficial = 'T';
SELECT c.name FROM country c JOIN countrylanguage cl1 ON c.code = cl1.countrycode JOIN countrylanguage cl2 ON c.code = cl2.countrycode WHERE cl1.language = 'English' AND cl1.isofficial = 'T'   AND cl2.language = 'French' AND cl2.isofficial = 'T';
SELECT COUNT(DISTINCT continent) FROM country WHERE code IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'Chinese' );
SELECT COUNT(DISTINCT continent) FROM country WHERE code IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'Chinese' );
SELECT DISTINCT region FROM country WHERE code IN (     SELECT countrycode     FROM countrylanguage     WHERE language IN ('English', 'Dutch') );
SELECT DISTINCT region FROM country WHERE code IN (     SELECT countrycode     FROM countrylanguage     WHERE language IN ('Dutch', 'English') );
SELECT DISTINCT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T' AND (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch');
SELECT DISTINCT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T' AND (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch');
SELECT language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.continent = 'Asia' GROUP BY language ORDER BY SUM(countrylanguage.percentage * country.population / 100) DESC LIMIT 1;
SELECT language FROM countrylanguage WHERE countrycode IN (     SELECT code     FROM country     WHERE continent = 'Asia' ) GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1;
SELECT language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.governmentform = 'Republic' GROUP BY language HAVING COUNT(DISTINCT cl.countrycode) = 1;
SELECT cl.language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.governmentform = 'Republic' GROUP BY cl.language HAVING COUNT(DISTINCT cl.countrycode) = 1;
SELECT city.name, city.population FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1;
SELECT city.name, city.population FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1;
SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1;
SELECT name, population, lifeexpectancy  FROM country  WHERE continent = 'Asia'  ORDER BY surfacearea DESC  LIMIT 1;
SELECT AVG(c.lifeexpectancy) FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.isofficial = 'F' AND cl.language = 'English';
SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE isofficial = 'T' AND language = 'English' );
SELECT SUM(c.population) FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language != 'English';
SELECT SUM(c.population) FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language != 'English'   AND cl.isofficial = 'T';
SELECT cl.language FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE c.headofstate = 'Beatrix' AND cl.isofficial = 'T';
SELECT cl.language FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE c.headofstate = 'Beatrix' AND cl.isofficial = 'T';
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode IN (     SELECT code     FROM country     WHERE indepyear < 1930 );
SELECT COUNT(DISTINCT language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE indepyear < 1930;
SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe');
SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe');
SELECT c1.name FROM country c1 WHERE c1.continent = 'Africa' AND c1.population < (SELECT MIN(c2.population) FROM country c2 WHERE c2.continent = 'Asia');
SELECT c1.name FROM country c1 WHERE c1.continent = 'Africa' AND c1.population < (SELECT MIN(c2.population)                       FROM country c2                       WHERE c2.continent = 'Asia');
SELECT name FROM country WHERE continent = 'Asia' AND population > (     SELECT MAX(population)     FROM country     WHERE continent = 'Africa' );
SELECT name FROM country WHERE continent = 'Asia' AND population > (     SELECT MAX(population)     FROM country     WHERE continent = 'Africa' );
SELECT DISTINCT country.code FROM country WHERE country.code NOT IN (     SELECT countrylanguage.countrycode     FROM countrylanguage     WHERE countrylanguage.language = 'English' );
SELECT code  FROM country  WHERE code NOT IN (     SELECT countrycode      FROM countrylanguage      WHERE language = 'English' );
SELECT DISTINCT countrycode FROM countrylanguage WHERE language != 'English';
SELECT DISTINCT countrycode  FROM countrylanguage  WHERE language != 'English';
SELECT code FROM country WHERE code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' ) AND governmentform != 'Republic';
SELECT code FROM country WHERE code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' AND isofficial = 'T' ) AND governmentform != 'Republic';
SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe' AND countrylanguage.isofficial = 'F';
SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe' AND countrylanguage.isofficial = 'F' AND countrylanguage.language = 'English';
SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T';
SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T';
SELECT name, indepyear, surfacearea FROM country ORDER BY population ASC LIMIT 1;
SELECT name, indepyear, surfacearea FROM country ORDER BY population ASC LIMIT 1;
SELECT population, name, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1;
SELECT name, population, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1;
SELECT c.name, COUNT(cl.language) AS num_languages FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.name HAVING COUNT(cl.language) >= 3;
SELECT c.name, COUNT(cl.language) AS language_count FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.name HAVING COUNT(cl.language) > 2;
```sql SELECT district, COUNT(*) AS city_count FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district; ```
SELECT district, COUNT(*) AS city_count FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;
```sql SELECT governmentform, SUM(population) AS total_population FROM country WHERE code IN (     SELECT code     FROM country     WHERE lifeexpectancy > 72 ) GROUP BY governmentform; ```
SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform;
```sql SELECT continent, AVG(lifeexpectancy) AS avg_life_expectancy, SUM(population) AS total_population FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72; ```
```sql SELECT continent, SUM(population) AS total_population, AVG(lifeexpectancy) AS average_life_expectancy FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72; ```
SELECT name, surfacearea  FROM country  ORDER BY surfacearea DESC  LIMIT 5;
SELECT name, surfacearea  FROM country  ORDER BY surfacearea DESC  LIMIT 5;
SELECT name FROM country ORDER BY population DESC LIMIT 3;
SELECT name FROM country ORDER BY population DESC LIMIT 3;
SELECT name FROM country ORDER BY population ASC LIMIT 3;
SELECT name FROM country ORDER BY population ASC LIMIT 3;
SELECT COUNT(*)  FROM country  WHERE continent = 'Asia';
SELECT COUNT(*)  FROM country  WHERE continent = 'Asia';
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;
SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_area FROM country WHERE continent = 'North America' AND surfacearea > 3000;
SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_surface_area FROM country WHERE continent = 'North America' AND surfacearea > 3000;
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(countrycode) DESC LIMIT 1;
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1;
SELECT cl.language, cl.countrycode, cl.percentage FROM countrylanguage cl JOIN (     SELECT countrycode, MAX(percentage) AS max_percentage     FROM countrylanguage     GROUP BY countrycode ) max_cl ON cl.countrycode = max_cl.countrycode AND cl.percentage = max_cl.max_percentage;
SELECT cl.language, cl.countrycode, cl.percentage FROM countrylanguage cl JOIN (     SELECT countrycode, MAX(percentage) AS max_percentage     FROM countrylanguage     GROUP BY countrycode ) max_cl ON cl.countrycode = max_cl.countrycode AND cl.percentage = max_cl.max_percentage;
SELECT COUNT(*) FROM countrylanguage WHERE language = 'Spanish' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish');
SELECT COUNT(DISTINCT country.code) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish' AND countrylanguage.isofficial = 'T' AND countrylanguage.percentage = (     SELECT MAX(percentage)     FROM countrylanguage cl     WHERE cl.countrycode = country.code );
SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' ORDER BY percentage DESC LIMIT 1;
SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T' ORDER BY percentage DESC;
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT name FROM conductor ORDER BY age ASC;
SELECT name FROM conductor ORDER BY age;
SELECT name FROM conductor WHERE nationality != 'USA';
SELECT name FROM conductor WHERE nationality != 'USA';
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;
SELECT AVG(attendance) FROM show;
SELECT AVG(attendance) FROM show;
SELECT MAX(CAST(REPLACE(share, '%', '') AS FLOAT)) || '%' AS max_share,        MIN(CAST(REPLACE(share, '%', '') AS FLOAT)) || '%' AS min_share FROM performance WHERE type != 'Live final';
SELECT MAX(share) AS max_share, MIN(share) AS min_share FROM performance WHERE type != 'Live final';
SELECT COUNT(DISTINCT nationality) FROM conductor;
SELECT COUNT(DISTINCT nationality) FROM conductor;
SELECT name FROM conductor ORDER BY year_of_work DESC;
SELECT name FROM conductor ORDER BY year_of_work DESC;
SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1;
SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1;
SELECT c.name, o.orchestra FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id;
SELECT c.name, o.orchestra FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id;
SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.conductor_id, c.name HAVING COUNT(DISTINCT o.orchestra_id) > 1;
SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.conductor_id, c.name HAVING COUNT(DISTINCT o.orchestra_id) > 1;
SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name ORDER BY COUNT(o.orchestra_id) DESC LIMIT 1;
SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name ORDER BY COUNT(DISTINCT o.orchestra_id) DESC LIMIT 1;
SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id WHERE o.year_of_founded > 2008;
SELECT DISTINCT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id WHERE o.year_of_founded > 2008;
SELECT record_company, COUNT(DISTINCT orchestra_id) AS number_of_orchestras FROM orchestra GROUP BY record_company;
SELECT record_company, COUNT(*) AS orchestra_count FROM orchestra GROUP BY record_company;
SELECT major_record_format, COUNT(*) AS format_count FROM orchestra GROUP BY major_record_format ORDER BY format_count ASC;
SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC;
```sql SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(orchestra_id) DESC LIMIT 1; ```
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(orchestra_id) DESC LIMIT 1;
SELECT o.orchestra FROM orchestra o LEFT JOIN performance p ON o.orchestra_id = p.orchestra_id WHERE p.performance_id IS NULL;
SELECT o.orchestra FROM orchestra o LEFT JOIN performance p ON o.orchestra_id = p.orchestra_id WHERE p.performance_id IS NULL;
SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003;
```sql SELECT DISTINCT o1.record_company FROM orchestra o1 JOIN orchestra o2 ON o1.record_company = o2.record_company WHERE o1.year_of_founded < 2003 AND o2.year_of_founded > 2003; ```
SELECT COUNT(*) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');
SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');
SELECT DISTINCT o.year_of_founded FROM orchestra o JOIN performance p ON o.orchestra_id = p.orchestra_id GROUP BY o.orchestra_id, o.year_of_founded HAVING COUNT(p.performance_id) > 1;
SELECT o.year_of_founded FROM orchestra o JOIN performance p ON o.orchestra_id = p.orchestra_id GROUP BY o.year_of_founded HAVING COUNT(p.performance_id) > 1;
SELECT COUNT(*) FROM highschooler;
SELECT COUNT(*) FROM highschooler;
SELECT name, grade FROM highschooler;
SELECT name, grade FROM highschooler;
SELECT DISTINCT grade FROM highschooler;
SELECT grade FROM highschooler;
SELECT grade FROM highschooler WHERE name = 'Kyle';
SELECT grade FROM highschooler WHERE name = 'Kyle';
SELECT name FROM highschooler WHERE grade = 10;
SELECT name FROM highschooler WHERE grade = 10;
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);
SELECT grade, COUNT(*)  FROM highschooler  GROUP BY grade;
SELECT grade, COUNT(*)  FROM highschooler  GROUP BY grade;
SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(id) DESC LIMIT 1;
SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(id) >= 4;
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(id) >= 4;
SELECT h.id, COUNT(f.friend_id) AS number_of_friends FROM highschooler h LEFT JOIN friend f ON h.id = f.student_id GROUP BY h.id;
SELECT h.id, COUNT(f.friend_id) AS friend_count FROM highschooler h LEFT JOIN friend f ON h.id = f.student_id GROUP BY h.id;
SELECT h.name, COUNT(f.friend_id) AS number_of_friends FROM highschooler h LEFT JOIN friend f ON h.id = f.student_id GROUP BY h.name;
SELECT h1.name, COUNT(f.friend_id) AS friend_count FROM highschooler h1 LEFT JOIN friend f ON h1.id = f.student_id GROUP BY h1.name;
SELECT h1.name FROM highschooler h1 JOIN friend f ON h1.id = f.student_id GROUP BY h1.name ORDER BY COUNT(f.friend_id) DESC LIMIT 1;
SELECT h1.name FROM highschooler h1 JOIN friend f ON h1.id = f.student_id GROUP BY h1.id, h1.name ORDER BY COUNT(f.friend_id) DESC LIMIT 1;
SELECT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY h.id, h.name HAVING COUNT(f.friend_id) >= 3;
SELECT h1.name FROM highschooler h1 JOIN friend f ON h1.id = f.student_id GROUP BY h1.id, h1.name HAVING COUNT(f.friend_id) >= 3;
SELECT h2.name FROM highschooler h1 JOIN friend f ON h1.id = f.student_id JOIN highschooler h2 ON f.friend_id = h2.id WHERE h1.name = 'Kyle';
SELECT h2.name FROM highschooler h1 JOIN friend f ON h1.id = f.student_id JOIN highschooler h2 ON f.friend_id = h2.id WHERE h1.name = 'Kyle';
SELECT COUNT(*) FROM friend JOIN highschooler ON highschooler.id = friend.student_id WHERE highschooler.name = 'Kyle';
SELECT COUNT(*) FROM friend JOIN highschooler ON highschooler.id = friend.student_id WHERE highschooler.name = 'Kyle';
SELECT h.id FROM highschooler h LEFT JOIN friend f ON h.id = f.student_id OR h.id = f.friend_id WHERE f.student_id IS NULL AND f.friend_id IS NULL;
SELECT h.id FROM highschooler h LEFT JOIN friend f ON h.id = f.student_id OR h.id = f.friend_id WHERE f.student_id IS NULL AND f.friend_id IS NULL;
SELECT h.name FROM highschooler h LEFT JOIN friend f ON h.id = f.student_id OR h.id = f.friend_id WHERE f.student_id IS NULL AND f.friend_id IS NULL;
SELECT name FROM highschooler WHERE id NOT IN (     SELECT student_id     FROM friend     UNION     SELECT friend_id     FROM friend );
SELECT DISTINCT h1.id FROM highschooler h1 JOIN friend f ON h1.id = f.student_id JOIN likes l ON h1.id = l.liked_id;
SELECT DISTINCT h.id FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.liked_id;
SELECT h1.name FROM highschooler h1 WHERE EXISTS (     SELECT 1     FROM friend f     WHERE f.student_id = h1.id ) AND EXISTS (     SELECT 1     FROM likes l     WHERE l.liked_id = h1.id );
SELECT DISTINCT h1.name FROM highschooler h1 JOIN friend f ON h1.id = f.student_id JOIN likes l ON h1.id = l.liked_id;
SELECT liked_id, COUNT(*)  FROM likes  GROUP BY liked_id;
SELECT liked_id AS student_id, COUNT(*) AS likes_count FROM likes GROUP BY liked_id;
SELECT h.name, COUNT(l.liked_id) AS number_of_likes FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.name;
SELECT h.name, COUNT(l.liked_id) AS likes_count FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.name;
SELECT h.name FROM highschooler h JOIN (     SELECT liked_id, COUNT(*) AS like_count     FROM likes     GROUP BY liked_id     ORDER BY like_count DESC     LIMIT 1 ) l ON h.id = l.liked_id;
SELECT h.name FROM highschooler h JOIN (     SELECT liked_id, COUNT(*) AS like_count     FROM likes     GROUP BY liked_id     ORDER BY like_count DESC     LIMIT 1 ) l ON h.id = l.liked_id;
SELECT h.name FROM highschooler h JOIN (     SELECT student_id     FROM likes     GROUP BY student_id     HAVING COUNT(*) >= 2 ) l ON h.id = l.student_id;
SELECT h.name FROM highschooler h JOIN likes l ON h.id = l.liked_id GROUP BY h.id, h.name HAVING COUNT(l.student_id) >= 2;
SELECT h1.name FROM highschooler h1 JOIN friend f1 ON h1.id = f1.student_id JOIN highschooler h2 ON f1.friend_id = h2.id WHERE h1.grade > 5 GROUP BY h1.id, h1.name HAVING COUNT(f1.friend_id) >= 2;
SELECT h.name FROM highschooler h WHERE h.grade > 5 AND (     SELECT COUNT(*)     FROM friend f     WHERE f.student_id = h.id ) >= 2;
SELECT COUNT(*) FROM likes WHERE liked_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT COUNT(*)  FROM likes  JOIN highschooler ON likes.student_id = highschooler.id  WHERE highschooler.name = 'Kyle';
SELECT AVG(h.grade) FROM highschooler h WHERE h.id IN (SELECT DISTINCT f.student_id FROM friend f);
SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT DISTINCT student_id FROM friend);
SELECT MIN(h.grade) FROM highschooler h WHERE NOT EXISTS (     SELECT 1     FROM friend f     WHERE f.student_id = h.id OR f.friend_id = h.id );
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) AND id NOT IN (SELECT friend_id FROM friend);
SELECT DISTINCT o.state FROM owners o JOIN professionals p ON o.state = p.state;
SELECT DISTINCT o.state FROM owners o JOIN professionals p ON o.state = p.state;
SELECT AVG(CAST(d.age AS FLOAT)) FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id;
SELECT AVG(CAST(d.age AS FLOAT)) FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id;
SELECT p.professional_id, p.last_name, p.cell_number FROM professionals p LEFT JOIN treatments t ON p.professional_id = t.professional_id WHERE p.state = 'Indiana'    OR (SELECT COUNT(*) FROM treatments t2 WHERE t2.professional_id = p.professional_id) > 2;
SELECT p.professional_id, p.last_name, p.cell_number FROM professionals p LEFT JOIN (     SELECT professional_id, COUNT(*) as treatment_count     FROM treatments     GROUP BY professional_id ) t ON p.professional_id = t.professional_id WHERE p.state = 'Indiana' OR t.treatment_count > 2;
SELECT d.name FROM dogs d LEFT JOIN treatments t ON d.dog_id = t.dog_id GROUP BY d.dog_id, d.name HAVING COALESCE(SUM(t.cost_of_treatment), 0) <= 1000;
SELECT d.name FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id GROUP BY d.name HAVING SUM(t.cost_of_treatment) <= 1000;
SELECT DISTINCT p.first_name FROM professionals p LEFT JOIN dogs d ON p.first_name = d.name WHERE d.name IS NULL UNION SELECT DISTINCT o.first_name FROM owners o LEFT JOIN dogs d ON o.first_name = d.name WHERE d.name IS NULL;
SELECT DISTINCT o.first_name FROM owners o WHERE o.first_name NOT IN (SELECT d.name FROM dogs d) UNION SELECT DISTINCT p.first_name FROM professionals p WHERE p.first_name NOT IN (SELECT d.name FROM dogs d);
SELECT p.professional_id, p.role_code, p.email_address FROM professionals p LEFT JOIN treatments t ON p.professional_id = t.professional_id LEFT JOIN dogs d ON t.dog_id = d.dog_id WHERE d.dog_id IS NULL;
SELECT p.professional_id, p.role_code, p.email_address FROM professionals p LEFT JOIN treatments t ON p.professional_id = t.professional_id LEFT JOIN dogs d ON t.dog_id = d.dog_id WHERE d.dog_id IS NULL OR d.abandoned_yn = 'Y';
SELECT o.owner_id, o.first_name, o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT o.owner_id, o.first_name, o.last_name FROM owners o JOIN (     SELECT owner_id, COUNT(*) AS dog_count     FROM dogs     GROUP BY owner_id     ORDER BY dog_count DESC     LIMIT 1 ) d ON o.owner_id = d.owner_id;
SELECT p.professional_id, p.role_code, p.first_name FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2;
SELECT p.professional_id, p.role_code, p.first_name FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2;
SELECT b.breed_name FROM breeds b JOIN dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT b.breed_name FROM dogs d JOIN breeds b ON d.breed_code = b.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
```sql SELECT o.owner_id, o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY COUNT(t.treatment_id) DESC LIMIT 1; ```
SELECT o.owner_id, o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
```sql SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code = (     SELECT treatment_type_code     FROM treatments     GROUP BY treatment_type_code     ORDER BY SUM(cost_of_treatment) ASC     LIMIT 1 ); ```
SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code = (     SELECT treatment_type_code     FROM treatments     GROUP BY treatment_type_code     ORDER BY SUM(cost_of_treatment) ASC     LIMIT 1 );
SELECT o.owner_id, o.zip_code FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
```sql SELECT o.owner_id, o.zip_code FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1; ```
```sql SELECT p.professional_id, p.cell_number FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2; ```
SELECT p.professional_id, p.cell_number FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;
SELECT p.first_name, p.last_name FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);
SELECT p.first_name, p.last_name FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);
SELECT t.date_of_treatment, p.first_name FROM treatments t JOIN professionals p ON t.professional_id = p.professional_id;
SELECT t.date_of_treatment, p.first_name FROM treatments t JOIN professionals p ON t.professional_id = p.professional_id;
SELECT t.cost_of_treatment, tt.treatment_type_description FROM treatments t JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT t.cost_of_treatment, tt.treatment_type_description FROM treatments t JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT o.first_name, o.last_name, s.size_description FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN sizes s ON d.size_code = s.size_code;
SELECT o.first_name, o.last_name, s.size_description FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN sizes s ON d.size_code = s.size_code;
SELECT o.first_name, d.name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id;
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id;
```sql SELECT d.name, t.date_of_treatment FROM dogs d JOIN breeds b ON d.breed_code = b.breed_code JOIN treatments t ON d.dog_id = t.dog_id WHERE b.breed_code = (     SELECT breed_code     FROM breeds     JOIN dogs ON breeds.breed_code = dogs.breed_code     GROUP BY breeds.breed_code     ORDER BY COUNT(dogs.dog_id) ASC     LIMIT 1 ); ```
```sql SELECT d.name, t.date_of_treatment FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id JOIN breeds b ON d.breed_code = b.breed_code WHERE b.breed_code = (     SELECT breed_code     FROM dogs     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 ); ```
SELECT o.first_name, d.name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';
SELECT o.first_name, d.name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';
SELECT date_arrived, date_departed FROM dogs WHERE dog_id IN (     SELECT DISTINCT dog_id     FROM treatments );
SELECT d.date_arrived, d.date_departed FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id;
SELECT o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id ORDER BY d.date_of_birth DESC LIMIT 1;
SELECT o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id ORDER BY d.date_of_birth DESC LIMIT 1;
SELECT email_address FROM professionals WHERE state IN ('Hawaii', 'Wisconsin');
SELECT email_address FROM professionals WHERE state IN ('Hawaii', 'Wisconsin');
SELECT date_arrived, date_departed FROM dogs;
SELECT date_arrived, date_departed FROM dogs;
SELECT COUNT(DISTINCT dog_id)  FROM treatments;
SELECT COUNT(DISTINCT dog_id)  FROM treatments;
SELECT COUNT(DISTINCT professional_id) FROM treatments WHERE dog_id IS NOT NULL;
SELECT COUNT(DISTINCT professional_id) FROM treatments WHERE dog_id IN (SELECT dog_id FROM dogs);
SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%';
SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%';
SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%';
SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%';
SELECT COUNT(*) FROM dogs WHERE CAST(age AS INTEGER) < (SELECT AVG(CAST(age AS INTEGER)) FROM dogs);
SELECT COUNT(*) FROM dogs WHERE CAST(age AS INTEGER) < (SELECT AVG(CAST(age AS INTEGER)) FROM dogs);
SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT cost_of_treatment  FROM treatments  ORDER BY date_of_treatment DESC  LIMIT 1;
SELECT COUNT(*) FROM dogs d LEFT JOIN treatments t ON d.dog_id = t.dog_id WHERE t.treatment_id IS NULL;
SELECT COUNT(*) FROM dogs d LEFT JOIN treatments t ON d.dog_id = t.dog_id WHERE t.treatment_id IS NULL;
SELECT COUNT(*) FROM owners o LEFT JOIN dogs d ON o.owner_id = d.owner_id WHERE d.dog_id IS NULL;
SELECT COUNT(*) FROM owners o WHERE NOT EXISTS (     SELECT 1     FROM dogs d     WHERE d.owner_id = o.owner_id     AND d.date_adopted IS NULL     AND d.date_departed IS NULL );
SELECT COUNT(*)  FROM professionals p WHERE NOT EXISTS (     SELECT 1      FROM treatments t      WHERE t.professional_id = p.professional_id );
SELECT COUNT(*)  FROM professionals p WHERE NOT EXISTS (     SELECT 1      FROM treatments t      WHERE t.professional_id = p.professional_id );
SELECT name, age, weight FROM dogs WHERE abandoned_yn = '1';
SELECT name, age, weight FROM dogs WHERE abandoned_yn = '1';
SELECT AVG(CAST(age AS FLOAT)) FROM dogs;
SELECT AVG(CAST(age AS FLOAT)) FROM dogs;
SELECT MAX(CAST(age AS INTEGER)) AS oldest_dog_age FROM dogs;
SELECT MAX(CAST(age AS INTEGER)) AS oldest_dog_age FROM dogs;
SELECT charge_type, charge_amount FROM charges;
SELECT charge_type, charge_amount FROM charges;
SELECT MAX(charge_amount) FROM charges;
SELECT MAX(charge_amount) FROM charges;
SELECT email_address, cell_number, home_phone FROM professionals;
SELECT email_address, cell_number, home_phone FROM professionals;
SELECT breeds.breed_code, sizes.size_code FROM breeds CROSS JOIN sizes;
SELECT DISTINCT d.breed_code, d.size_code FROM dogs d;
SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT name FROM singer ORDER BY net_worth_millions ASC;
SELECT name FROM singer ORDER BY net_worth_millions ASC;
SELECT birth_year, citizenship FROM singer;
SELECT birth_year, citizenship FROM singer;
SELECT name FROM singer WHERE citizenship != 'France';
SELECT name FROM singer WHERE citizenship != 'French';
SELECT name  FROM singer  WHERE birth_year IN (1948, 1949);
SELECT name FROM singer WHERE birth_year IN (1948, 1949);
SELECT name  FROM singer  ORDER BY net_worth_millions DESC  LIMIT 1;
SELECT name  FROM singer  ORDER BY net_worth_millions DESC  LIMIT 1;
SELECT citizenship, COUNT(*)  FROM singer  GROUP BY citizenship;
SELECT citizenship, COUNT(*)  FROM singer  GROUP BY citizenship;
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT citizenship, MAX(net_worth_millions) AS max_net_worth FROM singer GROUP BY citizenship;
SELECT citizenship, MAX(net_worth_millions) AS max_net_worth FROM singer GROUP BY citizenship;
SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id;
SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id;
SELECT DISTINCT s.name FROM singer s JOIN song so ON s.singer_id = so.singer_id WHERE so.sales > 300000;
SELECT DISTINCT s.name FROM singer s JOIN song so ON s.singer_id = so.singer_id WHERE so.sales > 300000;
SELECT s.name FROM singer s JOIN song so ON s.singer_id = so.singer_id GROUP BY s.name HAVING COUNT(so.song_id) > 1;
SELECT s.name FROM singer s JOIN song so ON s.singer_id = so.singer_id GROUP BY s.name HAVING COUNT(so.song_id) > 1;
SELECT s.name, SUM(so.sales) AS total_sales FROM singer s JOIN song so ON s.singer_id = so.singer_id GROUP BY s.name;
SELECT s.name, SUM(so.sales) AS total_sales FROM singer s JOIN song so ON s.singer_id = so.singer_id GROUP BY s.name;
SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);
SELECT s.name FROM singer s LEFT JOIN song so ON s.singer_id = so.singer_id WHERE so.song_id IS NULL;
SELECT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year > 1955;
SELECT DISTINCT s1.citizenship FROM singer s1 JOIN singer s2 ON s1.citizenship = s2.citizenship WHERE s1.birth_year < 1945 AND s2.birth_year > 1955;
SELECT COUNT(*) FROM other_available_features;
SELECT rft.feature_type_name FROM ref_feature_types rft JOIN other_available_features oaf ON rft.feature_type_code = oaf.feature_type_code WHERE oaf.feature_name = 'AirCon';
SELECT DISTINCT rpt.property_type_description FROM properties p JOIN ref_property_types rpt ON p.property_type_code = rpt.property_type_code;
SELECT property_name FROM properties WHERE (property_type_code = 'house' OR property_type_code = 'apartment')   AND room_count > 1;
